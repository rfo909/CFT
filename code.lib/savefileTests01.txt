# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2023 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<<<<<<<<<<<<<< EOF
Testing that local blocks scope and operation is correct (v2.4.0)
Also verifying that inner blocks and lambdas do not affect outer loop logic

2021-03-13 RFO

Later expanded to all sorts of true/false tests.
>>>>>>>>>>>>>>>> EOF
/Readme



{1+1}
/t1

t1==2
/Test01_SumInsideLocalBlock




Inner{1+1}
/t1b

t1b==2
/Test01_SumInsideInnerBlock




{List(1,2,3)->x out(x+10)}
/t2

t2.concat("-")=="11-12-13"
/Test02_ListIterInLocalBlock




{List(1,2,3)->x out(x+10) | _.sum}
/t3

tryCatch(t3).ok == false
/Test03_PipeInsideLocal_ShouldFail




Inner {List(1,2,3)->x out(x+10) | _.sum}
/t4

t4==36
/Test04_PipeInsideInner




if(true) {
    1
} else {2
}
/t5

t5==1
/Test05_IfWithLocalBlocks



P(1)=>bool
if(bool) {
    List(1,2,3)->x out(x)
} else {
    1
}
/t5b

t5b(true).concat("-")=="1-2-3" && t5b(false)==1
/Test05_AlternateListOrValue




List(1,2,3)->x
    out(x)
    if (x%2==0) {
        out("even")
    } else {
        out("odd")
    }
/t6

t6.concat=="1odd2even3odd"
/Test06_ConditionaOutLocal




List(1,2,3)->x
    out(x)
    if (x%2==0) Inner {
        out("even")
    } else {
        out("odd")
    }
/t6b

t6b.concat=="1odd23odd"
/Test06_ConditionaOutInnerLocal






List(1,2,3)->x 
    if (x%2==0) {
        assert(false)
    }
    out(x)
/t7

t7.concat("-")=="1-3"
/Test07_ConditionalAssertFalseLocal


List(1,2,3)->x 
    if (x%2==0) {
        continue
    }
    out(x)
/t7b


t7b.concat("-")=="1-3"
/Test07b_ConditionalContinueLocal


List(1,2,3)->x
    if (x%2==0) Inner {
        List(4,5,6) -> y assert(false)
    }
    out(x)
/t8

t8.concat("-")=="1-2-3"
/Test08_OuterLoopUnaffectedByInnerBlockAssertFalse


List(1,2,3)->x
    if (x%2==0) Inner {
        List(4,5,6) -> y continue
    }
    out(x)
/t8b

t8b.concat("-")=="1-2-3"
/Test08b_OuterLoopUnaffectedByInnerBlockContinue





# 2021-08-27 Fixed


List(1,2,3)->x
    if (x%2==0) Inner {
        assert(false)
    }
    out(x)
/t9

t9.concat("-")=="1-2-3"
/Test09_OuterLoopUnaffectedByInnerBlockAssert





List(1,2,3)->x
    Lambda{assert(false)}.call
    out(x)
/t10

t10.concat("-")=="1-2-3"
/Test10_OuterLoopUnaffectedByLambdaAssert





# ------------------------------------------
# Test 11 - 2021-04-07 lambda file sort bug. 
#   Does not handle pipe correctly in Lambda code - the two should to the same!
#   2021-08-27 Fixed
# ------------------------------------------


# Lambda version
    P(1,Dir.files)=>files 
    L=Lambda{
        List(1,2,3)->x out(x)
        |
        "abc".chars->x out(x)
    }
    L.call()
/t11_lambda


# function version
    List(1,2,3)->x out(x)
    |
    "abc".chars->x out(x)
/t11_function



# Lambda output should match function output
    t11_lambda.concat==t11_function.concat
/Test11_lambda_pipe_2021_04_07




# ------------------------------------------
# Possibly the same problem as in Test11
# Except here we get a java exception (ConcurrentModificationException)
#   2021-08-27 Fixed
# ------------------------------------------

# If an Inner is like a function, the below should return true, but it fails with exception
    Inner {
        List(4,1,3,2)->i out(Int(i,i)) | _.sort->x out(x.data)
    }.concat
/t12_asInner


# Function implementation
    List(4,1,3,2)->i out(Int(i,i)) | _.sort->x out(x.data) | _.concat
/t12_asFunction


# Inner with loop PIPE loop
    tryCatch(t12_asInner) => res
    if (res.ok, res.result==t12_asFunction, "Exception")
/Test12_Inner_With_loop_pipe_loop





# -----------------------
# 2021-09-07
# Inner loop report output list 
# spilling over to outer scope
#
# Not a problem when replacing report() with out() - (See Test13b)
# -----------------------

# Function
# --
    List(1,2,3) => data
    Inner {
        data->x report("i"+x)
    } -> line
        out("x"+line)
        # --
        # Should return list of "x"+line
        # Verify test returns true by replacing report() with out() above
/t13

# Inner loop report output problem
# --
    t13 => result
    getType(result)=="List" && result.concat=="xi1xi2xi3"
/Test13_Inner_report_output_propagation




# Same as Test13 but with "out" instead of "report".
# report() should work like out(), but it doesn't
# ---

# Function
# --
    List(1,2,3) => data
    Inner {
        data->x out("i"+x)
    } -> line
        out("x"+line)
        # --
        # Should return list of "x"+line
        # Verify test returns true by replacing report() with out() above
/t13b

# Inner loop report output problem
# --
    t13b => result
    getType(result)=="List" && result.concat=="xi1xi2xi3"
/Test13b_Inner_out_output_propagation










# Function1
# --
    {}
/t14_f1


# Function2
# --
    1
    {}
/t14_f2


# Local block return value confusion
# --
# Initially thought that t14_f1 and t14_f2 should return the same, 
# as if an empty local block is an expression, but of course it is
# not. Instead an empty local block means EXACTLY the same 
# as NO CODE, and so ... :-)
# --
    t14_f1 == null && t14_f2 == 1
/Test14_local_block_return_value







# Local block return values
# --
    2
    {3}
/t15


# Local block return value
# --
    t15==3
/Test15_local_block_return_value







# Local block return values
# --
    2
    {null}
/t16


# Local block return value null
# --
    t16==null
/Test16_local_block_return_value_null




# Std.Java - accessing Java methods and constructors
# 2021-09-08
# This code exercises key functionality: class lookup, constructor lookup and call with params, 
# method lookup and call with params, and conversion of values as parameters and return value from function
#
Std.Java.forName("java.lang.String") => String
String.getConstructor(String).call(Std.Java.String("test")) => obj
String.getConstructor(String).call(Std.Java.String("123")) => obj2
Std.Java.Object(obj2) => paramObj
String.getMethod("concat",String).call(obj,paramObj).value
/t17



t17=="test123"
/Test17_Lib_Java_interface






# String .mergeExpr
# --

List(List(List(1)))
/t18

"a<<t18>>b".mergeExpr.concat("|")=="a1b"
/Test18_mergeExpr_list1_nested




List(1,2)
/t19

"a<<t19>>b".mergeExpr.concat("|")=="a1|2b"
/Test19_mergeExpr_list2





List(1,2,3)
/t20

"a<<t20>>b".mergeExpr.concat("|")=="a1|2|3b"
/Test20_mergeExpr_list3



"a<<null>>b".mergeExpr.concat("|")=="ab"
/Test21_mergeExpr_null




"a<<List(List(null))>>b".mergeExpr.concat("|")=="ab"
/Test22_mergeExpr_null_nested



f="X" "a<<f>>b".mergeExpr.concat("|")=="aXb"
/Test23_mergeExpr_localVariable




"abc".mergeExpr.concat("|")=="abc"
/Test24_mergeExpr_noExpr



"abc<<d".mergeExpr.concat("|")=="abc<<d"
/Test25_mergeExpr_incomplete_expr



"abc(5+5)def".mergeExpr("(",")").concat("|")=="abc10def"
/Test26_mergeExpr_alternative_markup




"a<<List(1,2,3)->x out(x+1)>>b".mergeExpr.concat("|")=="a2|3|4b"
/Test27_mergeExpr_iteration_ok


# PIPE not allowed - use a lambda :-)
#
tryCatch("a<<List(1,2,3)->x out(x+1) | _.concat>>b".mergeExpr).ok==false
/Test28_mergeExpr_iteration_pipe_invalid



# But Inner blocks are allowed, and they can contain PIPE.
#

List(1,2,3)
/t28b

'A<< Inner{t28b->x out(x+1) | _.sum}+1 >>B'.mergeExpr.concat("|")=="A10B"
/Test28b_MergeExpr_iteration_pipe_inside_inner



# SymDict

a=5 SymDict(a).get("a")==5
/Test29_Symdict_basic

a=List(1,2,3) SymDict(a).get("a").concat("|")=="1|2|3"
/Test30_Symdict_list





# mergeExpr for lists

a=5 b=6 List("a=<< a >>","b=<<b>>").mergeExpr.concat("|")=="a=5|b=6"
/Test31_list_mergeExpr




a=5 b=6 Sequence(
    @ a=<< a>>
    @ b=<<b>>
).mergeExpr.concat("|")=="a=5|b=6"
/Test32_sequence_mergeExpr



a=5 b=6 
<<<<<<<<< EOF
a=<< a >>
b=<<b>>
>>>>>>>>> EOF
.mergeExpr.concat("|")=="a=5|b=6"
/Test33_heredoc_mergeExpr




# type checking with "as"

3 as int == 3
/Test34_typechecking_as_int



3 as ("String int".split) == 3
/Test35_typechecking_as_expr


3 as ("int") == 3
/Test35_typechecking_as_expr_single



# "something" "as something" are TWO expressions, not one, the second
# pops a value off the stack and if all ok, returns it (to be pushed back on the stack).
# 
# This means that using tryCatch() isn't straight forward, and neither is putting 
# parantheses around them, because (expr) can not match what is really (expr expr)
#
# For its intended use, this is not a problem.

P(1) as String
/t36

tryCatch(t36(3)).ok==false
/Test36_typechecking_negative_as_int


List("String","int")
/t37a

P(1) as (t37a) => x
/t37b


tryCatch(t37b(1)).ok==true && tryCatch(t37b(Dict)).ok==false
/Test37_typechecking_negative_as_expr

#
# On the other hand, we CAN write {something as something} if we want to use
# tryCatch directly, as {...} is an expr
#

tryCatch({33 as String}).ok==false
/Test37b_typechecking_with_local_block





# Generic function (sort of) that produces an object (Dict)
# with a Lambda (converted to closure) for setting values of given type.
# --
    P(1) as String => type
    P(2) as (List(type,"null")) => value
    SymDict(type,value).set("update",Lambda{
      P(1) as (self.type)=>x self.set("value",x)  # set does not accept null
    })
/t38_getTypedObject


# Test it
# --
  t38_getTypedObject("String",null) => obj
  obj.update("value")  # ok
  
  tryCatch(
    obj.update(23)
  ).ok==false # should fail
/Test38_typechecking_with_closure


###
# v3.3.0 -- 2022-04 
### 

# Auto-calling Closures when looked up in Dict
# --

Dict.set("a",1).set("b",Lambda{P(1) as int=>x self.a+x})
/t39_dict


# Doing the Dict.<identifier> is resolved in DottedCall.java, and 
# if value is a Closure, then it is automatically invoked, with
# parameters (if defined)
# --
    dict=t39_dict
    dict.b(3)==4
/Test39_auto_invoke_closure_from_dict_lookup


# Using Dict.get("str") does NOT result in invoking the closure
# To simplify type checking with "as", both Lambdas and Closures
# have type "Callable" in CFT.
# --
    closure = t39_dict.get("b")
    
    # verify that variable "closure" is not result from auto-invoke
    getType(closure)=="Callable"  
    
/Test40_non_auto_invoke_closure_when_dict_get



# Verifying type of Lambda
# --
    getType(Lambda{})=="Callable"
/Test41_verify_lambda_is_callable
  


# Object functions calling each other - still uses self
# --
    Dict
        .set("baseValue",Lambda{
            1
        })
        .set("add",Lambda{
            P(1,0) as int=>x self.baseValue+x ## identical syntax for variables and no-parameter lambda
        })
    => d
    d.add(5)==6
/Test42_object_lambda_calling_member_lambda





# Dict.bind creates a Closure which we call with .call
# It is only in the specialized syntax where we use .ident on a Dict that
# a closure gets automatically called.
# --
    Dict.set("a",2).bind(Lambda{self.a}) => closure
    closure.call==2
/Test43_closure_dot_call



# Closures can also be taken from a Dict, with .get() and must
# then be called in the same way
# --
    Dict.set("a",2).set("func",Lambda{self.a}).get("func").call==2
/Test44_member_closure_dot_call



# The .? lookup now also applies to dictionary lookup
# --
    Dict.set("a",1).?a == true
/Test44_cond_lookup_in_dict


# .? lookup for closures
# --
    Dict.set("a",Lambda{})=>x x.?a == true
/Test45_cond_lookup_dict_closure


# .? lookup for closures
# --
    Dict.set("a",Lambda{})=>x x.?b == false
/Test45b_cond_lookup_dict_closure_inverted


# Dict.ident=Expr
# --
    Dict
        _.a=1
        _.f=Lambda{
            self.a=self.a+1
        }
    => obj
    
    obj.f
    obj.f
    obj.a==3
/Test46_Dict_dot_x_assigment



# "as" Dict name
# --
    x=Lambda{ P(1) as &Data => value }
    
    tryCatch(
        x.call(Dict("Data"))
    ).ok==true
/Test47_as_dict_name



# "as" Dict name
# --
    x=Lambda{ P(1) as &Data => value }
    
    tryCatch(
        x.call(Dict("XYZ"))
    ).ok==false
/Test47b_as_dict_name_inverse



# "as" Dict name
# --
    x=Lambda{ P(1) as &Data => value }
    
    tryCatch(
        x.call("Data")  # string
    ).ok==false
/Test47c_as_dict_name_inverse_nondict_value



# Test47d - check that lambda can not access creating context
# --
    a=1
    Lambda{a}.call  # should fail
//t47d_x

# tryCatch, verify error message
# --
    tryCatch(t47d_x) => ex
    ex.msg.contains("unknown symbol 'a'")
/Test47d_verify_lambda_no_access_to_create_context



# Test 48 - Verify that shared structures from super classes are
# properly copied when creating subclasses. The Dict.copyFrom function
# only copies Value objects, not cloning anything, but as we see below,
# each time class B is instantiated, it in turn instantiates a new class A 
# instance which it copies data from.
#
# This test documents this feature, more than being a real test.
# --

# test class A
# --
    self.a=List
    self.b=Dict
/class t48a

# test class B
# --
    self.copyFrom(t48a)
/class t48b

# Test48
# --
    x=t48b
    y=t48b
    x.a.add("aaa")
    x.b.bbb="bbb"
    # test
    !x.a.empty && !x.b.keys.empty && y.a.empty && y.b.keys.empty
/Test48_class_inheritance_independence



# Test 49 - verify that both lambdas and closure have type "Callable"
# --
    getType(Lambda{})=="Callable"
    &&
    getType(Dict.set("a",Lambda{}).get("a"))=="Callable"
/Test49_verify_lambda_and_closure_of_type_Callable


# Test 50 - verify predicate version of "as"
# --
    1 as? int => a
    1 as? String => b
    1 as? String? => c
    
    a && !b && !c
/Test50_as_predicate_version



# class X
# --
/class t51X

# Test 51 - predicate version of "as" for classes
# --
    t51X => obj
    
    obj as? Dict => a
    obj as? &t51X => b
    obj as? &x => c
    
    a && b && !c
/Test51_as_predicate_version_class_object
    


# Test 52 - predicate call is a try-catch, must handle call stack
# --
    # Copied from Util:ShowDict, where the problem first manifested
    
    LPresent=Lambda{
        P(1)=>val
        # Inner lambda to check if synthesizable via predicate call
        LSyn=Lambda{syn(P(1))}
        
        if (LSyn.?call(val)) {
            # value is synthesizable
            syn(val)
        } else {
            val
        }
    }

    tryCatch({
        Inner {
            Dict
                _.a=1
                _.b=Lambda{}  # closure - can not be synthesized in "stand-alone" form, only as part of Dict
                => x
                
            x.keys->key
                val=LPresent.call(x.get(key))
                #report(key,val)
            |
        }
    }).ok
    
    
/Test52_predicate_call_dot_Q_messing_up_call_stack




# Test 53 - What was for a brief moment considered a bug,
# is now a feature, and that is that a Lambda is part of
# a script file in the same way that functions are. 
#
# Here we are verifying that scope decision, which means it
# gets to call functions without qualifying "script": in front.

# Local function
# --
    3
/t53_data


# Lambda call 
# --
    Lambda{t53_data}.call
/t53_call


# Use tryCatch to verify ok
# --
    tryCatch(t53_call).ok
/Test53_Lambda_script_scope





# Test54: Call stack
# --

# Create Lambda
# --
    Lambda{P(1)+1}
/t54_A

# Another lambda, taking A as parameter and calling it
# with invalid argument (Dict)
# --
    Lambda{
        P(1) as Callable => a
        a.call(Dict)
    }
/t54_B

# Function calling B with A as parameter
# --
    t54_B.call(t54_A)
/t54_call

# Function calling the _call function
# --
    t54_call
/t54_outer



# Interactive result
# --
<<<<<< EOF
calling Test54 interactively, we get the following

ERROR: [<script> Tests01:861.8] Invalid value Dict [] + 1
  called from: ValueBlock.callLambda() Calling lambda
  called from: ValueBlock.callLambda() Calling lambda
  called from: [<script> Tests01:880.1] Calling t54_call
  called from: [<script> Tests01:886.1] Calling t54_outer
  called from: [input] Calling Test54
  called from: <interactive-input>
>>>>>> EOF
//t54_comment


# Test54: verify call stack
# --
    tryCatch(t54_outer) => ex
    
    # Note that interactive stack trace contains data from .msg (the actual error message)
    List(ex.msg) + ex.stack => stack
    
    foundAll=true
    
    # Look for specific parts in stack trace
    List("t54_outer","t54_call","Invalid value Dict")->str
        found=false
        {stack->line
            if (line.contains(str)) found=true
        }
        if (!found) {
            println("Missing: '" + str + "'")
            foundAll=false
        }
    |
    foundAll
/Test54_CFT_call_stack_with_lambdas




#
# Class object types, letting different classes appear as the same type
#

# figure class
# --
    self.isSomething=Lambda{true}
/class t55_figure


# Another figure class
# --
    self.isSomething=Lambda{false}
/class t55_secondfigure as t55_figure


# Type check against t55_figure, which is the actual class name of t55_figure, and
# the added object type of t55_secondfigure. Also, since a Dict can store only one
# name, adding an object type invalidates the actual class name, when doing type
# comparisons.
# --
    {t55_figure as? &t55_figure}                    # actual class
    && {t55_secondfigure as? &t55_figure}           # object type
    && {t55_secondfigure as? &t55_secondfigure}==false     # actual class name irrelevant when object type defined
    && t55_secondfigure.getName=="t55_figure"      # verifying dict name property directly
/Test55_class_object_type_checking



# Base64 encode and decode
# 2023-06-18 RFO
# --
	s="this is a test"
	s.getBytes("UTF-8").base64 => text
	text.base64 => binary
	binary.toString("UTF-8") => s2
	s==s2
/Test56_Base64


# 2023-11-30 Strange bug 
# --
# Oddest bug so far!!!
# unknown symbol "delta" in last line ...
# --
	min=999
	max=0
	currentPrice=999
	
	delta=max-min  
		# If we say either
		#   delta=4
		# or we 
		#   remove the () around the expression below
		# or we say
		#    y=(...) 
		# then the 'delta' variable becomes visible again.
		#

	(currentPrice < min + delta)
/t57


# Test 57 - odd symbol lookup bug, see t57 above
# --
	tryCatch(t57).ok
/Test57_SymbolLookupBug


# Test 58 - version 4.0.14 bugfix: Dict value dotted lookup must not hide Dict functions
# --
	d=Dict d.set("keys", 3) getType(d.keys)=="List"
/Test58_dotted_lookup_value_vs_functions


# Run all TestX
# --
    P(1,true)=>showAll
    
    
    allOk=true
    count=0
    Sys.functions.sort->f
        assert(f.startsWith("Test"))
        count=count+1
        result=eval(f)
        allOk=allOk && result
        if(showAll || result==false) report(f,result)
    | -> line
        println(line)
    |
    println("Ran " + count + " tests!")

    allOk
/RunAll



