# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<<<< EOF
Parsing "Ansible" text format looking like this:

# This is a comment

[Auto.reboot=yes]
*.v 
s*.s   [no]



>>>>>> EOF
/Readme

# Parse text lines. Returns dictionary with 'data' pointing at the
# actual data structure, and then the following lambdas, which are
# used as follows:
#
#    LallHosts.call
#    LallFields.call
#    Lget.call(elementName,fieldName,defaultValue?)
#    Ldump.call
#
# The data dictionary has keys for all elements, and under each
# is a Dict with the settings for that element.
# --
    file = Lib:DirPrivate.file("Hosts.txt") 
    data = Dict
        
    currProp=null
    currPropValue=null

    LFilter = Lambda{
        P(1,List) => list
        P(2) => regex
        list->s assert(regex.match(s)) out(s)
    }
    LApply = Lambda {
        P(1) => data
        P(2) => entities
        P(3) => name
        P(4) => value

        entities->e
            #println(e + "." + name + "=" + value)
            data.get(e,Dict).set(name,value)
    }

    file.read->line
        reject(line.trim.startsWith("#"))
        reject(line.trim=="")
        if (line.trim.startsWith("[")) {
            # property definition with default value
            line.after("[").before("]").split("=")=>x
            x.nth(0)=>currProp 
            x.nth(1)=>currPropValue 
        } else {
            # data line with optional exception
            line.before("[").trim => entity
            if (entity.contains("*")) {
                regex=Glob(entity,false).regex
            
                # keys of data dict are the entities that we filter
                entities=LFilter.call(data.keys,regex)
                if (entities.empty) {
                    println("=== Warning: pattern '" + entity + "' matches nothing")
                }
            } else {
                entities=List(entity)
            }

            # is there an exception?
            redef=line.after("[").before("]").trim
            if(redef != "") {
                LApply.call(data, entities,currProp, redef)
            } else {
                LApply.call(data, entities,currProp, currPropValue)
            }
                                        
        }
    |

    # Create return value with lambdas for analyzing the data
    # --
    Dict
        .set("data",data)
        .set("LallHosts",Lambda{
            self.data.keys.sort
        })
        .set("LallFields", Lambda{
            self.data.keys->key 
                self.data.get(key).keys->field
                    out (field)
            | _.unique.sort
        })
        .set("Lget", Lambda{
            P(1) as String =>host
            P(2) as String =>field
            P(3)=>defaultValue

            result=defaultValue

            if (self.data.has(host)) {
                e=self.data.get(host)
                if (e.has(field)) {
                    x=e.get(field)
                    if (x != null) result=x
                }
            }

            result
        })
        .set("Ldump",Lambda{
            self.data.keys.sort->host
                self.data.get(host).keys->field
                    value=self.data.get(host).get(field)
                    out(List(host,field,value))
        })
        .set("Lhas", Lambda{
            P(1) as String => host
            P(2) as String => field
            P(3)=>value
            ok=false
            if (self.data.has(host)) {
                e=self.data.get(host)
                if (e.has(field)) {
                    if (e.get(field)==value) ok=true
                }
            }
            ok
        })
/Parse


