# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
-------------------------------------------------
Script file running remote commands via SSH.
Require login without password and sudo without
password (for selected user).  

Also has code for distributing ssh key to remote
servers, to enable ssh without password. If you
have not done so, first create an rsa key, by
running the following command in Linux shell

ssh-keygen -t rsa

Then run the sshEnable function, to copy the
ssh key to remote hosts.

Sudo without password
---------------------
Log in as root, then add the following line to 
/etc/sudoers

<username>  ALL=(ALL) NOPASSWD:ALL

-------------------------------------------------
>>> EOF
/Readme


# onLoad
# --
	ResetDetectSudoPassword
	ResetDetectSSHPassword
/onLoad


Input("SSH target on format username@server").get
/ReadSSHTarget

# SSH password is session secret
# --
	Vault:SessionSecretGet("SSH password")
	SetUsingSSHPassword(true)
	Dir.runCapture("which","sshpass").first.contains("/sshpass") => ok
	error(!ok,"Using SSH passwords requires sshpass")
/SetSSHPassword


# Set session property to indicate if using ssh password
# --
	P(1,true) as boolean => usePassword
	Vault:SessionPropertySet("Using SSH password", usePassword)
/SetUsingSSHPassword


# Using ssh password?
# To disable a password, call SetUsingSSHPassword(false), and to enable call SetUsingSSHPassword(true)
# --
	Vault:SessionPropertyGet("Using SSH password", false)
/UsingSSHPassword


# Get SSH password or null of not using password
# --
	if (UsingSSHPassword) {
		Vault:SessionSecretGet("SSH password")
	} else {
		null
	}
/GetSSHPassword


# Sudo password is session secret
# --
	Vault:SessionSecretGet("sudo password")
	SetUsingSudoPassword(true)
/SetSudoPassword


# Set session property to indicate if using sudo password
# --
	P(1,true) as boolean => useSudoPassword
	Vault:SessionPropertySet("Using sudo password", useSudoPassword)
/SetUsingSudoPassword


# Are we using sudo password?
# To disable call SetUsingSudoPassword(false), and to enable, use true
# --
	Vault:SessionPropertyGet("Using sudo password",false)
/UsingSudoPassword


# Get sudo password or null if not using sudo password
# --
	if (UsingSudoPassword) {
		Vault:SessionSecretGet("sudo password")
	} else {
		null
	}
/GetSudoPassword






# Open ssh connection to target
# Called via @rsh shortcut, and automatically adds to knownhosts if missing
# --
P(1,ReadSSHTarget) =>sshTarget
    Dir.run("ssh", "-o", "StrictHostKeyChecking=false", sshTarget)
/remoteShell


# Copy ssh key to remote target host. If password defined, it uses sshpass to automate this process.
# --
	P(1,ReadSSHTarget) =>sshTarget
	cmd=List("ssh-copy-id",sshTarget)
	RunSecureCommand(sshTarget,cmd)
/sshEnable


# Check if server responds on ping
# --
P(1) =>target
    if(target.contains("@"), target.after("@"), target) =>host
    Lib:run(List("ping","-c","1",host),List,true).exitCode => ex

    ex == 0
/HostOk


# Check if ok with SSH
# --
P(1) =>target
    run(target,"ls",true).get("exitCode")==0
/HostOkSSH


# Clear the cached data
# Called onload!
# --
	Db2:Set(Sys.scriptId,"sudopassword",Dict)
/ResetDetectSudoPassword


# Clear the cached data
# Called onload!
# --
	Db2:Set(Sys.scriptId,"sshpassword",Dict)
/ResetDetectSSHPassword


# Decide if sudo password required for remote target, calling SetUsingSudoPassword accordingly, returns true for needs password
# Caching results in Db2
# --
	P(1,ReadSSHTarget) =>sshTarget
	
	Db2:Get(Sys.scriptId,"sudopassword",Dict) => dict
	if (dict.has(sshTarget)) {
		needsPassword = dict.get(sshTarget)
		SetUsingSudoPassword(needsPassword)
		needsPassword
	} else {
		script=Sequence(
			@ sudo -n true >/dev/null 2>&1
			@ echo $?
		)
		run(sshTarget,script,true).stdout => lines
		#lines->line println("output",line) |
		needsPassword = (lines.first != "0")
		
		dict.set(sshTarget,needsPassword)
		Db2:Set(Sys.scriptId,"sudopassword",dict)

		SetUsingSudoPassword(needsPassword)
		needsPassword
	}
/DetectUsingSudoPassword



# Check if ssh requires password or not, calling SetUsingSSHPassword accordingly, returns true for needs password
# Caching results in Db2
# --
	P(1,ReadSSHTarget) => target
	
	Db2:Get(Sys.scriptId,"sshpassword",Dict) => dict
	if (dict.has(target)) {
		needsPassword = dict.get(target)
		SetUsingSSHPassword(needsPassword)
		needsPassword
	} else {
		command=List("sshpass","-px","ssh",target,"exit")
		needsPassword = (Lib:run(command,List,true,false).exitCode != 0)
		
		dict.set(target,needsPassword)
		Db2:Set(Sys.scriptId,"sshpassword",dict)
		
		SetUsingSSHPassword(needsPassword)
		needsPassword
	}
/DetectUsingSSHPassword	





# Run ssh, ssh-copy-id, scp and perhaps other remote ssh based commands, prefixing with
# sshpass if using password
# --
	P(1) as String => target
	P(2) as List => localCommand  # List("ssh","user@host")
	P(3,List) as List => stdin    # for ssh only
	P(4,false) => acceptErrors
	P(5,false) => showDebug
	
	error(!target.contains("@"), "Invalid target: " + target)
	
	# Decide if SSH password required
	DetectUsingSSHPassword(target)
	passwordRequired = UsingSSHPassword
	
	if (showDebug) {
		println("** UsingSSHPassword=" + passwordRequired)
	}

	passwordFile=null
	isPipe=false
	
	if (passwordRequired) {
		sshPassword=GetSSHPassword
		passwordFile=Lib:TmpFile
		if (Sys.isWindows) {
			passwordFile.create(sshPassword)
		} else {
			# On linux we use a named pipe to avoid storing the password on disk
			Dir.run("mkfifo",passwordFile.path)
			isPipe=true
			
			# async process writing password to pipe (blocks until read)
			SpawnProcess(SymDict(passwordFile,sshPassword), {
				passwordFile.append(sshPassword)
			})
		}
		localCommand=List("sshpass", "-f"+passwordFile.path) + localCommand
	}

	
	result = Lib:run (localCommand, stdin, acceptErrors, false)


	if (passwordFile != null) {
		if (isPipe) {
			Dir.run("rm",passwordFile.path) # File.delete does not work for pipe
		} else {
			passwordFile.delete
		}
	}
	
	# return dictionary
	result
//RunSecureCommand



# Run single or multiple commands (string or list) on remote target via SSH, returns Dict object
# --
	P(1,ReadSSHTarget) => target 
	P(2,Input("Remote command").get) => commands
	P(3,false) => acceptErrors
	P(4,false) => showDebug
    
	error(target==null || !target.contains("@"), "Invalid target: '" + target + "'")
	error(commands==null, "Invalid commands: can not be null")

	# ensure commands is a list
	if(getType(commands) != "List") {
		commands = List(commands)
	}
	
	
	# Add echo command with string to check for later, to strip away login messages etc when presenting output
	"--- Output-mark: " + Date + " - " + Sys.scriptName + ".run ---" => mark
	List('echo "' + mark + '"') + commands => cmd

	sshCommand = List("ssh","-o","StrictHostKeyChecking=false",target)

	result = RunSecureCommand(target, sshCommand, cmd, acceptErrors, showDebug)

	
	# Modify stdout, by only including lines following the mark

	found = false
	result.get("stdout")->line
		condOut(found, line)
		if (line.contains(mark)) {
			found=true
		}
	| _ =>outLines
	
	result.set("stdout",outLines) # overwrite

	if (showDebug) Inner {
		stdin=result.get("stdin")
		
		if (UsingSSHPassword) {
			sshPassword=GetSSHPassword
			stdin = Inner{stdin->line out(line.replace(sshPassword,"<PASSWORD>"))}
		}
		if (UsingSudoPassword) {
			sudoPassword=GetSudoPassword
			stdin = Inner{stdin->line out(line.replace(sudoPassword,"<PASSWORD>"))}
		}
		println("- cmd:")
		result.get("cmd")->line println("    " + line) |

		println("- exitCode = " + result.get("exitCode"))

		println("- stdin:")
		stdin->line println("   # " + line) |

		println("- stdout:")
		result.get("stdout")->line println("   # " + line) |

		println("- stderr:")
		result.get("stderr")->line println("   # " + line) |
		println
	    }

	# return value
	result
/run


# Run single or multiple commands (string or list) as root on remote target via SSH, returns Dict object
# --
	P(1) => target 
	P(2) => commands
	P(3,false) => acceptErrors
	P(4,false) => showDebug

	# ensure commands is a list
	if(getType(commands)!="List") {
		List(commands) =>commands
	}

	# Decide if sudo password reuqured
	DetectUsingSudoPassword(target)
	passwordRequired = UsingSudoPassword

	if (showDebug) {
		println("** UsingSudoPassword=" + passwordRequired)
	}
	
	Sequence(
		@ /bin/bash <<EOF
		@ export HISTIGNORE="*"
		@ export HISTFILESIZE=0
		@ chmod 600 ~/.bash_history
		@ cat /dev/null > ~/.bash_history
		if (passwordRequired) {
			@ echo "<<GetSudoPassword>>" | sudo -S true >/dev/null 2>&1
		} else {
			@ # No sudo password
		}
		@ sudo bash
		@ <<commands>>
		@ sudo -k
		@ exit
		@ sudo -k
		@ EOF
	).mergeExpr => commands
	
	# Call run function to handle the ssh wrapper
	run(target,commands,acceptErrors,showDebug)
/sudo



# Copy local file via scp (secure copy over SSH) to remote target, returns Dict object
# --
    P(1) => localFile
    P(2) => target
    P(3) => remoteName
    P(4, false) => acceptErrors
    P(5, false) => showDebug

    if (getType(localFile)=="File") {
        localFile=localFile.path
    }
    
    cmd=List("scp", localFile, target+":"+remoteName)
    RunSecureCommand(target,cmd,null,acceptErrors,showDebug)
/copy


# Get remote file via scp
# --
    P(1) => localFile
    P(2) => target
    P(3) => remoteName
    P(4, false) => acceptErrors
    P(5, false) => showDebug
    
    if (getType(localFile)=="File") {
        localFile=localFile.path
    }
    cmd=List("scp", target+":"+remoteName, localFile)
    RunSecureCommand(target,cmd,null,acceptErrors,showDebug)
    
/getFile


# Shell
# --
    # Purge non-pingable hosts
    Inner {
        Db2:Get("SSH","Hosts",List).unique->t
            assert(SSH:HostOk(t))
            out(t)
        | => targets
        Db2:Set("SSH","Hosts",targets)
    }

    Lib:Header("Known targets")
                
    targets->t println("-> " + t) 
    |
    println
    Input("Enter target: user@host").get => target

    startLine="-------- SSH.start-line ----"
    endLine="------ SSH.end-line ----"

    currDir=Db2:Get("SSH","targetPwd",Dict).get(target,".")
    
    lastLine=""

    loop
        s="["+target+"] CFT [" + currDir + "]"
        readLine(s + " ? for help, .q to quit") => cmd
        if (cmd==".") {
            cmd=lastLine
            println(cmd)
        } else {
            lastLine=cmd
        }

        break(cmd==".q")
        if (cmd=="?") {
            {
                Sequence(
                @ .t to select other target
                @ .  to repeat last command
                @ .q to quit
                )->line println(line)
            }
            continue
        }  
        if (cmd==".t"){
            Lib:Header("Known targets")
            Db2:Get("SSH","Hosts",List).unique => targets
            { targets->t println("-> " + t) }
            println
            readLine("Enter target: user@host") =>target
            Db2:Set("SSH","Hosts",Db2:Get("SSH","Hosts",List).add(target).unique)
            currDir=Db2:Get("SSH","targetPwd",Dict).get(target,".")
            continue
        }
        cmdList=List(
            "cd " + currDir,
            "echo '"+startLine+"'",
            cmd,
            "__result=$?",
            "echo '"+endLine+"'",
            'echo "pwd=`pwd`"',
            'echo "result=$__result"'
        )
        SSH:run(target,cmdList,true)=>data

        showStderr=false

        Inner {
            show=false
            getData=false

            # process stdout
            data.stdout->line 
                if (line.contains(startLine)) {
                    show=true
                    continue
                } else if (line.contains(endLine)) {
                    show=false
                    getData=true
                }
                if (show) println(line)
                if (getData) {
                    if (line.startsWith("pwd=")) {
                        xx=line.after("=")
                        if (xx != currDir) {
                            currDir=xx
                            Db2:Set("SSH","targetPwd",Db2:Get("SSH","targetPwd",Dict).set(target,currDir))
                        }
                    } else if (line.startsWith("result=")) {
                        resultcode=line.after("=")
                        if (resultcode != "0") {
                            println("*** Failed with code " + resultcode)
                            showStderr=true
                        }
                    }
                }
        }
        if (showStderr) Inner {
            data.stderr->line println("ERR " + line)
        }
/sh

    

