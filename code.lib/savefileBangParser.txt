# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
-----------------------------------
v2.4.0 introduced configurable bang commands. 

v3.7.3 moved the processing into rf.configtool.root.shell in Java, allowing for same expressions as with
the other shell-like commands. 
-----------------------------------
>>> EOF
/Readme

# Make argument value safe with regards to space, backslashes and apos
# --
    P(1) as String => arg

    if (Sys.isWindows) {
        if (arg.contains(" ") || arg.contains("$") || arg.contains("'")) {
            # double quotes not allowed in windows directory names!!
            # escaping single quote ' with ''
            "'" + arg.replace("'","''") + "'"
        } else {
            # leave as-is and hope for the best
            arg
        }
    } else {
        # Linux does not question values in command vector, also does not try to do globbing
        # when called through Dir.run (that's an interactive Linux shell feature, and handled
        # in Java for CFT when running on Linux)
        arg
    }
//FixSpace


# Enable/disable using runCaptureShow and the @! shortcut
# --
	P(1,true)=>enable
	Db2:Set(Sys.scriptId,"enable",enable)
//EnableRunCapt

# Is enabled?
# --
	Db2:Get(Sys.scriptId,"enable",false)
//RunCaptEnabled

# Run command
# --
    P(1,Dir)=>currentDir
    P(2)=>cmdList

    cmdList=Inner{ cmdList->element out(FixSpace(element)) }

    #println("--> " + cmdList.concat(" "))
    
    if (Sys.isWindows) cmdList=List("powershell") + cmdList

	if (RunCaptEnabled) {
		currentDir.runCaptureShow(cmdList) => list
		Db2:Set(Sys.scriptId,"runOutput", list)
		true
	} else {
		currentDir.run(cmdList)
	}
/Run


# Get last command output as List
# --
	Db2:Get(Sys.scriptId,"runOutput", List)
/OutputData

