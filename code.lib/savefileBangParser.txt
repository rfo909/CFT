# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
# --
<<< EOF
New version of the BangParser, introduced in version 4.3.0. The previous
impementation had morphed into running external commands only, as the
original "bang commands" (starting with "!") were removed some time ago.

Isolated running external programs into script RunExt.

The new BangParser is meant for history lookup, as in Linux shells.

>>> EOF
/Readme



# Help text
# --
<<<< EOF

Command history
---------------

  !            show full history
  !?           help (this text)
  !!           repeat last command

  !N           execute command by position in history
  !xxx         repeat last command starting with xxx
  !xxx*yyy     repeat last command starting with xxx and containing yyy

  !:N          as above, but changes to original directory
  !:xxx 
  !:xxx*yyy

  !/           show recent directories within session
  !//          show directories last week, global
>>>> EOF
	->line println(line)
/Help



# Process command line starting with "!" - bangCommand in CFT.props
# --
	P(1)=>dir
	P(2)=>commandLine
	
	if (commandLine=="!?") {
		Help
	} else if (commandLine=="!") {
		GetCommandHistory(dir)
	} else if (commandLine.startsWith("!//")) {
		Sys.stdin("BangParser:GlobalDirList(null," + Sys.syn(commandLine) + ")")
	} else if (commandLine.startsWith("!/")) {
		
		Sys.stdin("BangParser:GetDirHistory(" + Sys.syn(commandLine) + ")")
	} else {
		RunHistoryCommand(dir,commandLine)
	}
/Process
 


# Get command history (session)
# --
	P(1) as Dict? => appendData

	Db2:Get(Sys.scriptId,"CH",Dict) => data
	sid=Sys.sessionUUID

	sdata=null
	if (data.has(sid)) {
		sdata=data.get(sid)
	} else {
		sdata=Dict
		data.set(sid,sdata)
	}

	# update last access time
	sdata.lastAccess=Sys.currentTimeMillis

	# append history data?
	if (appendData != null) {
		sdata.get("history",List).add(appendData)
	} else {
		sdata.get("history",List) # create history if not defined
	}

	# clean out old data
	limit=Sys.currentTimeMillis-86400*1000
	Inner{
		data.keys->sid
			if (data.get(sid).lastAccess<limit) data.remove(sid)
	}

	# save updates
	Db2:Set(Sys.scriptId,"CH",data)

	# return value
	sdata
//DbGetCommandHistory
 



# Append to history - defined in CFT.props 'historyAppendCommand' called from Java 
# --
    P(1) as Dir => dir
    P(2) as String => command

	if (command.trim != "" && !command.startsWith('"BangParser"')) {
		# saving string paths, not Dir objects, because recreating Dir objects for 
		# remote servers may take time
		
		currDir=dir.path
		DbGetCommandHistory(SymDict(currDir,command))

		GlobalDirList(currDir)
	}
/HistoryAppend


# Global dir expiration
# --
	7*24*3600*1000
//GlobalDirExpiration


# Get global list or recent directories visited
# If "!/" is followed by words, these are matched against the directory list, and
# if it matches one, we issue cd to that directory via Sys.stdin
# 2025-05-08 RFO
# --
	P(1) as String? => addDir  # null to just get list
	P(2) as String? => commandLine # !// ... - using additional words to match against dir paths

	words=commandLine.split.keep(1) # omit the !// part

	list = Db2:Get(Sys.scriptId,"GD",List)

	# remove expired data (and duplicates of addDir if defined)
	Inner{
		exp=Sys.currentTimeMillis - GlobalDirExpiration
		list->data
			assert(data.time >= exp && Sys.getType(data.dir)=="String")
			reject(addDir != null && data.dir == addDir)
			#reject(addDir != null && addDir.startsWith(data.dir))
			out(data)
		| => newList
	}
	changed=newList.length != list.length
	if (addDir != null) {
		time=Sys.currentTimeMillis
		dir=addDir
		newList.add(SymDict(time,dir))
		changed=true
	}
	if (newList.length>200) {
		newList=newList.last(200)
		changed=true
	}
	if (changed) {
		Db2:Set(Sys.scriptId,"GD",newList)
		list=newList
	}
	# return list of paths
	list->data 
		path=data.dir
		ok=true
		Inner{words->w reject(path.toLower.contains(w.toLower)) ok=false}
		if (ok) out(path)
	| => list
	if (list.length==1) {
		Sys.stdin("cd " + Sys.syn(list.first))
	} else {
		list
	}

/GlobalDirList


# Global dir list, raw format
# --
	list = Db2:Get(Sys.scriptId,"GD",List)
	list->x
		report(Date(x.time), x.dir)
//GDRaw


# Parse bang expression and execute matching history element
# --
	P(1) as Dir => currentDir
	P(2) as String => command

	gotoDir=false
	prefix=command.sub(1)
	if (prefix.startsWith(":")) {
		gotoDir=true
		prefix=prefix.sub(1)
	}
	pattern=""
	if (prefix.contains("*")) {
		pattern=prefix.after("*")
		prefix=prefix.before("*")
	}

	dict=null

	if (pattern=="" && prefix.?parseInt) {
		# numbered lookup in history
		data=DbGetCommandHistory.history
		dict=data.nth(prefix.parseInt)
	} else if (command=="!!") {
		data=DbGetCommandHistory.history.reverse
		dict=data.first
	} else Inner{
		data=DbGetCommandHistory.history.reverse
		data->d
			if (d.command.trim.startsWith(prefix) && d.command.contains(pattern) ) {
				dict=d
				break
			}
	} 
	if (dict != null) {
		dir=Dir(dict.currDir) # stored as string
		if (gotoDir && dir.path != currentDir.path) Sys.stdin('"BangParser" ' + Sys.syn(dir)+'.cd')
		println(dict.command)
		Sys.stdin(dict.command)
	} else {
		println("No match")
		null
	}
 //RunHistoryCommand
 
 
 

# Get directories history
# If "!/" is followed by words, these are matched against the directory list, and
# if it matches one, we issue cd to that directory via Sys.stdin
# 2025-05-08 RFO
# --
	P(1)=>commandLine  # !/ ... - use words in the ... part to match against directories

	words=commandLine.split.keep(1) # skip the !/ part

	DbGetCommandHistory.get("history",List)->dict
		out(dict.currDir)
    | _.unique.last(30) -> path
		ok=true
		Inner{words->w reject(path.toLower.contains(w.toLower)) ok=false}
		if (ok) out(path)
	| => list

	if (list.length==1) {
		Sys.stdin("cd " + Sys.syn(list.first))
		true
	} else {
		list
	}
//GetDirHistory



# Get command history
# --
    P(1) as Dir => currentDir
    
    data=DbGetCommandHistory.history


    Inner {
        data->dict
            report(dict.command.replace("^t".unEsc,"<TAB> "), dict.currDir)
        | _=>lines
		
		Lib:ShowRows(lines)
    }

	println
	println('Type "!?" for help')
    
//GetCommandHistory
