# Readme
# --
<<< EOF
New version of the BangParser, introduced in version 4.3.0. The previous
impementation had morphed into running external commands only, as the
original "bang commands" (starting with "!") were removed some time ago.

Isolated running external programs into script RunExt.

The new BangParser is meant for history lookup, as in Linux shells.

>>> EOF
/Readme



# Help text
# --
<<<< EOF

Command history
---------------

  !            show full history
  !?           help (this text)
  !!           repeat last command

  !N           execute command by position in history
  !xxx         repeat last command starting with xxx
  !xxx*yyy     repeat last command starting with xxx and containing yyy

  !:N          as above, but changes to original directory
  !:xxx 
  !:xxx*yyy

  !/           show unique list of directories from history
  !/N          go to directory by position in list
   

>>>> EOF
	->line println(line)
/Help



# Process command line starting with "!" - bangCommand in CFT.props
# --
	P(1)=>dir
	P(2)=>commandLine
	
	if (commandLine=="!?") {
		Help
	} else if (commandLine=="!") {
		GetCommandHistory(dir)
	} else if (commandLine.startsWith("!/")) {
		RunDirCommand(commandLine)
	} else {
		RunHistoryCommand(dir,commandLine)
	}
/Process
 


# Get command history (session)
# --
	P(1) as Dict? => appendData

	Db2:Get(Sys.scriptId,"CH",Dict) => data
	sid=Sys.sessionUUID

	sdata=null
	if (data.has(sid)) {
		sdata=data.get(sid)
	} else {
		sdata=Dict
		data.set(sid,sdata)
	}

	# update last access time
	sdata.lastAccess=currentTimeMillis

	# append history data?
	if (appendData != null) {
		sdata.get("history",List).add(appendData)
	} else {
		sdata.get("history",List) # create history if not defined
	}

	# clean out old data
	limit=currentTimeMillis-86400*1000
	Inner{
		data.keys->sid
			if (data.get(sid).lastAccess<limit) data.remove(sid)
	}

	# save updates
	Db2:Set(Sys.scriptId,"CH",data)

	# return value
	sdata
//DbGetCommandHistory
 



# Append to history - defined in CFT.props 'historyAppendCommand' called from Java 
# --
    P(1) as Dir => dir
    P(2) as String => command

	if (command.trim != "" && !command.startsWith('"BangParser"')) {
		# saving string paths, not Dir objects, because recreating Dir objects for 
		# remote servers may take time
		
		currDir=dir.path
		DbGetCommandHistory(SymDict(currDir,command))
	}
/HistoryAppend

 


# Parse bang expression and execute matching history element
# --
	P(1) as Dir => currentDir
	P(2) as String => command

	gotoDir=false
	prefix=command.sub(1)
	if (prefix.startsWith(":")) {
		gotoDir=true
		prefix=prefix.sub(1)
	}
	pattern=""
	if (prefix.contains("*")) {
		pattern=prefix.after("*")
		prefix=prefix.before("*")
	}

	dict=null

	if (pattern=="" && prefix.?parseInt) {
		# numbered lookup in history
		data=DbGetCommandHistory.history
		dict=data.nth(prefix.parseInt)
	} else if (command=="!!") {
		data=DbGetCommandHistory.history.reverse
		dict=data.first
	} else Inner{
		data=DbGetCommandHistory.history.reverse
		data->d
			if (d.command.trim.startsWith(prefix) && d.command.contains(pattern) ) {
				dict=d
				break
			}
	} 
	if (dict != null) {
		dir=Dir(dict.currDir) # stored as string
		if (gotoDir && dir.path != currentDir.path) Sys.stdin('"BangParser" ' + syn(dir)+'.cd')
		println(dict.command)
		Sys.stdin(dict.command)
	} else {
		println("No match")
		null
	}
 //RunHistoryCommand
 
 
 

# Get directories history
# --
   
	DbGetCommandHistory.get("history",List)->dict
        out(dict.currDir)
    | _.unique.last(30)
//GetDirHistory

# Show directory history
# --
	GetDirHistory->d  # strings
		report(d)
	| _=>lines
	Lib:ShowRows(lines)->line println(line)
//ShowDirHistory



# Handle !/ commands
# --
	P(1)=>command
	if (command=="!/") {
		ShowDirHistory
	} else {
		n=command.after("/").parseInt
		dir=GetDirHistory.nth(n)
		Sys.stdin('"BangParser" ' + syn(Dir(dir))+'.cd')
	}
//RunDirCommand



# Get command history
# --
    P(1) as Dir => currentDir
    
    data=DbGetCommandHistory.history


    Inner {
        data->dict
            report(dict.command.replace("^t".unEsc,"<TAB> "), dict.currDir)
        | _=>lines
		
		Lib:ShowRows(lines)->line println(line)
    }

	println
	println('Type "!?" for help')
    
//GetCommandHistory
