# Readme
# --
<<< EOF
New version of the BangParser, introduced in version 4.3.0. The previous
impementation had morphed into running external commands only, as the
original "bang commands" (starting with "!") were removed some time ago.

Isolated running external programs into script RunExt.

The new BangParser is meant for history lookup, as in Linux shells.

>>> EOF
/Readme

# Help text
# --
<<<< EOF
The command history lets you repeat recent commands

	"!" displays the command history
	"!!" repeats last command
	"!xxx" repeats last command starting with xxx

Type "!?" to display help (this text)
>>>> EOF
	->line println(line)
/Help

# Process command line starting with "!" - bangCommand in CFT.props
# --
	P(1)=>dir
	P(2)=>commandLine
	
	if (commandLine=="!?") {
		Help
	} else if (commandLine=="!") {
		GetCommandHistory(dir)
	} else {
		RunHistoryCommand(dir,commandLine)
	}
/Process
 
 
 
# Parse bang expression and execute matching history element
# --
	P(1) as Dir => currentDir
	P(2) as String => command
	
	prefix=command.sub(1)
	data=Db2:Get(Sys.scriptId,"CommandHistory",List).last(40).reverse

	dict=null
	
	if (command=="!!") {
		dict=data.first  # last command (reversed)
	} else Inner{
		data->d
			if (d.command.trim.startsWith(prefix)) {
				dict=d
				break
			}
	} 
	if (dict != null) {
		dir=Dir(dict.currDir) # stored as string
		if (dir.path != currentDir.path) Sys.stdin(syn(dir)+'.cd')
		Sys.stdin(dict.command)
	} else {
		println("No match")
		null
	}
 /RunHistoryCommand
 
 
 
 
# Append to history - defined in CFT.props 'historyAppendCommand' called from Java 
# --
    P(1) as Dir => dir
    P(2) as String => command

    currDir=dir.path

    if (command.trim != "" && command.trim != "." && command!='Db2:Get("Lib","GetCommandHistory:GotoDir").cd') {
            # That last part matches the code generated in GetCommandHistory when repeating a command !!

        data=SymDict(command,currDir)
        list=Db2:Get(Sys.scriptId,"CommandHistory",List)
        list.add(data)
        Db2:Set(Sys.scriptId,"CommandHistory", list.last(60))
    }

//HistoryAppend



# Get directories history
# --
    Lib:Header("Previous directories. Use 'cd :N' to go to dir")
    Db2:Get(Sys.scriptId,"CommandHistory",List)->dict
        out(dict.currDir)
    | _.unique.last(30)
/GetDirHistory


# Get command history and execute from it
# --
    P(1) as Dir => currentDir
    
    data=Db2:Get(Sys.scriptId,"CommandHistory",List).last(40)

    Lib:Header("Command history")
    Inner {
        data->dict
            report(dict.command.replace("^t".unEsc," <TAB> "), dict.currDir)
        | _=>lines
		
	Lib:ShowRows(lines)->line println(line)
    }
    readLine("Enter index, or blank to cancel") => s
    if (s != "") {
    	if (s.startsWith("!")) {
    		RunHistoryCommand(currentDir, s)
    	} else if (s.?parseInt) {
            dict=data.nth(s.parseInt)

            # Note: can not just do this:
            #
            # Dir(dict.currDir).cd 
            #
            # That does not affect the caller, because each script has 
            # their own current dir

            # Solution: using Sys.stdin() 

            Db2:Set("Lib","GetCommandHistory:GotoDir", Dir(dict.currDir))
            Sys.stdin('Db2:Get("Lib","GetCommandHistory:GotoDir").cd')
            Sys.stdin(dict.command)
        } else {
            # Not a number, treat as a command
            Sys.stdin(s)
        }
    }
    
/GetCommandHistory
