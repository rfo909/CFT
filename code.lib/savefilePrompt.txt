# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


		

# Is root on linux?
# --
    if (!Sys.isWindows) {
        Dir.runCapture("whoami").nth.trim=="root"
    } else {
        false
    }
//IsRoot


# IsRootMark
# --
    if(IsRoot,Curses:Reversed + "#root#" + Curses:Reset + " ", "")
/IsRootMark


# Guess host name
# --
    env=Sys.environment
    if (Sys.isWindows) {
        if (env.has("COMPUTERNAME")) env.COMPUTERNAME else null
    } else {
        f=File("/etc/hostname")
        if (f.exists) f.read.first else null
    }
//GuessHostName
        



# Set hostname string (used in prompt)
# --
    P(1,readLine("Hostname"))=>hostName
    Db2:Set(Sys.scriptId,"hostname", hostName)
/SetHostname


# Get hostname
# --
    h=Db2:Get(Sys.scriptId,"hostname",null)
    if (h==null || h=="") h=GuessHostName
    if (h==null) h=""
    h
/GetHostName

# Set text color for current path in prompt
# --
    P(1,Curses:SelectColor) => col
    Db2:Set(Sys.scriptId,"path.color", col)
/SetPathColor


# Get text color for path (in Path function)
# --
    if (Curses:Enabled, Db2:Get(Sys.scriptId,"path.color",Curses:TxtGreen), "")
/GetPathColor


# Set Prompt color
# --
    P(1,Curses:SelectColor)=>col
    Db2:Set(Sys.scriptId,"prompt.color",col)
/SetColor


# Get Prompt color
# --
    if (Curses:Enabled, Db2:Get(Sys.scriptId,"prompt.color",Curses:TxtCyan), "")
/GetColor


# Format current dir for prompt
# --
    P(1,Dir)=>dir
    s=dir.path
    
    if (s.length > Term.w-30) {
        fs=Sys.fileSeparator
        available=Term.w-40
        s=s.last(available)
        if (s.after(fs).length > 0) s=fs+(s.after(fs))
        s="..."+s
    }

    # return value
    GetPathColor + s + Curses:Reset
/Path


# Jobs summary
# --
    running=Jobs:Running

    isBlocked=Inner{
        running->job assert(Sys.Jobs.get(job).isBlockedOnInputSince != null) out(job)
    }.length

    hasOutput=Inner{
        running->job assert(Sys.Jobs.get(job).hasOutput) out(job)
    }.length

    completed=Jobs:Completed.length

    s=null

    if (isBlocked > 0)           s="JBLK=" + isBlocked
    else if (hasOutput > 0)      s="JOUT=" + hasOutput
    else if (completed > 0)      s="JCOMP=" + completed
    else if (running.length > 0) s="JRUN="+running.length

    s
/JobsStatus
    

# Show status + background jobs  - only when Curses enabled
# --

	if (Term.w > 120) Inner {

		line=1
		
		(Jobs:Completed + Jobs:Running).unique->name
			job=Sys.Jobs.get(name)
			status="   "
			if(job.isBlockedOnInputSince != null) {
				status="BLK"
			} else if(job.hasOutput) {
				status="OUT"
			} else if(job.isDone) {
				status=" OK"
			}
			s="[" + name + " ".times(20) 
			s=s.first(20)+" " + status + "]"  # 25 chars
			
			print(Curses:CurGoto(Term.w-26, line)+GetColor+s)
			line=line+1
	}
/ShowStatus
		
		
	
# Complete prompt
# --
    P(1,Dir) => currDir
    P(2) => scriptName
    P(3) => stateString

    color=GetColor

    hostname=GetHostName
    parts=List

    if (hostname != null && hostname != "") parts.add("[" + hostname + "]")
    parts.add(Curses:Reset + Path(currDir)+Curses:Reset+color)
    js=JobsStatus
    if (js != null) parts.add(js)

    if (scriptName != null) parts.add("{" + scriptName + if (stateString != null, ": "+stateString,"") + "}")
    if(IsRoot) {
        parts.add(Curses:Reversed + "#root#" + Curses:Reset + color)
    }
    
    
    # Show various status
    if(Curses:Enabled) ShowStatus

    # Add newline before prompt if colors are off
    # --
    newline=""
    if (!Curses:Enabled) {
        newline=(if(Sys.isWindows) "^r^n" else "^n").unEsc
    }
    # Position of prompt at bottom
    gotoLine=Curses:CurGoto(0,Term.h-1)
    newline + gotoLine + color + parts.concat(" ") + Curses:Reset
/PromptString
