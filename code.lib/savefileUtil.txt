# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Show content of dictionary
# Note: can also use JSON:PP
# --
	P(1) as Dict => dict
	P(2, false)  => show

    # Inner lambda to convert value to synthesized form, 
    # if synthesizable, for more relevant information
    LPresent=Lambda{
        P(1)=>val
        # Inner lambda to check if synthesizable via predicate call
        LSyn=Lambda{Sys.syn(P(1))}
        
        if (LSyn.?call(val)) {
            # value is synthesizable
            Sys.syn(val)
        } else {
            val
        }
    }

	result = Inner {
		dict.keys->key
			val=LPresent.call(dict.get(key))
			report(key,val)
	}

	if (show) Inner{
		Lib:ShowRows(result)
	}

	result
        
/ShowDict




# Run command list or string (must split correctly) and report it to screen
# Works both on
# --
    P(1,Input("Command").get) => cmd
    P(2,Dir) as Dir => dir

    Lib:Header("Run command")

    if (Sys.getType(cmd)!="List") {
        cmd=cmd.split
    }

    # Strip "cmd /c" or "powershell -c", in order to 
    # print a clean command to stdout. When executing, if
    # on windows, we always prefix with "cmd /c" or "powershell -c",
    # depending on what we detect below.
    ps=false
    loop
        if (cmd.length > 2) {
            del=false
            if (cmd.first.toLower=="cmd" && cmd.nth(1).toLower=="/c") del=true
            if (cmd.first.toLower=="powershell" && cmd.nth(1).toLower=="-c") {ps=true del=true}

            if (del) {
                cmd=cmd.keep(2)
            } else {
                break
            }
        } else {
            break
        }
    |

    if (cmd.concat(" ").length < 80) {
        println(cmd.concat(" "))
    } else {
        lastLine=cmd.last
        isFirst=true
        cmd->line
            println(if(isFirst,"","        ") + line + if(line != lastLine, " \", ""))
            isFirst=false
    }

    println
    if (Sys.isWindows) {
        if (ps) {
            dir.run(List("powershell","-c")+cmd)
        } else {
            dir.run(List("cmd","/c")+cmd)
        }
    } else {
        # Sane operating systems
        dir.run(cmd)
    }
/Run


# Read properties file, with lines a=b, c=d etc, and return Dict with values
# --
    P(1) as File => file
    
    settings = Dict
    file.read->line
        reject(line.trim.startsWith("#"))
        reject(line.trim=="")
        settings.setStr(line)
    |
    settings
/ReadPropertiesFile


# Create / access counter
# --
    P(1) as String => name
    P(2,999999999999) as int => maxValue
    
    id="counter:"+(name.replace(" ","_"))
    
    TRANS="Util.Counter.Transaction"
        # Individual Db2 collection accesses are protected by collection locks, but
        # below we have a transaction, where we read a value, update it
        # and write it back.
            
    Std.Db.obtainLock(TRANS,10000)
    
    i = Db2:Get("Util", id, 0)
    next=(i+1) % maxValue
    Db2:Set("Util",id,next)
    
    Std.Db.releaseLock(TRANS)
    i
/Counter
    



# Set time mark - used with HasTimedOut below
# --
    P(1) => name
    id="timemark:"+(name.replace(" ","_"))
    Db2:Set("Util", id, Date)
/SetTimeMark



# Check time mark 
# --
    P(1) => name
    P(2,3600) => seconds

    Date.sub(Date.Duration.seconds(seconds)) => limit

    id="timemark:"+((""+name).replace(" ","_"))
    val = Db2:Get("Util", id)

    val==null || val.before(limit)
/HasTimedOut
    


# Get time mark
# --
    P(1) => name

    id="timemark:"+((""+name).replace(" ","_"))
    val = Db2:Get("Util",id)
    if (val==null) val=Date
    val
/GetTimeMark




# Return list of lines from (config) file, after removing comments and empty lines.
#
# Either give File object as parameter, or produce a File object as Sys.lastResult
# for example via ls *.yml followed by :N to select one, or run Util:SelectFile
# function (via shortcut @fsel)
# --
    P(1) => file
    P(2,"#") => commentStart

    if (file==null) {
        file=Sys.lastResult
        error(Sys.getType(file) != "File", "No file")
    }
    error(Sys.getType(file) != "File", "Expected File, got " + Sys.getType(file))
    Lib:Header(file.name)
    file.read->line
        s=line.trim
        reject(s.startsWith(commentStart) || s=="")
        out(line)
/UncommentFile



# Select file from directory (by number) or by entering partial name until finding one file
# Alternatively, just use Lib:MenuSelect
#
#   files=Dir.files
#   Lib:MenuSelect(files, Lambda{P(1).name}, "Select file")
# --
    P(1) => dir
    P(2,"*") => globPattern
    P(3,Lambda{P(1)}) => processList 

    filterString=null
    loop
        i=0
        files = dir.files(Glob(globPattern))
        files=processList.call(files)
        
        # Apply filterString if it exists
        if (filterString != null) {
            Inner {
                files->f if (f.name.contains(filterString)) out(f)
            } => files
        }
        
        if (files.length==0) {
            break(true)
        }
        if (files.length==1) {
            result=files.first
            break(true)
        }
        
        # Show files
        Inner {files->f 
            println(""+i + ": " + f.name)
            i=i+1
        }
        result=null
        readLine("Enter index / part of name / blank for none") => input
        if (input=="") break(true)
        if (input.?parseInt) {
            result=files.nth(input.parseInt)
            break(true)
        } else {
            filterString=input
        }
    |
    if (result != null) {
        println
        println("* Selected file " + result.name)
    }
    result
/SelectFile





# Select date/time relative to now
# --
    P(1,"Select date and time") => label
    
    Lib:Header(label)
    Input("Enter string on format +/- N [smhd] to indicate seconds/minutes/hours/days").get=>val

    plusMinus="+"
    if (val.startsWith("+")) {
        val=val.sub(1)
    } else if (val.startsWith("-")) {
        plusMinus="-"
        val=val.sub(1)
    }

    code=val.chars.last.toLower
    val=val.sub(0,val.length-1).trim

    value=val.parseFloat
    millis=0

    if (code=="s") {
        millis=value*1000
    } else if (code=="m") {
        millis=value*1000*60
    } else if (code=="h") {
        millis=value*1000*60*60
    } else if (code=="d") {
        millis=value*1000*60*60*24
    } else {
        error("Invalid format")
    }

    if (plusMinus=="+") {
        Date(Sys.currentTimeMillis+millis.i)
    } else {
        Date(Sys.currentTimeMillis-millis.i)
    }
/SelectRelativeDateTime




# Search through recently updated files under current directory
# --
    P(1,Dir) => currDir
    P(2,Input("Glob pattern").setCurrCond("*.java").get) => glob
    P(3,Util:SelectRelativeDateTime) => limit
    P(4,Input("Search for string").get) => pattern

    currDir.allFiles(glob)->f
        assert(f.lastModified>limit.get)
        hits=Grep(pattern).file(f)
        reject(hits.empty)

        Lib:Header(f.path)
        hits->line 
            println(line.lineNumber,line)
/SearchRecentFiles




# Do search/replace on single text file, return true if match, overwrite only if overwrite parameter true.
# --
    P(1) as File => file
    P(2) as String => from
    P(3) as String => to
    P(4, "UTF-8") as String => encoding
    P(5, false) as boolean => overwrite


    modified=false

    file.read(false)->line
        s=line.replace(from,to)
        if (s != line) {
            modified=true
        }
        out(s)
    | => lines

    if (modified && overwrite) {
        Lib:PreserveFileLineSeparator(file).encoding(encoding).create(lines)
    }

    # return value
    modified
/SearchReplace


# Convert hex string to ISO_8859_1 character string
# --
	P(1) => xstr
	loop
		break(xstr=="")

		s="\u" + xstr.first(2)
		xstr=xstr.sub(2)
		out(Sys.uchar(s))
	| _.concat
/HexToChars


# Convert ISO_8859_1 string to hex string
# --
	P(1) => str
	str.getBytes("ISO_8859_1").hex
/CharsToHex		





# Show settings 
# --
    P(1) as Dict => settings
    P(2,"Configure settings") => title

    AppUI:DoShowTopLine(title)
    AppUI:DoSpace

    obj=AppUI:DoSummaryObj
    settings.keys->key
        path=settings.get(key,null)
        if (path==null) path="-"
        obj.Lrow(key,"", path)
    |
    obj.Lshow
/ShowSettings



# Verify and/or change settings
# --
    P(1) as Dict => settings
    P(2,"Configure settings") => title
    

    Lib:GetTerminalSize

    doEdit=false
    loop
        if (doEdit) {
            Inner {
                settings.keys->key
                    ShowSettings(settings,title)
                    AppUI:DoSpace
                    AppUI:DoShowHeader("Verify or change value for")
                    AppUI:DoSpace
                    AppUI:DoInput(key,settings.get(key,null)) => newVal
                    settings.set(key,newVal)
            }
        } 

        ShowSettings(settings,title)
        AppUI:DoSpace
        
        okay=false
        doEdit=false
        
        AppUI:DoInput("Is this okay? (y/n)") => s
        if (s != null) s=s.toLower
        if (s=="y") {okay=true}
        if (s=="n") {doEdit=true}
                
        break(okay)
    |
    AppUI:DoCls
    
/VerifySettings






# Process monitor : object to limit number of simultaneously active processes
#
# NOTE: stores both active and completed processes in internal list, so do
# not use for huge sets of processes, as you will run out of memory!!
#
# Example of use
#
#   # --- create monitor object, decide limit of active running processes
#   mon = Util:ProcessMonitor
#   limit = 4 
# 
#   # --- when about to start a process
#   mon.Lwait(limit)
#   proc = SpawnProcess(...)
#   mon.Ladd(proc,"desc")
#
#   ...
#   # when done
#   mon.Lwait(0)
# --
Lib:GetTerminalSize
Dict.set("list",List)
    .set("title","ProcessMonitor")
    .set("LsetTitle", Lambda{
        self.set("title",""+P(1))
    })
    .set("Lrunning",Lambda{
        self.list->data assert(!data.proc.isDone) out(data)
    })
    .set("Ldone",Lambda{
        self.list->data assert(data.proc.isDone) out(data)
    })
    .set("Lwait",Lambda{
        P(1,1)=>limit
        P(2,false)=>verbose
        if (limit<1) limit=1  ## less-than in test below
        loop
            self.Lrunning => running
            if(verbose) {
                self.Ldone => completed

                AppUI:DoShowTopLine(self.title)
                AppUI:DoShowProgressBar(completed.length, completed.length+running.length,50)
                AppUI:DoShowHeader("Completed")
                AppUI:DoShowText("#"+self.Ldone.length)
                AppUI:DoShowList(self.Ldone.filter(Lambda{P(1).name}))
                AppUI:DoSpace
                AppUI:DoShowHeader("Running")
                AppUI:DoShowText("#"+running.length)
                AppUI:DoShowList(running.filter(Lambda{P(1).name}))
                AppUI:DoSpace

                #println("Completed: " 
                # + (self.list.length-running.length) 
                # + " Running: " + running.length + " " + descRunning)
            }
            break (running.length < limit)
            Sys.sleep(500)
    })
    .set("Ladd",Lambda{
        P(1)=>proc
        P(2,"proc-"+(self.list.length+1)) => name

        self.list.add(SymDict(proc,name))
    })
    
/ProcessMonitor



# Automatic high performance process monitor for large number of threads.
#
# Usage:
#    apm=Util:AutomaticProcessMonitor
#    loop
#       apm.LWait
#       apm.LAdd(SpawnProcess(...))
#    |
#    apm.LWaitAll
#
# --
    P(1,Sys.cpuCores+2) => numThreads
    Dict
        .set("numThreads",numThreads)
        .set("list",List)
        .set("LWait",Lambda{
            loop
                newList = self.list.filter(
                    Lambda{
                        P(1)=>proc 
                        if(proc.isAlive,proc,null)
                    }
                )
                self.set("list",newList)
                break(newList.length < self.numThreads)
                Sys.sleep(5)
        })
        .set("LAdd",Lambda{
            self.list.add(P(1))
        })
        .set("LWaitAll",Lambda{
            self.list->p p.wait | self.set("list",List)
        })
/AutomaticProcessMonitor



# Invoke curl with detailed parameters
# --
    P(1,"http")=>protocol
    P(2)=>HostPort
    P(3,"GET") => method
    P(4,error("path required"))=>path
    P(5) => jsonData
    P(6,false)=>verbose
    
    
    cmd=List("curl","-X",method)
    if (jsonData != null) {
        cmd.add("--header")
        cmd.add("Content-Type: application/json")
    }

    if (!protocol.endsWith(":")) protocol=protocol+":"
    if (!protocol.endsWith("//")) protocol=protocol+"//"
    
    url=protocol + HostPort + path
    cmd.add(url)
    if (jsonData != null) {
        cmd.add("-d")
        str=if (Sys.getType(jsonData)=="String", jsonData, JSON:Export(jsonData))
        if (Sys.isWindows) str=str.replace('"','\"')
        cmd.add(str)
    }
    
    if (verbose) {
        println
        Inner {
            cmd->x println("% " + x)
        }
        println
    }
    result = Lib:run(cmd)
    if (verbose) {
        println("exitCode = " + result.exitCode)
        Inner{result.stdout->line println("(out) " + line)}
        Inner{result.stderr->line println("(err) " + line)}
    }
    result
/CURL



# Interactive CURL 
# --
    P(1,false) => verbose
    P(2,Input("Enter protocol and host + port, ex. http://somehost:1234").get) => hostPort
    P(3,Input("Enter URL, prefixed by method if not GET").get) => str
    P(4) => jsonData
        
    if (jsonData == null) {
        println("Paste JSON data terminated by '.' on separate line")
        println("Or type just '.' if no json data")
        readLines(".") => jsonData
        # Filter out blank lines (if any)
        jsonData=Inner{jsonData->line reject(line.trim=="") out(line)}
    }

    if(jsonData.length==0) {
        jsonData=null
    } else {
        tryCatch(JSON:Parse(jsonData)) =>result
        if (!result.ok) {
            error("Invalid JSON: " + result.msg)
        }
    }
    
    if (hostPort.endsWith("/")) hostPort=hostPort.beforeLast("/")

    "GET PUT POST DELETE HEAD".split => methods
    method=null
    Inner {
        methods->m if (str.toUpper.startsWith(m+" ")) { method=m }
    }
    if (method != null) str=str.sub(method.length+1).trim
    if (method == null) method="GET"

    if (!str.startsWith("/")) str="/"+str

    cmd=List("curl","-X",method)
    if (jsonData != null) {
        cmd.add("--header")
        cmd.add("Content-Type: application/json")
    }
    cmd.add(hostPort + str)
    Lib:Header(cmd.concat(" "))
    if (jsonData != null) {
        JSON:PP(JSON:Parse(jsonData),true)
    }

    if (jsonData != null) {
        cmd.add("-d")
        str=if (Sys.getType(jsonData)=="String", jsonData, JSON:Export(jsonData))
        if (Sys.isWindows) str=str.replace('"','\"')
        cmd.add(str)
    }

    result = Lib:run(cmd)
    if (verbose) {
        println("exitCode = " + result.exitCode)
        {result.stdout->line println("(out) " + line)}
        {result.stderr->line println("(err) " + line)}
    }

    # If stdout is JSON, pretty-print it
    tryCatch(JSON:PP(JSON:Parse(result.stdout),true)) => parseResult
    if (!parseResult.ok) {
        # Just list stdout to screen
        result.stdout->line println(line)
    }

    # Return the result dict, where we can grab .stdout and .exitCode etc
    result
/iCURL



# Search for complex pattern (dates etc), in text line, returns list of hits
# or empty list of no hits. Supply Lambda LPostProcess to convert matched string
# value, as needed.
# --
        P(1,"test 2020-122021-02-12234blabla") => line
        P(2,"dddd-dd-dd") => pattern
        P(3,Dict.set("d","0123456789").set("-","-")) => mappings
        P(4,Lambda{P(1)}) => LPostProcess

        Std.Text.Lexer.Node => root

        # Must add "non-token" code on first character, since if backtracking from
        # an invalid match, we must consume one character before trying again

        root.addTokenComplex(pattern.chars.first,mappings).setIsToken(-1) => firstChar
        firstChar.addTokenComplex(pattern.sub(1),mappings).setIsToken(1)

        # This handles consuming all other single characters
        # --
        root.setDefault.setIsToken(-1)

        tryCatch({
                Std.Text.Lexer => lexer
                lexer.addLine(line)
                lexer.getTokens(root)->token
                        out(LPostProcess.call(token.str))
        }) => x
        if (x.ok, x.result, List)
/ComplexPatternLineSearch


# Quick and dirty formatter of text with (), [] and {}
#
# TODO: use parser to identify strings correctly, to avoid 
# formatting blocks inside those.
# --
    P(1)=>text
    if (text==null) {
        println("Paste text, terminate with '.' on single line")
        text=readLines(".")
    }
    line=""
    indent=""
    text->textline
        textline.chars->c
            if ("{[(".contains(c)) {
                line=line+c
                out(line)
                indent=indent+" "
                line=indent
            } else if (")]}".contains(c)) {
                out(line)
                if (indent.length>0) {
                    indent=indent.sub(0,indent.length-1)
                }
                line=indent+c
                out(line)
                line=indent
            } else if (c==",") {
                line=line+c
                out(line)
                line=indent
            } else {
                line=line+c
            }
    | => result
    result.add(line)
    # remove blank lines
    result->line assert(line.trim != "") out(line) | => result

    result
/BlockFormatter



# Quick and ditry formatting for Powershell code. Respects "here" text.
# Should really also parse tokens.
# --
	P(1) as List => lines
	P(2,false) as boolean => skipInlineText

	indent=0
	inlineText=false
	lines->line
		s=line.trim
		if (line.startsWith("#")) {
			out(TAB.times(indent)+s)
			continue
		}

		if (s.endsWith('@"') || s.endsWith("@'")) {
			inlineText=true
			out(TAB.times(indent)+s)
			continue
		} else if (s.startsWith("'@") || s.startsWith('"@')) {
			inlineText=false
			out(line)
			continue
		}

		if (inlineText) {
			if (!skipInlineText) out(line)
			continue
		}

		gen=false
		if (s.endsWith("{")) {
			out(TAB.times(indent)+s)
			gen=true
			indent=indent + 1
		}
		
		if (s.startsWith("}")) {
			indent=indent-1
			if (indent < 0) indent=0
			condOut(!gen,TAB.times(indent)+s)
			gen=true
		} else if (s.endsWith("}")) {
			indent=indent-1
			if (indent<0) indent=0
			condOut(!gen,TAB.times(indent)+s)
			gen=true
			continue
		} else {
			condOut(!gen,TAB.times(indent)+s)
		}
/FormatPowershell
		
	


# Escape special character in XML / HTML string
# --
    P(1,readLine("XML string")) as String =>s
    Dict.set("<","&lt;")
        .set(">","&gt;")
        .set("'","&apos;")
        .set('"',"&quot;")
        =>data  
    s.replace("&","&amp;").merge(data)
/EscapeXMLString


# Unescape special characters in XML/HTML string
# --
    P(1,readLine("XML string")) as String =>s
    Dict.set("&lt;","<")
        .set("&gt;",">")
        .set("&amp;","&")
        .set("&apos;","'")
        .set("&quot;",'"')
        =>data  
    s.merge(data)
/UnescapeXMLString



# Run rest request, using Sys.Rest object, returnings dictionary
# --
    P(1) => url
    P(2,"GET") => method
    P(3) => basicAuth
    P(4) => jsonData
    P(5,false) => verbose

    rest = Sys.Rest

    rest.url(url)
    rest.method(method)
    if (jsonData != null) rest.jsonData(jsonData)
    if (basicAuth != null) rest.basicAuth(basicAuth)
    if (verbose) rest.verbose
    
    # return dict object
    rest.execute
/Rest


# Stack
# --
    self.data=List
    self.push = Lambda {
        P(1) => val
        self.data.insert(0,val)
    }
    self.peek = Lambda {
        self.data.first
    }
    self.pop = Lambda {
        x=self.data.first
        if (self.data.length > 0) self.data.remove(0)
        x
    }
/class Stack    



# Cols - format columns of data
# Either set .data or call .add with parameters, once for each row, then
# call .show
# --
    self.data=List
    self.add=Lambda{ self.data.add(P) }
    self.getLines=Lambda{
        widths=Dict
        Inner {
            self.data->line
                i=0
                line->element
                    key=""+i
                    e=""+element
                    if (e.length > widths.get(key,0)) widths.set(key,e.length)
                    i=i+1
        }
        # generate output
        self.data->line
            i=0
            outLine=""
            Inner {
                line->element
                    key=""+i
                    e=""+element
                    pad=widths.get(key)-e.length+1
                    outLine=outLine + e + " ".times(pad)
                    i=i+1
            }
            out(outLine.trim) # remove added trailing space
    }
/class Cols


# The TAB character
# --
	"^t".unEsc
/TAB



# Structure for generating nested output, typically code
# --
	self.dict=Dict
	self.list=List
	self.parent=null

	# Register a key for lookup from sub-contexts, in order to know what to render
	# --
	self.setKey = Lambda{
		P(1) as String => key
		P(2) => value
		self.dict.set(key,value)
	}

	# Register a key in parent context, in order to know what to render
	# --
	self.setParentKey = Lambda{
		P(1) as String => key
		P(2) => value
		error(self.parent==null, "setParentKey: no parent")
		self.parent.setKey(key,value)
	}

	# Search for key
	# --
	self.lookupKey = Lambda{
		P(1) as String => key
		curr=self
		loop
			break(curr.dict.has(key))
			curr=curr.parent
			break(curr==null)
		|
		if (curr != null) curr.dict.get(key) else null
	}

	# Output single lines or list of lines, with local indent
	# --
	self.add = Lambda{
		P(1,"") => text
		if (Sys.getType(text)=="List") {
			text->line self.list.add(line)
		} else {
			self.list.add(text)
		}
	}

	# Can also manually add sub-contexts created and used in parallel
	# --
	self.addSub = Lambda{
		P(1) as &OutContext => ctx
		self.list.add(ctx)
	}

	# Create sub-context
	# --
	self.sub=Lambda{
		subContext=Util:OutContext
		subContext.parent=self

		self.list.add(subContext)
		# return the sub context
		subContext
	}

	# Render output
	self.render=Lambda{
		P(1,"") as String => indent
		
		self.list->x
			if (Sys.getType(x)=="String") {
				out(indent + x)
			} else {
				x as &OutContext
				x.render(indent+TAB)->line out(line)
			}
	}		

/class OutContext



# Permutate list of lists. 
#
# Example:
# x=List( List(1,2), List(3,4), 5)
# Permutate(x)
#
#   [1, 3, 5]
#   [1, 4, 5]
#   [2, 3, 5]
#   [2, 4, 5]
#
# --
	P(1)=>data		# List of lists

	if (data.empty) {
		data
	} else if (data.length==1) {
		data.first->value
			out(List(value))
	} else {
		firstElement=data.first
		rest=data.keep(1)
		
		firstElement->value
			perm=Permutate(rest)->x
				out(List(value)+x)
	}
/Permutate


# Test for Permutate function
# --
	Permutate( List( List(1,2,3), "XXX", List(4,5) ) )
//tp



# Check for updates
# --
    jarFile=Sys.homeDir.sub("target").file("cft-jar-with-dependencies.jar")
    lastBuild=Date(jarFile.lastModified)

    daysAgo=Date.diff(lastBuild).asDays

    if (daysAgo >= 30) {

        Db2:Get(Sys.scriptId,"RebuildNag",Dict) => data

        if(data.get("lastBuild", lastBuild)==lastBuild) {
            dateStr=Date.setFormat("yyyyMMdd").fmt

            if (data.get("lastNag","") != dateStr && data.get("nags",0)<5) {
                Inner {
                    Sequence(
                        @
                        @ ------------------------------------------------
                        @ Last build: <<daysAgo>> days ago
                        @ ------------------------------------------------
                        @
                        @ To check for updates:
                        @ ---------------------
                        @    git pull origin master
                        @    mvn clean package
                        @
                        @
                    ).mergeExpr->line println(line)
                }

                data.lastNag=dateStr
                data.nags=data.nags+1
                Db2:Set(Sys.scriptId,"RebuildNag",data)
            }
        } else {
            # Not corresponding file date
            nags=0
            data=Dict.set("lastBuild",lastBuild).set("nags",0)
            Db2:Set(Sys.scriptId,"RebuildNag",SymDict(lastBuild, nags))
        }
            
    }
/CheckForUpdates



# Generate primes
# --
	P(1,1000000)=>max
	list=List(2)
	n=3
	loop
		#println("n",n)
		lim=Std.Math.sqrt(n)
		foundFactor=false
		
		Inner{
			list->factor
				break(factor>lim)
				foundFactor=(n % factor == 0)
				break(foundFactor)
		}
		if (!foundFactor) {
			list.add(n)
		}
		n=n+1
		break(n>max)
	|
	list
/Primes



# Purge log files etc older than 30 days
# Use @PURG shortcut, as running Util:PurgeOldFiles is dangerous, depending on current directory inside Util script of loaded before
# --
	P(1,Dir) => currDir
	P(2,Input("Glob pattern").get)=>globPattern
	error(globPattern=="", "Invalid glob, try *.txt or similar")

	P(3,Input("Number of days").get.parseInt) => days

	limit=Date.sub(Date.Duration.days(days)).get
	println("Limit:", Date(limit).fmt)

	currDir.files(globPattern)->f
		#println("***",f.name, Date(f.lastModified).fmt)
		assert(f.lastModified < limit)
		report(f,f.name,Date(f.lastModified).fmt)
	|
	_=>rows

	Lib:FormatRows(rows).print

	if (rows.length>0 && Lib:Confirm("Delete these files?")) {
		rows->row
			f=row.get(0)
			println("Deleting " + f.name)
			f.delete
		}
	}
		
/PurgeOldFiles
		
