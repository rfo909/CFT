# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
# --
<<<<<< EOF

Testing the protect mechanism of files and directories.

These tests are all "negative", in that they succeed only when failing
with an error, and a stack trace that indicates that it was the
protect mechanism that caused the error.


>>>>>> EOF
/Readme

# Test directory
# --
    Dir("/tmp").sub(Sys.sessionUUID).create
/dir


# Cleanup
# --
    dir.allFiles->f f.delete |
    dir.allDirs->d d.delete |
/Cleanup



dir.sub("a").create.protect.delete
/Test01_delete_dir


dir.sub("a").create => d1
d1.sub("b").create => d2
d1.protect.sub("b").delete
/Test02_delete_subdir


dir.file("f").create("f").protect.delete
/Test03_delete_file


dir.sub("a").create => d1
d1.file("f").create("f")
d1.protect.file("f").delete
/Test04_delete_file_in_dir


dir.file("f").create("f").protect.append("x")
/Test05_file_append


dir.file("f").create("f")
dir.protect.file("f").append("x")
/Test06_file_in_subdir_append


dir.protect.file("a").create("f")
/Test07_create_file_in_dir


dir.sub("a").create 
dir.protect.sub("a").file("f").create("f")
/Test08_create_file_in_subdir


dir.sub("a").create.file("f").create("f") => f
dir.sub("b").create.protect.copy(f)
/Test09_copy_file_into_dir



dir.sub("a").create.file("f").create("f") => f
dir.sub("b").create.sub("c").create
dir.sub("b").protect.sub("c").copy(f)
/Test10_copy_file_into_subdir


dir.protect.sub("a").create
/Test11_create_subdir


dir.sub("a").create => a
a.file("f").create("f")
dir.file("x").create("x") => x
a.protect.file("f").copyFrom(x)
/Test12_file_copyFrom


dir.sub("a").create => a
a.file("f").create("f")
dir.file("x").create("x") => x
x.copyTo(a.protect.file("f"))
/Test13_file_copyTo


dir.sub("a").create.file("f").create("f")
dir.file("target") => target
dir.sub("a").protect.file("f").move(target)
/Test14_file_move


dir.file("f").create("aaaaaaaaaaaaaa") =>f
dir.protect.file("f.zip") => zip
f.convertCompressed(zip)
/Test15_file_convert_compressed


dir.file("f").protect.binaryCreate(Std.Util.randomBinary("sdf"))
/Test16_file_binaryCreate


dir.protect.file("f").binaryCreate(Std.Util.randomBinary("sdf"))
/Test17_file_in_dir_binaryCreate








# Run all TestX - note that each MUST fail with error and stack trace containing "Protection.validateDesructiveOperation" to pass 
# --
    Sys.functions.sort->f
        assert(f.startsWith("Test"))
        
        Cleanup
        tryCatch(eval(f)) => result
        
        completed=false
        
        if (!result.ok) {
            Inner {
                result.javastack->line
                    if (line.contains("Protection.validateDestructiveOperation")) completed=true
            }
        }
        report(f,completed)
    | => output
    Cleanup
    dir.delete
    output
/RunAll


Dict help
/dh
