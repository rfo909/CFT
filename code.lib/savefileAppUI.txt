# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<< EOF
AppUI

For standardized and good looking console user interface

Remember doing initial call to  

    Lib:GetTerminalSize

so the Term object gives correct dimensions for the terminal.
 
See 'example' function

>>>> EOF
/Readme


# Helper
# --
P(1," ")=>char
P(2,0)=>length
    if (length==0) {
        ""
    } else Inner {
        Std.Data.each(0,length-1)->x out(char) | _.concat
    }
/Chars



# Helper
# --
P(1) => str
P(2) => char
P(3) => len
    if (str.length<len) str=str+Chars(char,len-str.length)
    str
/Pad


# Helper, converts to box drawing characters
# --
P(1,"r---")=>s
    # https://en.wikipedia.org/wiki/Box-drawing_character
    Dict
    .set("r",Sys.uchar("2554"))
    .set("-", Sys.uchar("2550"))
    .set("+",Sys.uchar("2560"))
    .set("|",Sys.uchar("2551"))
    => map

    s.chars->c
        out(map.get(c,c))
    | _.concat => result

    result
/fix
        


# Show top line with optional title, starts layout
# --
    P(1,null) => title
    titleLine=fix("r--") + if(title!=null," ["+title+"] ","")
    titleLine=Curses:Clear + Pad(titleLine,fix("-"),Term.w-2)
    println(titleLine)
    ""
/DoShowTopLine
    
    
# Show header line within layout
# --
    P(1,null) => header
    println(fix("+- ") + header)
/DoShowHeader


    

# Show status or stage as defined by a number of short names and a current
# --    
    P(1,List) => shortNames
    P(2) => current

    line1=""
    line2=""
    Inner {
        space=false
        shortNames->name
            if (space) {line1=line1+" " line2=line2+" "}
            line1=line1+name
            line2=line2+Chars(
                if (name==current, "^", " "),
                name.length
            )
            space=true
    }
    println(fix("| ") + line1)
    println(fix("| ") + line2)
/DoShowContext
    


# Present some text
# --
    P(1)=>text
    P(2,true) => wordWrap

    if (!wordWrap) {
        println(fix("+ ") + text)
    } else {
        DoShowList((""+text).split)
    }
/DoShowText



# Present content of list   
# --
    P(1,List)=>list
    

    line=fix("|")
    list->x
        if (line.length+1+(""+x).length >= Term.w) {
            println(line)
            line=fix("| ")
        }
        line=line+" "+x
    |
    println(line.trim) 
/DoShowList



# Show progress bar
# --
    P(1,0) => doneCount
    P(2,0) => totalCount
    P(3,50) => charsWidth

    line=fix("|  ")
    if (line.length+charsWidth+1 >= Term.w) {
        charsWidth=Term.w-line.length-1
    }
    dataChars=charsWidth
    if (totalCount > 0) {
        doneChars=(dataChars*doneCount/totalCount).i
        if (doneChars > dataChars) doneChars=dataChars
    } else {
        doneChars=0
    }

    line=line+Chars(Sys.uchar("2588"),doneChars) + Chars(".",dataChars-doneChars)
    println(line)
/DoShowProgressBar
    

# Ask for input
# --    
    P(1,"Label") => label
    P(2,null) => currValue

    DoShowText(" [?] " + Curses:Bold + label + Curses:Reset)
    if(currValue != null) {
        DoShowText("    Enter for ["+currValue+"]")
    }
    
    readLine => val
    if (val=="") val=currValue
    val
/DoInput



# Create summary object, which is controlled via two lambdas, for
# adding data and showing (add to layout)
# --
    self.data=List
    self.Lrow=Lambda{
        P(1) as String => shortName
        P(2) as String => longName
        P(3) as String => value
        self.data.add(SymDict(shortName,longName,value))
    }
    self.Lshow=Lambda{
        P(1," ") as String => padChar
        error(padChar.length != 1, "padChar must be single character")

        # Identify width of columns
        sLen=0
        lLen=0
        vLen=0
        self.data->x 
            sLen=if(x.shortName.length>sLen, x.shortName.length, sLen)
            lLen=if(x.longName.length>lLen, x.longName.length, lLen)
            vLen=if(x.value.length>vLen, x.value.length, vLen)
        |
        self.data->x
            line=AppUI:fix("| ") + 
                AppUI:Pad(x.shortName + " ",padChar,sLen+4)
                + if(lLen>0, " " + AppUI:Pad(x.longName+" ",padChar,lLen+4), "")
                + " [" + x.value + "]"
            println(line)
        |
        println(AppUI:fix("|"))
    }

/class DoSummaryObj as SummaryObj



# Present menu
# --
    P(1,List) => data
    P(2, Lambda{P(1)}) => LambdaLabel
    println(fix("|"))
    pos=1
    data->row
        println(fix("|  ") + Pad(""+pos," ",5) + LambdaLabel.call(row))
        pos=pos+1
    |
    println(fix("|"))
    DoInput("Enter number",null,false) => str
    if (str.?parseInt) {
        n=str.parseInt-1
        if (n<0 || n>data.length-1) {
            null
        } else {
            data.nth(n)
        }
    } else {
        null
    }
/DoMenu




# Space
# --
    println(fix("|"))
/DoSpace


# Get confirmation (true or false)
# --
P(1,"Please confirm")=>label
P(2,"yes")=>confirmString
P(3,"no")=>defaultValue
    DoShowText("[?] " + label + " ("+defaultValue+")")
    readLine => inp
    if (inp.trim=="") inp=defaultValue
    
    inp.toLower == confirmString.toLower
/DoConfirm



# Clear screen
# --
    println(Curses:Clear)
/DoCls


    
# Test
# --
    Lib:GetTerminalSize  # update Term
    
    
    DoShowTopLine("Clone VM")
    DoShowContext(
        "Orig Name CPU RAM Disk Nic Confirm".split,
        "Name"
        )
    DoInput(
        "Name of new VM",
        "mcfg1.v"
        )

    # ---

    DoShowTopLine("Clone VM")
    DoShowContext(
        "Orig Name CPU RAM Disk Nic Confirm".split,
        "Confirm"
        )
    DoShowHeader("Confirm")
    
    obj=DoSummaryObj
    obj.Lrow("Orig","VM to clone","kubs05.v")
    obj.Lrow("Name","Name of new VM", "mcfg1.v")
    obj.Lrow("CPU","Number of CPUs", "4")
    obj.Lrow("RAM","GB of RAM","8")
    obj.Lrow("Disk","GB of disk","32")
    obj.Lrow("Nic","Network NIC name","ens3")
    obj.Lshow
    
    DoInput(
        "Type 'yes' to confirm",
        "no"
        )

    # ---
    
    DoShowTopLine("Top menu")
    DoMenu(List("Create VM from scratch","Clone existing VM","Show VM status","Start VM", "Stop VM"))
    
/example
