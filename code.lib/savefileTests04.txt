# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<<<<<<<<<<<<<< EOF
Script testing

Time consuming tests related to Db2 and locking

>>>>>>>>>>>>>>>> EOF
/Readme



# Run all TestX
# --
    Sys.functions.sort->f
        assert(f.startsWith("Test"))
        report(f,eval(f))
/RunAll









# Call Util:Counter() 
# --
    P(1,10)=>numCalls
    loop
        break(numCalls<=0)
        numCalls=numCalls-1
        println("Got: " + Util:Counter("test"))
        
//t01_GetCounters


# Newline
# --
    if (Sys.isWindows,"^r^n","^n").unEsc
//Newline

# Create separate threads, each calling GetCounters()
# The idea is that we check that each counter value is obtained
# only once!
#
# Note: found flaw in Util:Counter, in that it needed a "named lock" for transaction 
# protection, as it consists of a read and a write. :-)
# --
    P(1,20)=>numThreads
    i=0
    loop
        break(i>=numThreads)
        i=i+1
        out(SpawnProcess(SymDict(i),t01_GetCounters(10)))
    | -> proc
        proc.wait
        proc.output.split(Newline)->line out(line)
    | => allLines
    
    # result
    allLines.length == allLines.unique.length && allLines.length==200
/Test01_Verifying_Util_Counter_Threaded_test
     
     

# Basic verify for locks. 
# --
    Std.Db.obtainLock("Tests04",1000)
    SpawnProcess(Dict, Std.Db.obtainLock("Tests04",1000)).wait.output => output
    ok=Inner{
        output->line assert(line.contains("Exception")) out(line) | _.length>0
    }
    Std.Db.releaseLock("Tests04")
    # result
    ok
/Test02_Verify_lock




