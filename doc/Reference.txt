* CFT Reference
* ---- Using CFT as a shell
  |  Combine with CFT function results
  |  The ":N"
        Complex example
  |  The "::"
  |  Colon commands and shortcuts
  |  Symbols 
        Diffing files example
  |  :N, :: and %x initiate expressions
  |  Repeat last line
  |  External programs
        Force as external
        Parameters
        External program in current or parent dir
  |  Background jobs
        Blocking on input?
        Bring to foreground
        Warning
  |  Command history
  |  The "shell" command
  |  Path parent lookups
  |  TAB "autocompletion"
  |  Terminal dimensions - the Term object
        The @term shortcut
  |  Line wrapping
* ---- Script files
  |  Save
  |  Load
  |  Create new empty script
  |  The @e shortcut
  |  CFT.props - codeDirs
        Local scripts may hide library scripts
  |  Calling functions in other scripts
  |  Examining non-current scripts
  |  Show all known scripts
  |  Search through all scripts
* ---- Lists and loops
  |  For each
        For each on non-lists
  |  General loops
  |  Controlling loops
  |  Loop scope
  |  Loop result
        Example, using PIPE 
        Example using Inner block
        Avoid loops inside local blocks
        So what are local blocks for?
  |  Nested loops
  |  Addition
  |  Subtraction
  |  Removing duplicates from a list
  |  List sorting
        Masquerading
        Int(), Str() and Float()
  |  List filtering with Lambda
        Use Lambda to also remove some items
  |  nth() negative indexes
* ---- Dictionaries
  |  SymDict
  |  Dictionary name
  |  setStr()
  |  get() with default value
  |  When value name is valid identifier
* ---- String escape char
  |  Escape codes
* ---- Searching - Grep
  |  Global function Grep()
  |  As shell command
        Search files from result list
* ---- Block expressions
  |  Local blocks
  |  Inner blocks
  |  Lambdas
  |  Block expressions summary
  |  Local variables scope
* ---- Conditionals - if expression
  |  Inline form
  |  Traditional form
  |  Example 1
  |  Example 2
  |  Expressions are statements ...
  |  Blocks are expressions ...
  |  if-ladders
* ---- Code spaces - "pipes"
  |  Result value from a code space
        Code space result value
        Otherwise ...
  |  Nested loops
  |  Out count
* ---- Function parameter default values
* ---- User input
  |  Ask for secrets
  |  Ask for missing function parameter
  |  Paste multiple lines
* ---- Output to screen
* ---- Produce columns with report()
  |  Hidden columns
        Example
        Interactive use
        Function reuse
* ---- ANSI escape codes
  |  Enable/disable
* ---- Sys.stdin()
  |  Running colon commands from script code
* ---- The "protect" mechanism
* ---- The error() global function
* ---- The onLoad function
* ---- The StateString function
* ---- Function parameters ...
  |  Get parameters as List
  |  Get parameters as Dict
* ---- Running external programs
  |  Summary
  |  Dir.run()
  |  Dir.runCapture()
  |  Dir.runDetach()
  |  Dir.runProcess
  |  Lib:runProcess utility function
  |  Lib:run utility function
  |  Work directory issues
  |  Doing ssh
        Side note: ssh without password
* ---- CFT command line args
* ---- Environment variables
* ---- Hiding helper functions  
* ---- Value types
  |  Get type of value
  |  Type checking with "as"
        Null-values
        Dict (type) names
        Closures and Lambdas
  |  Note: "as XXX" is separate expression
        What about ... ?
* ---- Synthesis
  |  Creating code from values
  |  Example using :syn
  |  Example using :NN
        Two different situations
  |  Using syn()
        The underscore function?
  |  Clone any value
* ---- Templating
  |  Merging text with Dict
        Dict.mergeCodes()
        Custom merge codes
        Example using raw strings and Sequence
  |  .mergeExpr
* ---- Text processing
  |  Reading text files
  |  Script file "here" documents
  |  DataFile
        Include blank lines
        Allowing comments
        Projects script
  |  Sequence() and raw strings
* ---- The CFT datastore (Db2)
  |  Collections
  |  Synchronization
        Implementation
  |  The Vault
* ---- Error handling
  |  Soft errors
  |  Hard errors
  |  Predicate calls
* ---- Debugging
  |  @lint
  |  addDebug()
  |  Sys.getCallHistory
  |  setBreakPoint(str)
* ---- Lambdas and closures
  |  Manual closure
  |  Dictionary objects
  |  Calling lambda/closure
        Dotted lookup from dictionary
        Fun with closures
* ---- Classes
  |  Class object types
  |  What a "/class" function does
* ---- Multitasking in CFT
  |  Key concepts
        Intended use
  |  The Process
  |  Util:ProcessMonitor
* ---- Processing JSON
* ---- Processing XML
  |  Parsing XML
  |  Creating structure with code
  |  Looking up content
  |  XML:Readme
* ---- Passwords, encryption, binary data
  |  Binary type
  |  Passwords
  |  Encrypt / decrypt
  |  Binary data
        Sys.sessionId
        Sys.secureSessionId
        The "Vault" script
* ---- Lazy evaluation
        Lazy if
        Lazy AND, OR - &amp;&amp; ||
        Lazy P(N,defaultExpr)
* ---- Std.Text.Lexer
  |  Concept
  |  Implementation
        .sub()
  |  Reusable nodes - integer sequence
  |  Processing single lines
  |  Limitations
  |  Different uses
  |  Complex tokens
        Regular Node.addToken() example
        Node.addTokenComplex() example
* ---- 3D library
  |  Ref
  |  World
  |  Brushes
  |  Rendering
  |  Drawing a spoked wheel
* ---- 2D library
  |  Spoked wheel (lines)
  |  Spoked wheel (polygon fill)
* ---- Internal web-server (experimental)
* ---- Calling Java (experimental)
* ---- Comments and digressions
  |  Function name AFTER code?
  |  Using Sys.stdin to run colon commands etc
  |  Code spaces / the "pipe"
        Code blocks (local / Inner and Lambda)
* ---- Script and code size
        2020-11-13 v2.0.0
        2021-04-01
        2021-09-26
        2021-10-16
        2021-12-17 v3.0.0
        2022-03-31 v3.2.5
        2022-04-22 v3.5.0
        2023-02-03 v4.0.1
        2024-08-16 v4.2.2
        2025-01-30 v4.4.1
