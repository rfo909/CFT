# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



# Script readme
<<< EOF
--------------------------------------------------------------
NOTE: You MUST run CFT as root for this script to work.
--------------------------------------------------------------

This script manages creation, cloning, delete, start and stop
of Virtual Machines using KVM on Linux.

To get started, perform the following tasks:

* install and enable kvm
* modify network config to create bridge 'br0'
* create first VM

Install KVM
-----------

* Ubuntu 20.04

> sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst
> sudo systemctl enable libvirtd
> sudo systemctl start libvirtd

* Ubuntu 18.04

> sudo apt-get install qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker
> sudo systemctl enable libvirtd
> sudo systemctl start libvirtd

Then copy at least one OS image into /var/lib/libvirt/boot. That's where 
this script expects to find them.

Create network bridge on host server
------------------------------------
This script requires there to exist a network bridge 'br0', which all
VM's use. Configuring this on a server with two network cards is easy
with netplan:

network:
  version: 2
  renderer: networkd
  ethernets:
    enp2s0f0:
      dhcp4: no
      gateway4: 10.0.0.138
      nameservers:
        addresses: [10.0.0.138]
      addresses: [10.0.11.51/16]
    enp2s0f1:
      dhcp4: true
  bridges:
    br0:
      interfaces: [enp2s0f1]

Modify the gateway4, nameserver addresses and the address(es) for the 
server itself (10.0.11.51/16 in above example).

Also ensure you use correct network device names. These are
displayed with

> ip addr


Create a template VM
--------------------
Creating VM's for actual use, we prefer cloning a template VM
as this is MUCH faster.

Start by allocating an IP-address and decide on a name, possibly
adding these to local DNS server, if using such setup.

To create the first VM, run the interactive Create function. It
asks for details, then creates a VM. Often its good to create
a template VM, then clone this to individual VM's.

*** Connecting to new VM 

If you are running on a server with X windows, select headless no,
and then after installation has started, just from a terminal:

> sudo virt-manager

If no X-windows, enter "yes" for headless. You must then use 
VNC to complete the install. In a different window, run the 

    VNCHelp

function, to look up the port number (usually 5900), then follow
the instructions to transport the port number to another PC, 
where you run VNC, connecting to 127.0.0.1:5900 or some other port. 

After the initial install, reboot the VM. May need to start it
explicitly, using the Start() function of this script. Then again
run the VNCHelp function, to check the port, then reconnect with VNC.

All we now need, is to log in, then enter 

    ip addr
    
We then ssh in from some terminal, and go on to prepare the VM.

VM preparations
---------------
*** Fix /etc/netplan/xxx.yaml

*** Allow password-less sudo

Add a line to /etc/sudoers

<username>  ALL=(ALL) NOPASSWD:ALL

*** Make SSH work without password

The new template VM must allow access from root on the VM server.
This is done by:

$ su root
$ ssh-copy-id user@VM

Also, if there are other hosts that are used for management,
then do the same there, for the relevant users.

I typically run a separate VM that has access to every host,
using the Ansible script to update and maintain all hosts.

To ensure access, run the ssh-copy-id user@VM from that host
as well.

*** Update

For ubuntu:

sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get dist-upgrade -y

Production VM's
---------------
Use the Clone() function to create copies of the template VM.
This function is fully parametrized, and can be run automatically
from other scripts.

Remember to allocate IP-addresses in DNS before starting.


>>> EOF
->line println("| " + line)
/Readme



Dir("/var/lib/libvirt/boot") =>d
error(!d.exists,"Missing directory: " + d.path)
d
/BootImagesDir


# List of VM names to protect against accidental delete
    List()
/DoNotDelete



# Selects boot image
# --
    BootImagesDir.files =>data
    Lambda { P(1).name } =>macroGetElementName
    Lib:MenuSelect (data, macroGetElementName) 
/BootImage



# Run virsh to display status for all defined VM's
# --
    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

    println
    Lib:run(List("virsh","list","--all")).stdout->line println(line) |
    println
/status


status
/s


# Stop all running VM's
# --
	Lib:run(List("virsh","list","--all")).stdout->line
		parts=line.split
		assert(parts.length==3)
		assert(parts.nth(2)=="running")
		Stop(parts.nth(1))

/StopAll


# Start VM
# --
    P(1) =>target
    println("STARTING " + target)
    Lib:run(List("virsh","start","--domain",target),List,true)
    status
/Start


# Stop VM
# --
    P(1) =>target
    println("STOPPING " + target)
    Lib:run(List("virsh","destroy","--domain", target),List,true)
    status
/Stop


# Delete VM
# --
    P(1) =>target
    println("DELETING " + target)
    error(DoNotDelete.contains(target),
        "Can not delete target " + target + ": remove from DoNotDelete list first")
    Stop(target)
    Lib:run(List("virsh","undefine","--domain",target),List,true)
    vdisk = Dir("/var/lib/libvirt/images").file(target + ".qcow2")
    if(vdisk.exists) vdisk.delete
    status
/Delete



# Automatic cloning of existing VM (which will be stopped if running)
# --
    P(1) => original           # original VM ("kubsXX")
    P(2) => cloneName          # new VM name
    P(3) => originalIp         # ip of the VM that got cloned
    P(4) => newIp              # ip/NN
    P(5) => sshUser            # for config
    P(6) => nic                # VM network card to configure ("ens3" etc) - run "ip addr" on original VM
	P(7) => gatewayIp		   # used to configure netplan

    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

    PDict("original","cloneName","originalIp","newIp","sshUser") => pdict
    if (pdict.hasNullValue) Inner {
        loop
            status
            Lib:ReadValue("Template VM (will be stopped if running)", original) => original
            Lib:ReadValue("New VM name", cloneName) => cloneName
            Lib:ReadValue("Template VM IP address", originalIp) => originalIp
            Lib:ReadValue("New VM IP address (including /NN netmask)", newIp) => newIp
            Lib:ReadValue("SSH user", sshUser) => sshUser
            Lib:ReadValue("Network card (nic) to configure, ex. ens3", nic) => nic
			Lib:ReadValue("Gateway IP address", gatewayIp) => gatewayIp
            break(Lib:ReadValueBoolean("Confirm", false))
    }
    error(!newIp.contains("/"), "Invalid newIp - must contain /NN netmask")

    Lib:Header ("Cloning existing VM")

    println("* Stopping original VM " + original)
    Stop(original)

    println("* Creating clone " + cloneName)

    cmd = "virt-clone --original " + original + " --name " + cloneName + " --auto-clone"
            + " --file /var/lib/libvirt/images/" + cloneName + ".qcow2"
    
    Lib:run(cmd.split)

    println("Starting clone")
    Start(cloneName)

    
    
    println("* Waiting for new node to respond to ping")
    ServersMaintenance:WaitForPing (originalIp, 30)

    target = sshUser+"@"+originalIp

    println("* Wait for SSH ok")
    Inner {
        Std.Data.yes(20,"x") -> dummy
            break(SSH:HostOkSSH(target))
            Sys.sleep(1000)
    }

    
    println("* Configuring hostname")
    ServersMaintenance:VMSetHostname (target, cloneName)

    println("* Configuring netplan")
    ServersMaintenance:VMConfigureNetplan (target, newIp, nic, gatewayIp)

    println("* Rebooting new VM: " + cloneName)
    SSH:sudo (target, "reboot", true)

    println("* Waiting for VM to stop responding to ping")
    Inner {
        loop
            Lib:run(List("ping","-c",1,originalIp),List,true) => x
            break(x.exitCode != 0)
            println("   sleeping")
            Sys.sleep(3000)
    }
    println("* Clone completed")

    "Done"
 /Clone


# Example of calling Clone
# --
<<<<< EOF

# Create kub62 and kub65
# --
template="ubs20_s06"
initialAddr="ubs20s06.v"
nic="enp1s0"

KVM:Clone(template,"kub62",initialAddr,"10.0.8.25/16","roar", nic)
KVM:Clone(template,"kub65",initialAddr,"10.0.8.28/16","roar", nic)
/Create


>>>>> EOF
    ->line 
        println(line)
/Example





# Create new VM from scratch - fully interactive
# --
    Dir.runCapture("whoami").nth=="root" =>ok
    error(!ok, "Must be logged in as root")

    null =>bootImage
    null =>name
    false =>headless
    8192 =>ram
    4 =>cpus
    32 =>disk
    loop
        Lib:Header ("Create new KVM Virtual Machine")

        BootImage =>bootImage
        println("# Selected " + bootImage.path)

        Lib:ReadValue ("New VM name", name) =>name

        println("")
        println("# Headless => no means use virt-manager") 
        println("# Headless => yes (advanced) means use VNC to complete installation")
        Lib:ReadValueBoolean ("Headless", headless) =>headless

        Lib:ReadValueInt ("RAM MB", ram) =>ram
        Lib:ReadValueInt ("CPU's", cpus) =>cpus
        Lib:ReadValueInt ("Disk GB", disk) =>disk
        Lib:ReadValueBoolean ("Enter 'yes' to confirm this is okay", false) =>ok
        break(ok)
    |
    Lib:ReadValueBoolean ("Enter 'yes' to continue", false, "yes","abort") =>continue
    if(!continue,Inner{
        println("Aborting")
        error(true,"Aborting")
    })

    List("virt-install",
        "--name",name,
        "--ram="+ram,
        "--vcpus="+cpus,
        "--cpu","host",
        "--hvm",
        "--network=bridge=br0,model=virtio",
        "--disk","path=/var/lib/libvirt/images/"+name+".qcow2,size="+disk+",bus=virtio,format=qcow2",
        "--cdrom",bootImage.path
    ) =>cmd
    if(headless, 
        cmd+List("--graphics","vnc"),  
        cmd
    ) =>cmd

    println(cmd.concat(" "))
    Dir.runDetach(cmd)

    <<< EOF
    -----------------------------------------------------------------
    Use vnc or start virt-manager (as root) to finalize installation

    virt-manager can be started by entering 'mgr' and press enter
    -----------------------------------------------------------------
    >>> EOF
/Create





# Reconfigure a VM by editing its XML config file
# --
    status

    P(1,Input("VM to reconfigure").get) => vm

    println("8GB=" + (8*1024*1024) + " Kb")
    println("16GB=" + (16*1024*1024) + " Kb")
    println("32GB=" + (32*1024*1024) + " Kb")

    Stop(vm)
    Dir.run("virsh","edit",vm)
/ReconfigureVM
    
    

# Run virt-manager (requires X-windows)
# --
    Dir.run("virt-manager")
/mgr



# Info on using VNC for installation
# --
    status
    readLine("VM name") =>vm

    Dir.runCapture("hostname").nth.trim =>host

    Dir.runCapture("virsh","dumpxml",vm)->line
        assert(line.contains("vnc")) out(line)
    | _.nth =>portInfo

    Dict
        .set("host",host)
        .set("portInfo",portInfo)
        .set("vm",vm)
        .mergeCodes =>data

    <<< EOF
----------------------------------------------
To connect with VNC, locate the port number,
this is listed below. 

Then from remote computer open an ssh:

ssh <user>@<server> -L<PORT>:127.0.0.1:<PORT>

The port is identified by running 

virsh dumpxml ${vm} | grep vnc

where <VM> is the name of the VM. 
This produces the following line:

${portInfo}
----------------------------------------------
    >>> EOF
    ->line
        out(line.merge(data))
/VNCHelp


