

# PlotWidth
# --
	1000
/PlotWidth


# Show markers?
# --
	true
/ShowMarkers

# Create data as sequence of number in range 0-1
# --
	P(1) =>start
	P(2) =>end
	P(3) as int => bigNumber
	P(4) as int? => reductionFactor		
	
	step=(end-start)/PlotWidth
	if (step<1) step=1
	
	#println("step=" + step)


	x=start
	loop
		break(x>=end)
		break(Sys.outCount > PlotWidth)
		
		a=bigNumber % x
		
		# need to normalize the sample
		
		rf=if(reductionFactor, reductionFactor,x)
		
		fract=(a % rf) / rf
		out(fract)
		
		x=x+step
	|
/CreateData



# Data dir
# --
	Sys.savefile.dir.sub("temp").sub("fact").create
/DDir

# Delete pictures
# --
	DDir.files("*.png")->f f.delete
/Purge

# Plot point
# --
	P(1)=>x
	P(2)=>y
	P(3)=>img
	
	img.setPixel(x,y)
	img.setPixel(x-1,y)
	img.setPixel(x+1,y)
	img.setPixel(x,y-1)
	img.setPixel(x,y+1)
/SetPoint

# Plot
# --
	P(1) => data
	P(2) => fName
	
	width=PlotWidth
	height=400
	
	img=Std.Raster.init(width,height,Std.Color(255,255,255))
	img.setColor(Std.Color(0,0,0))
	
	x=0
	data->val
		y=(val*(height-3)).i+3
		SetPoint(x,y,img)
		x=x+1
	|
	
	# create markers?
	if (ShowMarkers) {
		img.setColor(Std.Color(255,0,0))
		Std.Data.for(0.0, width-1, width/10) -> pos
			x=pos.i
			Std.Data.each(20,height-20)->y
				img.setPixel(x,y)
	 }
		
			
	img.save(DDir.file(fName + ".png"))
/Plot


# Calculate a critical score of the data
# --
	P(1)=>data
	
	total=0
	
	Std.Data.for(1,data.length-1,1)->i
	
		val=data.nth(i)
		if (val<0.01) total=total+1
		else {
			prev=data.nth(i-1)
			if (prev > val*1.8) total=total+1
		}
	|
	total
/CalcCriticals


# Big number
# --
	2441*2357
/BigNumber


# Show factors of BigNumber
# --
	P(1,BigNumber) => bn
	
	limit=Std.Math.sqrt(bn).i
	i=2
	bn=BigNumber
	loop
		if (bn%i==0) out(i)
		i=i+1
		break(i>limit)
/Factors

# Main
# --	
	Purge

	bigNumber=BigNumber
	start=Std.Math.sqrt(bigNumber).i
	end=(bigNumber/2).i # (bigNumber/10).i  # factors up to 10 can be checked one by one
	
	reductionFactor=null

	count=0
	loop
	
		data=CreateData(start,end,bigNumber,reductionFactor)

		crit=CalcCriticals(data)

		fname=("00000"+count).last(5) + "_crit" + crit + "_" + start + "-" + end
		Plot(data,fname)
		
		end=(end*0.95).i
		break(end-start < 1000)
		count=count+1
		
	|
/f2
