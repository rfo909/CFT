# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Set group id as used by git for this project
# --
	Db2:Set(Sys.scriptId,"git-group-id",readLine("Enter group id"))
//SetGroupId



# Group id for git / ShowSummaryAll
# Used in ShowSummaryAll, to tag dependencies with code "?" for references that 
# should be local but are not built by a pom 
# --
	Db2:Get(Sys.scriptId,"git-group-id",null) => gid
	if (gid==null) {
		readLine("Enter group id for project") => gid
		Db2:Set(Sys.scriptId,"git-group-id", gid)
	}
	gid
/GetGroupId
		


# Path depth for file
# --
	P(1) as File => f
	f.path.chars->c
		assert(c==Sys.fileSeparator)
		out(1)
	| _.length
//PathDepth



# All pom files under current dir
# Sorted so that deepest path files come first
# If not including submodules, filter out those.
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean =>includeSubmodules

	submodules=Inner{
		# modify paths for proper matching against POM file path
		Git:Submodules(currentDir)->path out(Sys.fileSeparator + path + Sys.fileSeparator)
	}

    currentDir.allFiles("pom*.xml")->pom
		path=pom.path
		if (!includeSubmodules) {
			found = false
			Inner{
				submodules->subModulePath   # /x/y/ format
					if (path.contains(subModulePath)) {
						found=true
						break
					}
			}
			if (!found) out(pom)
		} else {
			out(pom)
		}
	| -> pom
		out(Int(PathDepth(pom), pom))
	| _.sort.reverse->x 
		out(x.data)
/Pom




# Create summary of pom file detailing what artifact it creates, and dependencies, on simple line format
# --
	P(1, Pom.first) as File=>f
	XML:Parse(f.read).first => node

	out("file " + f.path)
	s=node.subNode("groupId").getContent 
		+ ":" + node.subNode("artifactId").getContent 
		+ ":" + if(node.subNode("version") != null, node.subNode("version").getContent, "UNKNOWN")
	out("create " + s)
	node.subNode("dependencies").subNodes("dependency")->dep
		s=dep.subNode("groupId").getContent 
			+ ":" + dep.subNode("artifactId").getContent
			+ ":" + if(dep.subNode("version") != null, dep.subNode("version").getContent, "UNKNOWN")
		out("dep " + s)

//CreateSummary


# Show artifact and version from all pom files (including submodules)
# --
	P(1,Dir) => currentDir

	Pom(currentDir,true)->f
		XML:Parse(f.read).first => node
		report(f, node.subNode("groupId").getContent + ":" + node.subNode("artifactId").getContent + ":" + node.subNode("version").getContent, f.path)
/Versions
	

# Create pom summary as dictionary
# --
	P(1,Pom.first) as File => f

	dict=Dict
	dict.dep=List
	dict.file=f
	CreateSummary(f)->line
		if (line.startsWith("create ")) {
			dict.set("create",line.after(" "))
		} else if (line.startsWith("dep ")) {
			dict.dep.add(line.after(" "))
		}
	|
	dict
//CreateSummaryDict



# Update all git modules
# --
	P(1,Dir)=>currentDir
	Git:UpdateSubmodules(currentDir)
/UpdateSubmodules



# File header
# --
	P(1) as File=>file
	P(2) as String=>s

	file.append("")
	file.append(s)
	file.append("-".times(s.length))
//FileHeader



# For all pom files under current directory, including submodules, create summaries of dependencies
# and mark local dependencies between pom files
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => includeSubmodules

	Lib:TmpFile("summaryAll","txt") => resultFile
	if(resultFile.exists) resultFile.delete

	FileHeader(resultFile,"Summarizing all pom*.xml found under " + currentDir.path + "  " + Date.fmt)
	resultFile.append("")
	resultFile.append("Dependencies:")
	resultFile.append("  '*' means created by local pom file")
	resultFile.append("  'E' means inconsistent versions between dependency and local pom file")
	resultFile.append("  'X' means starts with GetGroupId but not matching local pom")
	resultFile.append("")


	list=List
	Pom(currentDir, includeSubmodules)->f
		list.add(CreateSummaryDict(f))
	|
	list->summary
		# for each dependency, search through the summaries, to see if 
		# any of them create that dependency
		FileHeader(resultFile,summary.create)
		resultFile.append(summary.file.path)

		summary.dep->dep
			prefix="   "
			if (dep.startsWith(GetGroupId)) prefix=" X "
			extra=""
			
			Inner{
				list->x
					reject(x==summary)
					if (x.create.beforeLast(":")==dep.beforeLast(":")) {
						# artifact match (independent of version)
						prefix=" * "
						if (x.create.afterLast(":") != dep.afterLast(":")) {
							# versions differ
							prefix=" E "
							extra="  --  should be " + x.create.afterLast(":")
						}
					}
			}
			resultFile.append(prefix + dep + extra)
	|
	resultFile.append("")


	# List all dependecies (not including submodules), sorted and unique, to reveal differing versions
	allDep=List
	Pom(currentDir,false)->f
		CreateSummaryDict(f).dep->dep
			allDep.add(dep)
	|

	FileHeader(resultFile,"All dependencies from the POM files (not submodules)")
	allDep.sort.unique->dep
		resultFile.append("   " + dep)
	|
	resultFile.append("")

	Lib:e(resultFile)
/ShowSummaryAll



# test-compile all pom files (except git submodules)
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => showErrors

	Pom(currentDir,false)->f
		Lib:Header(f.path)
		result = Lib:run(List("cmd","/c","mvn","-f", f.path, "clean","package","-U"), null, true)

		if(result.exitCode==0) println("   OK") else println("   ERROR")

		if (showErrors) {
			lines = result.stdout + result.stderr
			lines->line
				if (line.contains("[ERROR]")) Lib:ShowText(line)
		}

/CompileAll


# test-compile all pom files in current dir
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => showErrors

	currentDir.files("pom*.xml")->f
		Lib:Header(f.path)
		result = Lib:run(List("cmd","/c","mvn","-f", f.path, "clean","package","-U"), null, true)

		if(result.exitCode==0) println("   OK") else println("   ERROR")

		if (showErrors) {
			lines = result.stdout + result.stderr
			lines->line
				if (line.contains("[ERROR]")) Lib:ShowText(line)
		}

/CurrDirCompileAll


# Run deploy on all pom files (except git submodules), to update repo
# --
	P(1,Dir) as Dir => currentDir

	Pom(currentDir,false)->f
		Lib:Header(f.path)
		result = Lib:run(List("cmd","/c","mvn","-f", f.path, "clean", "deploy"), null, true) 

		if(result.exitCode==0) println("   OK")

		lines = result.stdout + result.stderr
		lines->line
			if (line.contains("[ERROR]")) Lib:ShowText(line)

/DeployAll


# Show pom files which have no java source files under the pom directory 
# --
	P(1,Dir) as Dir => currentDir

	fsep=Sys.fileSeparator

	Pom(currentDir,false)->f
		count=Inner{
			f.dir.allFiles("*.java")->javaFile
				reject(javaFile.path.contains(fsep+"target"+fsep))
				out(1)
			| _.length
		}
		report(f, f.path, count)
/NoJava



# Version edit pom file
# 
# Modify artifact version for pom files where groupId and optional artifactId matches.
# Also modify dependencies to that same version, where groupId and artifactId (if defined), matches
# Returns modified list of lines
# --
	P(1) as File => pomFile
	P(2) as String => groupId
	P(3) as String? => artifactId
	P(4) as String => VERSION
 
	buf=AutoEdit:EditBuffer(pomFile.read(false))

	buf.match("<groupId>",10)
	if (buf.line.contains(">"+groupId+"<")) {
		ok=true
		if (artifactId != null) {
			buf.match("<artifactId>",3)
			ok = buf.line.contains(">" + artifactId + "<")
		}
		if (ok) {
			buf.match("<version>",3)
			line=buf.line
			line=line.before("<version>") + "<version>" + VERSION + "</version>" + line.after("</version>")
			buf.update(line)
			buf.next
		}
	}

	buf.match("<dependencies>")
	loop
		break(!buf.matchOptional("<groupId>" + groupId + "</groupId>")) 
		ok=true
		if (artifactId != null) {
			buf.match("<artifactId>",3)
			ok = buf.line.contains(">"+artifactId+"<")
		}
		if (ok) {
			buf.match("<version>", 3)
			line=buf.line
			line=line.before("<version>") + "<version>" + VERSION + "</version>" + line.after("</version>")
			buf.update(line)
		}
	|

	# Verify still valid XML
	XML:Parse(buf.out)
	# return modified file content
	buf.out
/VersionEditPom



# Update version for all pom*.xml under current directory
# --
	P(1,Dir) as Dir => currentDir
	P(2) as String => groupId
	P(3) as String? => artifactId
	P(4) as String => version
	P(5,false) as boolean => crlf

	Maven:Pom(currentDir,false)->f
		println(f.path)
		lines=Maven:VersionEditPom(f, groupId, artifactId, version)
		if (crlf) {
			f.setWriteCRLF
		} else {
			f.setWriteLF
		}
		f.create(lines)
/VersionEditAllPom
