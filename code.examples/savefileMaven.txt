# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# onLoad: show group id
# --
	Db2:Get(Sys.scriptId,"git-group-id",null) => gid
	println
	println("----------")
	if (gid==null) {
		println("Group Id not set")
	} else {
		println("Group Id set to: " + gid)
	}
	println("Run SetGroupId to update")
	println("----------")
	println
/onLoad

	

# Set group id as used by git for this project
# --
	Db2:Set(Sys.scriptId,"git-group-id",readLine("Enter group id"))
/SetGroupId



# Group id for git / ShowSummaryAll
# Used in ShowSummaryAll, to tag dependencies with code "?" for references that 
# should be local but are not built by a pom 
# --
	Db2:Get(Sys.scriptId,"git-group-id",null) => gid
	if (gid==null) {
		readLine("Enter group id for project") => gid
		Db2:Set(Sys.scriptId,"git-group-id", gid)
	}
	gid
/GetGroupId
		


# Path depth for file
# --
	P(1) as File => f
	f.path.chars->c
		assert(c==Sys.fileSeparator)
		out(1)
	| _.length
//PathDepth



# All pom files under current dir
# Sorted so that deepest path files come first
# If not including submodules, filter out those.
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean =>includeSubmodules

	submodules=Inner{
		# modify paths for proper matching against POM file path
		Git:Submodules(currentDir)->path out(Sys.fileSeparator + path + Sys.fileSeparator)
	}

    currentDir.allFiles("pom*.xml")->pom
		path=pom.path
		reject(pom.path.contains(Sys.fileSeparator+"old"))
		if (!includeSubmodules) {
			found = false
			Inner{
				submodules->subModulePath   # /x/y/ format
					if (path.contains(subModulePath)) {
						found=true
						break
					}
			}
			if (!found) out(pom)
		} else {
			out(pom)
		}
	| -> pom
		out(Int(PathDepth(pom), pom))
	| _.sort.reverse->x 
		out(x.data)
/Pom




# Create summary of pom file detailing what artifact it creates, and dependencies, on simple line format
# --
	P(1, Pom.first) as File=>f
	XML:Parse(f.read).first => node

	out("file " + f.path)
	s=node.subNode("groupId").getContent 
		+ ":" + node.subNode("artifactId").getContent 
		+ ":" + if(node.subNode("version") != null, node.subNode("version").getContent, "UNKNOWN")
	out("create " + s)
	node.subNode("dependencies").subNodes("dependency")->dep
		s=dep.subNode("groupId").getContent 
			+ ":" + dep.subNode("artifactId").getContent
			+ ":" + if(dep.subNode("version") != null, dep.subNode("version").getContent, "UNKNOWN")
		out("dep " + s)

//CreateSummary


# Show artifact and version from all pom files
# --
	P(1,Dir) => currentDir
	P(2,false) => includeSubmodules

	Pom(currentDir,includeSubmodules)->f
		XML:Parse(f.read).first => node
		report(f, node.subNode("groupId").getContent + ":" + node.subNode("artifactId").getContent + ":" + node.subNode("version").getContent, f.path)
/Versions


	

# Create dependency
# --
	P(1) => groupId
	P(2) => artifactId
	P(3) => version

	Sequence(
		@ <dependency>
		@ 	<groupId><<groupId>></groupId>
		@ 	<artifactId><<artifactId>></artifactId>
		@ 	<version><<version>></version>
		@ </dependency>
		@
	).mergeExpr
//CreateDependency



# Compare dependencies of single pom.xml in current directory
# with artifacts created by other pom files in project
# --
	P(1,Dir.file("pom.xml")) => masterPom
	error(!masterPom.exists, "No such file: " + masterPom.path)

	# List of dependencies present in masterPom
	CreateSummary(masterPom)->line
		assert(line.startsWith("dep"))
		out(line.after("dep").trim)
	| _=> masterDep

	Lib:Header("pom.xml dependencies")
	masterDep.sort.print


	# List of artifacts produced by other pom files (not including masterPom)
	Pom->f
		reject(f.path==masterPom.path)  # don't compare to itself
		XML:Parse(f.read).first => node
		out(node.subNode("groupId").getContent + ":" + node.subNode("artifactId").getContent + ":" + node.subNode("version").getContent)
	| _=> artifacts

	Lib:Header("Artifacts created by other pom-files")
	artifacts.sort.print

	# Check that all artifacts are present in masterDep
	artifacts->art
		reject(masterDep.contains(art))
		out(art)
	| _=>missing

	# Generate pom dependencies for missing artifacts
	if (!missing.empty) {
		Lib:Header("Missing includes")
	} else {
		Lib:Header(masterPom.name + " COMPLETE")
	}

	missing->art
		groupId=art.before(":")
		artifactId=art.after(":").before(":")
		version=art.after(":").after(":")
		CreateDependency(groupId, artifactId, version)->line 
			println(line)
/CheckMasterPom		
	

# Compare two pom-files, and produce dependencies 
# --
	P(1) as File => src
	P(2) as File => target

	CreateSummary(src)->line
		assert(line.startsWith("dep"))
		out(line.after("dep").trim)
	| _.sort => srcDep

	Lib:Header(src.path)
	srcDep.sort.print

	CreateSummary(target)->line
		assert(line.startsWith("dep"))
		out(line.after("dep").trim)
	| _.sort => targetDep

	Lib:Header(target.path)
	targetDep.sort.print

	Lib:Header("Missing dep in " + src.path)
	targetDep->x
		if (!srcDep.contains(x)) {
			groupId=x.before(":")
			artifactId=x.after(":").before(":")
			version=x.after(":").after(":")
			CreateDependency(groupId, artifactId, version)->line println(line)
		}
	|

	Lib:Header("Missing dep in " + target.path)
	srcDep->x
		if (!targetDep.contains(x)) {
			groupId=x.before(":")
			artifactId=x.after(":").before(":")
			version=x.after(":").after(":")
			CreateDependency(groupId, artifactId, version)->line println(line)
		}
	|

/DiffPoms			



# Create pom summary as dictionary
# --
	P(1,Pom.first) as File => f

	dict=Dict
	dict.dep=List
	dict.file=f
	CreateSummary(f)->line
		if (line.startsWith("create ")) {
			dict.set("create",line.after(" "))
		} else if (line.startsWith("dep ")) {
			dict.dep.add(line.after(" "))
		}
	|
	dict
//CreateSummaryDict



# Update all git modules
# --
	P(1,Dir)=>currentDir
	Git:UpdateSubmodules(currentDir)
/UpdateSubmodules



# File header
# --
	P(1) as File=>file
	P(2) as String=>s

	file.append("")
	file.append(s)
	file.append("-".times(s.length))
//FileHeader



# For all pom files under current directory, create summaries of dependencies
# and mark local dependencies between pom files
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => includeSubmodules

	Lib:TmpFile("summaryAll","txt") => resultFile
	if(resultFile.exists) resultFile.delete

	FileHeader(resultFile,"Summarizing all pom*.xml found under " + currentDir.path + "  " + Date.fmt)
	resultFile.append("")
	resultFile.append("Dependencies:")
	resultFile.append("  '*' means created by local pom file")
	resultFile.append("  'E' means inconsistent versions between dependency and local pom file")
	resultFile.append("  'X' means starts with GetGroupId (" + GetGroupId + ") but not matching local pom")
	resultFile.append("")


	list=List
	Pom(currentDir, includeSubmodules)->f
		list.add(CreateSummaryDict(f))
	|
	list->summary
		# for each dependency, search through the summaries, to see if 
		# any of them create that dependency
		FileHeader(resultFile,summary.create)
		resultFile.append(summary.file.path)

		summary.dep->dep
			prefix="   "
			if (dep.startsWith(GetGroupId)) prefix=" X "
			extra=""
			
			Inner{
				list->x
					reject(x==summary)
					if (x.create.beforeLast(":")==dep.beforeLast(":")) {
						# artifact match (independent of version)
						prefix=" * "
						if (x.create.afterLast(":") != dep.afterLast(":")) {
							# versions differ
							prefix=" E "
							extra="  --  should be " + x.create.afterLast(":")
						}
					}
			}
			resultFile.append(prefix + dep + extra)
	|
	resultFile.append("")


	# List all dependecies (not including submodules), sorted and unique, to reveal differing versions
	allDep=List
	Pom(currentDir,false)->f
		CreateSummaryDict(f).dep->dep
			allDep.add(dep)
	|

	FileHeader(resultFile,"All dependencies from the POM files (not submodules)")
	allDep.sort.unique->dep
		resultFile.append("   " + dep)
	|
	resultFile.append("")

	Lib:e(resultFile)
/ShowSummaryAll



# test-compile all pom files (except git submodules)
# --
	P(1,Dir) as Dir => currentDir
	P(2,true) as boolean => showErrors

	Pom(currentDir,false)->f
		Lib:Header(f.path)
		result = Lib:run(List("cmd","/c","mvn","-f", f.path, "clean","package","-U"), null, true)

		if(result.exitCode==0) println("   OK") else println("   ERROR")

		if (showErrors) {
			lines = result.stdout + result.stderr
			lines->line
				if (line.contains("[ERROR]")) Lib:ShowText(line)
		}

/CompileAll



# Run deploy on all pom files (except git submodules), to update repo
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => showErrors

	Sequence(
		List("clean","package","-U")
		List("deploy")
	) => MavenArgs

	Pom(currentDir,false)->f
		Lib:Header(f.path)

		MavenArgs->args
			cmd=List("cmd","/c","mvn","-f", f.path) + args
			println(cmd.concat(" "))

			result = Lib:run(cmd, null, true) 

			if(result.exitCode==0) println("   OK") else println("   *** ERROR ***")

			if (showErrors) {
				lines = result.stdout + result.stderr
				lines->line
					if (line.contains("[ERROR]")) Lib:ShowText(line)
			}

/DeployAll



# Run "mvn clean" for all pom-files, to delete temporary files
# --
	P(1,Dir) as Dir => currentDir
	Pom(currentDir,false)->f
		println(f.path)
		cmd=List("cmd","/c","mvn","-f",f.path,"clean")
		Lib:run(cmd,null,true)
/CleanAll


# Show pom files which have no java source files under the pom directory 
# --
	P(1,Dir) as Dir => currentDir

	fsep=Sys.fileSeparator

	Pom(currentDir,false)->f
		count=Inner{
			f.dir.allFiles("*.java")->javaFile
				reject(javaFile.path.contains(fsep+"target"+fsep))
				out(1)
			| _.length
		}
		report(f, f.path, count)
/NoJava



# Version edit pom file
# 
# Modify artifact version for pom files where groupId and optional artifactId matches.
# Also modify dependencies to that same version, where groupId and artifactId (if defined), matches
# Returns modified list of lines, or null if no changes
# --
	P(1) as File => pomFile
	P(2) as String => groupId
	P(3) as String? => artifactId
	P(4) as String => VERSION
 
	buf=AutoEdit:EditBuffer(pomFile.read(false))

	buf.match("<groupId>",10)
	if (buf.line.contains(">"+groupId+"<")) {
		ok=true
		if (artifactId != null) {
			buf.match("<artifactId>",3) 
			ok = buf.line.contains(">" + artifactId + "<")
		}
		if (ok) {
			buf.match("<version>",3)
			line=buf.line
			line=line.before("<version>") + "<version>" + VERSION + "</version>" + line.after("</version>")
			buf.write(line)
			buf.next
		}
	}

	buf.match("<dependencies>")
	loop
		break(!buf.matchOptional("<groupId>" + groupId + "</groupId>")) 
		ok=true
		if (artifactId != null) {
			buf.match("<artifactId>",3)
			ok = buf.line.contains(">"+artifactId+"<")
		}
		if (ok) {
			buf.match("<version>", 3)
			line=buf.line
			line=line.before("<version>") + "<version>" + VERSION + "</version>" + line.after("</version>")
			buf.write(line)
		}
	|

	if (buf.isModified) {
		# Verify still valid XML
		XML:Parse(buf.out)
		# return modified file content
		buf.out
	} else {
		null
	}
/VersionEditPom



# Update version for all pom*.xml under current directory
# --
	P(1,Dir) as Dir => currentDir
	P(2, Input("groupId").get) as String => groupId
	P(3, readLine("artifactId (blank for all)")) as String? => artifactId
	P(4, readLine("new version")) as String => version
	P(5, true) => verbose

	if (artifactId=="") artifactId=null

	Maven:Pom(currentDir,false)->f
		if (verbose) println(f.path)
		
		lines=Maven:VersionEditPom(f, groupId, artifactId, version)
		if (lines==null) {
			if (verbose) println("   No change")
			assert(false)
		}
		
		if (verbose) println("   UPDATED")
		Lib:PreserveFileLineSeparator(f).create(lines)
/VersionEditAllPom


# Change dependency group id's
# NOTE: depends on proper format, as it uses line logic, not XML parser, since XML parser PP is incomplete
# 
# (Developed for the Tomcat10 script)
# --
	P(1) as File => pomFile
	P(2) as Dict => map   # key = from, value = to

	buf=AutoEdit:EditBuffer(pomFile.read(false))

	buf.match("<dependencies>")
	loop
		break(!buf.matchOptional("<dependeny>"))
		buf.match("<groupId>",2)
		line=buf.line

		# check for improper format
		if (line.count("<groupId>") != 1 || line.count("</groupId>") != 1) {
			println(pomFile.path)
			println("Invalid line: " + line)
			println("Should contain exactly one <groupId> and one </groupId>")
			error("aborting")
		}

		groupId = line.after("groupId>").before("</groupId").trim
		if (map.has(groupId)) {
			line=line.past("<groupId>") + map.get(groupId) + line.from("</groupId>")
			buf.write(line)
		}
	|

	if (buf.isModified) {
		# Verify that it is still valid XML (crashes if not)
		XML:Parse(buf.out)
		# return modified file content
		buf.out
	} else {
		null
	}
//ChangeDepGroupIds


# Change dependency groupId for all pom files (not submodules)
# (See Tomcat10 script)
# --
	P(1,Dir) => currentDir
	P(2,Dict) => map

	Pom(currentDir,false)->f
		lines=ChangeDepGroupIds(f, map)
		if (lines != null) {
			# updated version
			println("CHANGED: " + f.path)
			Lib:PreserveFileLineSeparator(f).create(lines)
		}
/ChangeDepGroupIdsAll


# Get version info for all non-submodule pom files
# --
	P(1,Dir) => currentDir

 	Pom(currentDir,false)->f
		XML:Parse(f.read).first => node
		groupId = node.subNode("groupId").getContent
		artifactId = node.subNode("artifactId").getContent
		version = node.subNode("version").getContent
		file = f
		out(SymDict(groupId, artifactId, version, file))
//GetVersionInfo




# Modify all non-submodule pom files version, adding 1 to given level
# Note level 0 is the far right number, 1 is the one to the left and so on. 
# Handles -SNAPSHOT.
# --
	P(1,Dir) as Dir => currentDir
	P(2,0) => level

	GetVersionInfo(currentDir) -> dict
		version = Util:Version(dict.version)
		version.increase(0)
		version=version.toString
		println("Converting",dict.artifactId, ":", dict.version,"to",version)
		VersionEditAllPom(Dir, dict.groupId, dict.artifactId, version, false)

/VersionIncrement


# Modify all non-submodule pom files to -SNAPSHOT, and internal references as well
# --
	P(1,Dir) => currentDir

	GetVersionInfo(currentDir) -> dict
		version=dict.version
		if (!version.endsWith("-SNAPSHOT")) {
			version=version+"-SNAPSHOT"
			println("Add SNAPSHOT",dict.artifactId,":",dict.version,"->",version)
			VersionEditAllPom(Dir, dict.groupId, dict.artifactId, version, false)
		}
/UseSNAPSHOT


# Modify all non-submodule pom files by removing -SNAPSHOT
# --
	P(1,Dir) => currentDir

	GetVersionInfo(currentDir) -> dict
		version=dict.version.before("-SNAPSHOT")
		if (version != dict.version) {
			println("Removing SNAPSHOT",dict.artifactId,":",dict.version,"->",version)
			VersionEditAllPom(Dir, dict.groupId, dict.artifactId, version, false)
		}
/RemoveSNAPSHOT
