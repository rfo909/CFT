# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# All pom files under current dir
# --
    Dir.allFiles("pom*.xml")
/Pom

# Get first line with a certain pattern
# --
    P(1) => pomFile
    P(2, readLine("Enter pattern")) => pattern
    pomFile.read->line
        if (line.contains(pattern)) {
            out(line)
            break
        }
//GetFirst

# Select Pom file
# --
    files=Pom
    files->f
        println(f.path)
    |
    Lib:SelectOptions(files, Lambda{P(1).path}, Lambda{P(1)})
//SelectFile

# Get build version for pom file
# --
    GetFirst(P(1),"<version>")
/BV

# Get groupId for pom file
# --
    GetFirst(P(1),"<groupId>")
/GI

# Get artifactId for pom file
# --
    GetFirst(P(1),"<artifactId>")
/AI


# Create summary of pom file detailing what artifact it creates, and dependencies
# --
	P(1, Pom.first) as File=>f
	XML:Parse(f.read).first => node

	out("file " + f.path)
	s=node.subNode("groupId").getContent 
		+ ":" + node.subNode("artifactId").getContent 
		+ ":" + if(node.subNode("version") != null, node.subNode("version").getContent, "UNKNOWN")
	out("create " + s)
	node.subNode("dependencies").subNodes("dependency")->dep
		s=dep.subNode("groupId").getContent 
			+ ":" + dep.subNode("artifactId").getContent
			+ ":" + if(dep.subNode("version") != null, dep.subNode("version").getContent, "UNKNOWN")
		out("dep " + s)

/CreateSummary
	

# Create pom summary as dictionary
# --
	P(1,Pom.first) as File => f
	dict=Dict
	dict.dep=List
	dict.file=f
	CreateSummary(f)->line
		if (line.startsWith("create ")) {
			dict.set("create",line.after(" "))
		} else if (line.startsWith("dep ")) {
			dict.dep.add(line.after(" "))
		}
	|
	dict
/CreateSummaryDict


# For all pom files under current directory, create summaries of dependencies
# and mark local dependencies between pom files
# --
	P(1,Dir) => dir

	println
	Lib:Header("Summarizing all pom*.xml found under " + dir.path + "  " + Date.fmt)
	println
	println("Dependencies:")
	println("  '*' means created by local pom file")
	println("  'E' means inconsistent versions between dependency and local pom file")
	println("  '-' means external dependency")
	println


	list=List
	allDep=List
	Pom->f
		list.add(CreateSummaryDict(f))
	|
	list->summary
		# for each dependency, search through the summaries, to see if 
		# any of them create that dependency
		Lib:Header(summary.create)
		println(summary.file.path)

		summary.dep->dep
			allDep.add(dep)
			prefix=" - "
			
			Inner{
				list->x
					reject(x==summary)
					if (x.create.beforeLast(":")==dep.beforeLast(":")) {
						# artifact match (independent of version)
						prefix=" * "
						if (x.create.afterLast(":") != dep.afterLast(":")) {
							# versions differ
							prefix=" E "
						}
					}
			}
			println(prefix + dep)
	|
	println
	
	# List all dependecies, sorted and unique, to reveal differing versions
	Lib:Header("All dependencies from the POM files")
	allDep.sort.unique->dep
		println("   " + dep)
	|
	println
/ShowSummaryAll
