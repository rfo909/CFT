# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Readme
<<< EOF
-------------------------------------------------------------------
Creating an investigation log when working with finding out why
a system behaves as it does. Uses Sys.lastResult to obtain
data.

To start new log or save existing, just open the LogFile
in an editor.

(2023-12-18 RFO changed to be Markdown compatible, for cut and
paste into JIRA etc)
-------------------------------------------------------------------
>>> EOF
/Readme


# Create header as list of lines
# --
    P(1,"Header") => header
    P(2,"-") => lineChar
    "-".times(header.length) =>line
    List("",header,line,"")
/Header   

# The investigation logs are stored in text filed under this directory
# --
    Sys.homeDir.sub("investigate.d") =>dir
    if(!dir.exists, dir.create)
    dir
//InvDir

# Current topic
# --
    t=Db2:Get("Investigate","topic:" + Sys.sessionUUID)
    if (t==null) {
        t = Db2:Get("Investigate","topic","Default")
    }
    t
/GetCurrentTopic

# Change topic
# --
    curr=Db2:Get("Investigate","topic")
    
    list = GetTopics
    count=0
    Inner {
        list->t
        file=LogFile(t)
        age=Date.diff(Date(file.lastModified))
        age = if (age.asDays <= 30, "* " + age, "  " + age)
        name=(t+" ".times(80)).first(40)
        println( ("   "+count).last(3)+": " + name + " " + age)
        count=count+1
    }

    if (list.empty) {
        readLine("Enter name of first topic").trim => name
        error(name=="","Invalid topic name")
        Db2:Set("Investigate","topic",name)
        Db2:Set("Investigate","topic:"+Sys.sessionUUID,name)
    } else {
        x = if (curr==null) {
            readLine("Enter number, or enter name of new topic")
        } else {
            readLine("Enter number, or new topic (Enter for current: " + curr + ")")
        }
        x=x.trim.replace(" ","_")
        name=x
        if (x.?parseInt) {
            name=list.nth(x.parseInt)
        }
        if (name.length==0 && curr != null) {
            name=curr
        }
        error(name=="", "Invalid topic name")
        Db2:Set("Investigate","topic",name)
        Db2:Set("Investigate","topic:"+Sys.sessionUUID,name)
    }
/SetTopic



# List topics alphabetically
# --
    InvDir.files(Glob("*.txt"))->f
        out(Str(f.name,f))
    | _.sort->x
        out(x.data.name.beforeLast("."))
/GetTopics




# Get file for current topic
# --
    P(1,GetCurrentTopic) => topic
    
    topicFile=InvDir.file(topic.replace(" ","_") + ".txt")
    if (!topicFile.exists) {
        dateString = Date.setFormat("yyyy-MM-dd").fmt
        topicFile.create(Header(topic + " " + dateString))
    }
    topicFile
/LogFile





# Show todo list
# --
    P(1,"*todo*") => pattern
    LogFile.read->line
        assert(line.trim.toLower.contains(pattern))
        println(line.trim)
//ShowLines


# Get prompt color
# --
    Db2:Get(Sys.scriptId, "prompt_color", Curses:TxtCyan)
//PromptColor


# Select prompt color
# --
    error (!Curses:Enabled, "Colors not enabled. Run Curses:Enable")
    Db2:Set(Sys.scriptId, "prompt_color", Curses:SelectColor)
//SetPromptColor



# Create date header if new day
# --
    dbKey="date:" + GetCurrentTopic

    Date.setFormat("yyyy-MM-dd").fmt => today
    Db2:Get(Sys.scriptId,dbKey,"") => date
    if (date != today) {
        LogFile.append(List("",today,"=".times(today.length)))   # Markdown === under text gives Header1
        Db2:Set(Sys.scriptId,dbKey,today)
    }
//DateHeader




# Add prompt color to string
# --
    P(1,"?") => str
    PromptColor + str + Curses:Reset
//Prompt



# Input mode
# --
loop
    readLine(Prompt("[" + GetCurrentTopic + "] Enter text, 'c' to cat, Enter to quit or '?' for help")).trim =>cmd
    break(cmd=="" || cmd=="q" || cmd=="quit")

    if (cmd=="." || cmd.startsWith("..")) {
        # paste
        marker="."
        if (cmd.startsWith("..")) {
            marker=cmd.sub(2)
        }
        println("End-marker: '" + marker + "'")
        println("---")
        readLines(marker) =>lines
        if (lines.length>0) {
            DateHeader
            LogFile.append("")

            LogFile.append("```")       # Markdown
            Inner {
                lines->line LogFile.append(line) 
            }
            LogFile.append("```")

            LogFile.append("")
        }
        
    } else if (cmd=="?") { 
        Sequence(
            @
            @
            @ .                 - read pasted input lines, with end-marker '.'
            @ ..xxx             - read pasted input lines, with end-marker 'xxx'
            @ -                 - insert blank line
            @ ?                 - get help (this page)
            @
            @ h/header          - insert header
            @ d/date            - insert date/time
            @ t/topic/ch        - view / change topic
            @
            @ aloop             - enter Activity loop mode
            @ aset              - set Activity loop delay in minutes
            @
            @ todo              - show *TODO* lines
            @ c/cat             - display recent entries
            @ m/more          
            @ e/edit            - edit current file
            @ q/quit            - quit
            @
            @ col               - set prompt color
            @
        )->line 
            println("| " + line.trim)
    } else if(cmd=="h" || cmd=="header") { ## Header
        DateHeader
        LogHeader
    } else if (cmd=='d' || cmd=="date") { ## date/time stamp
        DateHeader
        LogFile.append(List("",Date.fmt))
    } else if (cmd=='t' || cmd=="topic" || cmd=="ch") { ## change topic
        SetTopic
    } else if (cmd=="todo") {
        ShowLines("*todo*")
    } else if(cmd=='c' || cmd=="cat") { ## cat
        Show
    } else if (cmd=="aloop") { ## activity loop
        DateHeader
        ALoop
    } else if (cmd=="aset") { # Change activity loop delay
        ALoopSet
    } else if(cmd==".m" || cmd=='m' || cmd=="more") { ## more
        DateHeader
        Lib:m (LogFile)
    } else if(cmd=="@e" || cmd=='e' || cmd=="edit") { ## edit 
        Edit
    } else if (cmd=='-') {
        DateHeader
        LogFile.append("")
    } else if (cmd=='col') {
        SetPromptColor
    } else {
        DateHeader
        LogText(cmd)
    }
    
/InputMode




# Log data
# --
    Sys.lastResult =>res
    getType(res)=="List" =>isList

    if(isList) {
        readLine("Element number (Enter for all)") =>num
        if(num.?parseInt) {res.nth(num.parseInt) =>res}
    }

	# if list of Sys.Row, create nice formatting
	isRow=false
	if (getType(res)=="List") {
		isRow=true
		Inner{
			res->x 
			if(getType(x)!="Row") {
				isRow=false break 
			} 
		}
		if (isRow) {
			res=Lib:FormatRows(res)
		}

	}
		

    List =>list
    list.add("```")      # Markdown
    res->x 
        list.add("# " +x) 
    |
    list.add("```")
    
    DateHeader
    LogFile.append(list)
/LogData


# Add line to LogFile
# --
    P(1,readLine("Enter comment")) => line
    Date.setFormat("HH:mm").fmt + " " + line + "  " => line   ## two spaces at end of line produces breaks in Markdown paragraphs
    LogFile.append(line)
/LogText


# Log pasted text
# --
    readLine("Type end marker, or just press Enter to use '.'").trim =>endMarker
    if(endMarker=="",".",endMarker) =>endMarker
    println("End-marker: '" + endMarker + "'")
    println("---")
    readLines(endMarker) =>lines

    LogFile.append("")

    LogFile.append("```") # Markdown
    lines->line LogFile.append(line) |
    LogFile.append("```")

    LogFile.append("")
/LogPastedText


# Create header
# --
    header = readLine("Enter header")
    LogFile.append(Header(header))
/LogHeader


# Show lines 
# --
    LogFile.read.last(500)->line 
		if (line.trim=="" || line.contains("  ") || line.contains("|")) 
			println(line) 
		else 
			Lib:ShowText(line,false)
    |
    println
/Show

Lib:e (LogFile)
/Edit


# Alarm
# --
    P(1,3)=>count
    Std.Data.each(1,count)->x
        println("ALARM!!" + Sys.uchar(7))
        Sys.sleep(1500)
//Alarm




# Activity loop
# --
    P(1,false) => minuteBeep
    Db2:Get(Sys.scriptId,"ALoop_minutes",5) => minutes

    start=curr=currentTimeMillis
    Date.setFormat("yyyy-MM-dd").fmt + "_log" => key

    LogFile.append("")

    
    Inner{
        LogFile.read.last(100)->line println("| " + line)
    }
    println("---")
    println("[Interval: " + minutes + " minutes]")
    
    loop
        if (currentTimeMillis - start >= minutes*60000) {
            Alarm(1)

            readLine("Activity / blank to quit") => line
            break(line.trim=="")
            LogText(line)

            Inner{
                LogFile.read.last(100)->line println("| " + line)
            }
            println("---")

            start=curr=currentTimeMillis
        } else {
            if (currentTimeMillis > curr+60000) {
                curr=curr+60000
                println("" + if(minuteBeep,Sys.uchar(7),"") + ((curr-start)/60000) + "/" + minutes)
            }
            Sys.sleep(3000)
        }
/ALoop

    
# Change ALoop delay in minutes
# --
    currVal=""+Db2:Get(Sys.scriptId,"ALoop_minutes",5)
    Input("Enter ALoop number of minutes").setCurr(currVal).get.parseInt => minutes
    Db2:Set(Sys.scriptId,"ALoop_minutes",minutes)
/ALoopSet



