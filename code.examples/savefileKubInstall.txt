# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
2023-01 RFO
-----------
This one kind of works, but it is much simpler using KubRancher, which
spins up Rancher, then kubernetes

Old
---

https://phoenixnap.com/kb/install-kubernetes-on-ubuntu

Complete script for setting up Kubernetes cluster.

Start with configuring the Hosts and Targets functions, then
run
    PrepareInstallAll

Then run the following functions one by one, monitoring
output. The join command for workers is stored in a text file
in step where the master is initialized, as is stdout and stderr
of following steps.

2021-12 Modified for multiple masters, but missing way of joining
together multiple masters to form single cluster. 

>>> EOF
/Readme


# Ask for target
# --
    Input("Enter ssh target (user@host)").get
//GetTarget


# Master hosts
# (Should ideally work with more than one)
# --
    "123".chars->c out("kub"+c+".v")
/MasterHosts

# Worker hosts
# --
    "456".chars->c out("kub"+c+".v")
/WorkerHosts


# All hosts
# --
    MasterHosts + WorkerHosts
/AllHosts


# SSH user
    "roar"
/SSHUser


# HostTarget
# --
    P(1)=>host
    SSHUser+"@"+host
/HostTarget


# Convert list of hosts to list of targets
# --
    P(1)=>hosts
    hosts->host out(HostTarget(host))
/TargetList


# Install docker
# --
    P(1,GetTarget) => target
    P(2,false) => debug

    DockerSwarm:Install(target)
    SSH:sudo(target,'systemctl enable docker', false, debug)
    SSH:sudo(target,'systemctl start docker', true, debug)
//InstallDocker



# Add software repositories
# --
    P(1,GetTarget) => target
    P(2,false) => debug

    SSH:sudo(target,'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add', false, debug)
    SSH:sudo(target,'apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"', false, debug)
//InstallSoftwareRepos




# List all kubernetes versions ....
# --
    lines = Dir.runCapture("curl -s https://packages.cloud.google.com/apt/dists/kubernetes-xenial/main/binary-amd64/Packages".split)
    lines -> line
    assert(line.contains("Version"))
    out(line)
/KubShowVersions



# Kubernetes version (important for Rancher)
# --
    "1.19.8-00"
/KubVersion


# Kubernetes Installation Tools
# --
    P(1,GetTarget) => target
    P(2,false) => debug

    "kubeadm kubelet kubectl".split->app
        println(""+target+": installing " + app + "=" + KubVersion)
        SSH:sudo(target,'apt-get install -y --allow-downgrades ' + app + "=" + KubVersion, false, debug)
    |
    println("Verifying install getting kubeadm version")
    SSH:sudo(target,'kubeadm version', false, false).stdout->line
        println(line)
    |
/InstallationTools


# Verify kubeadm
# --
    P(1,GetTarget) => target
    P(2,false) => debug
    SSH:sudo(target,'kubeadm version',false,false).stdout->line 
        println(line) 
/VerifyKubeadm


# Turn off swapping
# --
    P(1,GetTarget) => target
    P(2, false) => debug

    println(""+target+": turning off swap")
    SSH:sudo(target,'swapoff -a', false, debug)

    # Also need to modify /etc/fstab, using CFT on remote host
    Java:VerifyCFT(target)
    Date.setFormat("yyyy-MM-dd").fmt => today

    cftScript=Lib:TmpFile("cft")
    cftScript.create(Sequence(
        @ File("/etc/fstab")=>f
        @ File("fstab.txt.backup_<<today>>").copyFrom(f)
        @ f.read->line
        @    if (line.split.contains("swap"))
        @       out("# " + line)
        @    else
        @       out(line)
        @ | => newLines
        @ f.create(newLines)
        @ /run
    ).mergeExpr)
    SSH:copy(cftScript, target, "./CFT/savefileTest.txt")
    SSH:sudo(target, './RunCFT Test run ":quit"', false, false)
    cftScript.delete
//SwappingOff


# Run all above!!
#
# May take a while. Not parallelized, as we want exceptions 
# from SSH:sudo to stop the show, if something fails.
# --
    P(1,TargetList(AllHosts)) => targets
    
    targets->target
        InstallDocker(target)
        InstallSoftwareRepos(target)
        InstallationTools(target)
        SwappingOff(target)
/PrepareInstallAll



# Assign host names with hostnamectl
# --
    debug=true
    
    i=0
    TargetList(MasterHosts)->target
        SSH:sudo(target,"hostnamectl set-hostname master"+i, false, debug)
        i=i+1
    |
    i=0
    TargetList(WorkerHosts)->target
        SSH:sudo(target,"hostnamectl set-hostname worker"+i, false, debug)
        i=i+1
    |
/AssignHostnames




# Initialize Kubernetes on first master node
# --
    debug=false
    MasterHosts.first->host
        Lib:Header(host)
        HostTarget(host) => masterNode
        
        SSH:sudo(masterNode,'sudo kubeadm init --pod-network-cidr=10.244.0.0/16',false,debug).stdout => stdout
        File("KUB_Master_init_" + host + ".txt")=>f
    f.create(stdout)
        ShowMainInitOutput
        println("--- Stdout stored: " + f.path)
/InitMasterNode



# Show KUB_Master_init log
# --
    Dir.files("KUB_Master_init*.txt")->file
        Lib:Header(file.name)
        file.read->line println(line)
/ShowMainInitOutput


# Make $HOME/.kube config on first master host
# --
    debug=false
    MasterHosts.first->host
        Lib:Header(host)
        HostTarget(host) => masterNode
        
        SSH:run(masterNode,'sudo mkdir -p $HOME/.kube',true, debug)
        SSH:run(masterNode,'sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config', false, debug)
        SSH:run(masterNode,'sudo chown $(id -u):$(id -g) $HOME/.kube/config', false, debug)
/CreateHomeKubeConfig



# Copy $HOME/.kube config from first master
# --
    debug=false
    target=HostTarget(MasterHosts.first)

    SSH:run(target,'sudo tar cf kube.tar .kube', true, debug)
    Dir(Sys.environment.HOME) => HOME

    Util:Run("scp " + target + ":./kube.tar .",HOME)    
    Util:Run("tar xvf ./kube.tar",HOME)

//LocalKubeConfig
    

# Install kubeadm + kubectl on local host
# --
    Lib:Header("Adding repo")
    script=Sequence(
        @ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
        @ apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    )


    Lib:TmpFile("script","sh") =>f
    f.create(script)
    Util:Run("sudo sh " + f.path)
    f.delete

    Lib:Header("Installing tools")

    "kubeadm kubectl".split->app
        println("Installing " + app + "=" + KubVersion)
        Util:Run('sudo apt-get install -y --allow-downgrades ' + app + "=" + KubVersion)
    |
//LocalKubeTools



# Make local host install of kube tools
# --
    LocalKubeConfig
    LocalKubeTools
/LocalToolsInstall



# Pod network - flannel
# --
    debug=false
    MasterHosts.first->host
        Lib:Header(host)
        HostTarget(host) => masterNode

        SSH:run(masterNode,'kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml', false, debug) => result
        File("KUB_Flannel_init_out.txt").create(result.stdout)
        File("KUB_Flannel_init_err.txt").create(result.stderr)

        result.stdout->line println(line)
/DeployPodNetwork


# Verify Pod network
# --
    debug=false
    MasterHosts.first->host
        Lib:Header(host)
        HostTarget(host) => masterNode

    SSH:sudo(masterNode,'kubectl get pods --all-namespaces', false, debug).stdout->line
        println(line)
/VerifyPodNetwork



# Get join command for cluster
# --
    P(1,false) => forMasterNode
    target=HostTarget(MasterHosts.first)

    SSH:run(target,"kubeadm token create --print-join-command").stdout->line
        assert(line.contains("join"))
        out(line)
        break
    | _.first=>joinCommand

    if (forMasterNode) {
        joinCommand=joinCommand + " --control-plane"
    }
    joinCommand
//GetJoinCommand




# Join worker nodes to network
# --
    P(1,true) => debug

    cmd=GetJoinCommand

    Lib:Header("Complete command")
    println(cmd)

    WorkerHosts->host
        Lib:Header(host)
        HostTarget(host) => worker

        SSH:sudo(worker,cmd,false,debug) => result
        File("KUB_Worker_join_" + host + ".txt") => f
        f.create(result.stdout)
        result.stderr->line f.append("ERR " + line) |
/JoinWorkers



# Join additional master nodes to network
# Does not work, gets error messages:
#
   # unable to add a new control plane instance a cluster that doesn't have a stable controlPlaneEndpoint address
   # 
   # Please ensure that:
   # * The cluster has a stable controlPlaneEndpoint address.
   # * The certificates that must be shared among control plane instances are provided.
#
# --
    P(1,true) => debug

    cmd=GetJoinCommand(true)

    Lib:Header("Complete command")
    println(cmd)

    mh = MasterHosts - MasterHosts.first

    mh->host
        Lib:Header(host)
        HostTarget(host) => master

        SSH:sudo(master,cmd,false,debug) => result
        File("KUB_Master_join_" + host + ".txt") => f
        f.create(result.stdout)
        result.stderr->line f.append("ERR " + line) |
/JoinMasters


# Show nodes (kubectl get nodes)
# --
    debug=false
    host=MasterHosts.first

    Lib:Header(host)
        
    SSH:sudo(HostTarget(host),'kubectl get nodes', false, debug).stdout->line
        println(line)
/ShowNodes



# File to add log from Call function below
# --
    Lib:DirPrivate.file("kubctl_log.txt")
/KubctlLogFile


# Run kubectl or kubeadm commands locally and capture all output.
#
# To configure kubectl for local use, install it, then copy the /etc/kubernetes/admin.conf under $HOME/.kube/config
# and assure access with chmod +r
# --
    P(1,Dir) => currDir
    P(2) => command

    log=KubctlLogFile
    
    if (command==null) {
    readLine("Enter kubectl command, blank to abort") => command
    error(command=="","Aborting")
    }
       
    if (command.startsWith("kubectl ")) command=command.after(" ")


    c=">>> kubectl " + command
    s="-".times(c.length)
    log.append(List("",s,c,s,""))

    debug=false
    currDir.runCapture(("kubectl " + command).split) => output

    log.append(output)
    Inner{
      count=Term.h-3
      output->line
         println(line)
         count=count-1
         if (count<=0) {
            readLine("More?")=>str
            break(str.toLower=="q")
            count=Term.h-3
         }
    }
/kubectl


# Loop
# --
    log=KubctlLogFile

    loop
        readLine("kubectl command, blank to abort, # for comment, kf for file, h/h2 for history") => command
        error(command.trim=="", "Aborting input loop")
        if (command=="h") {h continue}
        else if (command=="h2") {h2 continue}
        else if (command=="kf") {kf continue}
        else if (command==".") {
            command=Db2:Get(Sys.scriptId,"kubectl_lastCommand",null)
            if (command==null) continue
        }
        else if (command.startsWith("#")) {
            log.append(List("#",command,"#"))
            continue
        }

        kubectl (Dir, command)
/k

# Include config file or any text file in log
# --
    P(1,readLine("Enter path"))=>path
    P(2,Dir)=>currDir
    currDir.file(path)=>f
    if (f.exists) {
        log=KubctlLogFile
        log.append("")
        log.append("# " + f.path)
        log.append("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF")
        log.append(f.read)
        log.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF")
    }
/kf
        

# kubectl history
# --
     KubctlLogFile.read->line assert(line.startsWith(">>> ")) println(line)
/h

KubctlLogFile.read->line println(line)
/h2
