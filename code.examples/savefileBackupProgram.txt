# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Readme
<<<< EOF
Run incremental backup to some (shared/mounted) directory.
Writes encrypted log file, which tells where all data are stored.
All file data are encrypted also.

Steps
-----
Mount remote directory or plug in backup disk.
Navigate to target directory

> SetTargetDir

Navigate to directory to back up.

> Backup

Restore
-------
Ensure target dir correct
Navigate to directory to restore to

> Restore

This lists the available backups (log files). Enter name
of one. Then you are asked for a path prefix, which must
end with "/" (Linux). To restore all just type "/".

Enter password when prompted.


What is backed up
-----------------
Files starting with dot are backed up, but directories
starting with dot are not. 

In addition, you can create .nobackup-files to block
a list of local directories. The CFT home directory
contains a .nobackup-file with a single line

target

This prevents the target directory from being backed up,
as it contains generated content.


>>>> EOF
/Readme


# Report current target directory
# --
    Lib:Header("Target directory")
    found=TargetDir.exists
    println(TargetDir.path,if(found,"","NOT FOUND"))
    println
    if (!found) println("--> Navigate to target directory, then run SetTargetDir")
    
    println
    println
/onLoad


# Set target directory
# --
    P(1,Dir) => targetDir
    error(targetDir==null,"Parameter 1 must be target dir")
    Db2:Set("Backup","targetDir",targetDir)
    println("Backup is stored in: " + targetDir.path)
/SetTargetDir



# Get target directory
# --
    Db2:Get("Backup","targetDir", null) => d
    if(d==null,d=Dir)
    d
/TargetDir



# Verify password by checking for signal file, then convert to Binary object
# --
    P(1)=>password
    Std.Util.Encrypt(password.getBytes("UTF-8")).processString("this is a test") => hexString
    pwdFile=TargetDir.file("pwd"+hexString)
    if (!pwdFile.exists) {
        readLine("Unknown / new password. Confirm use by typing 'yes'") => conf
        error(conf != "yes","Aborting")
        pwdFile.create(Date.fmt)
    }
    password.getBytes("UTF-8")
//verifyAndConvertPassword


# Status file
# --
    P(1) => backupName
    TargetDir.file(backupName)
//StatusFile


# Create salt string
# --
    P(1,Sys.currentTimeMillis) => x
    Std.Util.randomBinary(""+x).hex.first(8)
//Salt



# Reset current password
# --
    Vault:SessionSecretClear("Backup encryption password")
/ResetPassword



# Run full backup
# --
    P(1,Dir) => rootDir
	host=Prompt:GetHostName.before(".")
    P(2,"Backup"+"_"+rootDir.name + "_" + host) => backupName
    
    Lib:Header("Target directory")
    println(TargetDir.path)
    println
    println

    Input("Enter backup name").setCurr(backupName).get => backupName
    
    backupName=Date.setFormat("yyyy-MM-dd").fmt+"_"+backupName
    println("Backup name: " + backupName)
    
    password=Vault:SessionSecretGet("Backup encryption password")
    
    password=verifyAndConvertPassword(password)  # Now a Binary
  
    Dict.set("count",0).set("saved",0) => countDict

    StatusFile(backupName) => sf
    if (sf.exists) sf.delete
    
    processDir(password,rootDir,countDict,backupName)
/Backup


# Sort list of File 
# --
    P(1)->f out(Str(f.name,f)) | _.sort->x out(x.data)
//sortFiles

# Sort list of Dir 
# --
    P(1)->d out(Str(d.name,d)) | _.sort->x out(x.data)
//sortDirs


# Read .nobackup content if exists
# --
    P(1,Dir)=>dir
    file=dir.file(".nobackup")
    if (file.exists) Inner {
        file.read->line assert(line.trim.length > 0) out(line)
    } else {
        List
    }
//NoBackupDirs
    


# Process directory doing backup
# --
    P(1)=>password
    P(2)=>dir
    P(3)=>countDict
    P(4)=>backupName
    
    blockedDirs=NoBackupDirs(dir)
    
    statusLines=List
    sortFiles(dir.files)->f
        saltString=""+countDict.count
        tryCatch( 
            processFile(password,f,statusLines,saltString,countDict)
        ) => result
        if (!result.ok) {
            println(f.path)
            println("   " + result.msg)
        }
        countDict.set("count",countDict.count+1)
    |
    StatusFile(backupName).append(statusLines)
    
    sortDirs(dir.dirs)->d
        reject(d.name.startsWith("."))
        if (blockedDirs.contains(d.name)) {
            println("BLOCKED: " + d.path)
        } else tryCatch(
            processDir(password,d,countDict,backupName)
        )
    |

    println("#Files=" + countDict.count + " (saved=" + countDict.saved + ") " + dir.path)
//processDir



# Create BackupFile for a given hash string
# --
    P(1) => x  # hash hexstring
    TargetDir.sub("repo").sub(x.sub(0,2)).sub(x.sub(2,4)).sub(x.sub(4,6)).create.file(x)
//BackupFile


# Process file (backing it up)
# --
    P(1) => password
    P(2) => file
    P(3) => statusLines
    P(4) => saltBase
    P(5) => countDict
    
    key=file.path + ";" + file.length + ";" + file.lastModified + ";" + password.hex
    backupFile=BackupFile(key.hash)
    
    salt=Salt("logLine:"+saltBase)
    Std.Util.Encrypt(password,"p1"+salt) => enc1
    Std.Util.Encrypt(password,"p2"+salt) => enc2
    logLine=salt + ":" + enc1.processString(file.path) + ":" + enc2.processString(backupFile.name)
        
    # write to tmp file in given directory, to avoid partially written files, if errors occur
    backupFileTmp=File(backupFile.path+".tmp")
    
    if (!backupFile.exists) {
        println("Saving " + file.path)
        
        # write salt to separate file 
        File(backupFile.path+".salt").create(salt)

        file.encrypt(password, salt, backupFileTmp)
        
        backupFileTmp.move(backupFile)
        countDict.set("saved",countDict.saved+1)
    }
    statusLines.add(logLine)

    # Uncrypted metadata, to restore create-time and modified-time correctly,
    # written as separate file, to avoid changing the statusLines syntax
    
    metadataFile=File(backupFile.path+".meta")
    if (!metadataFile.exists && file.?getTimes) {
        data=file.getTimes  ### v3.2.4+
        metadataFile.create(Sys.syn(data))
    }

//processFile

        
# Restore or show content of backup
# --
    P(1,Dir) => targetDir
    P(2,false) => showContentOnly
    
    Inner {TargetDir.files->f println(f.name)}
    
    Input("Enter backup file name").get => fPath
    
    file=TargetDir.file(fPath)
    error(!file.exists,"No such file: " + fPath)
    
    pathPrefix=null
    if (!showContentOnly) {
        Input("Path prefix - should end with file separator, and not contain globbing").get => pathPrefix
        println
        Lib:Header("Summary")
        println("- Restoring content: " + pathPrefix + "*")
        println("- To current dir   : " + Dir.path)
        println
        ok=Lib:Confirm
        error(!ok,"Aborting")
    }
    
    password=Vault:SessionSecretGet("Backup encryption password")
    password=verifyAndConvertPassword(password)  # Now a Binary
    
    file.read->line
        salt=line.before(":")
        rest=line.after(":")
        
        Std.Util.Decrypt(password,"p1"+salt) => dec1
        Std.Util.Decrypt(password,"p2"+salt) => dec2

        path=dec1.processString(rest.before(":"))
        backupFileName=dec2.processString(rest.after(":"))
        #
        if (showContentOnly) {
            out(path)
        } else {
            # --- Restore file if matching pathPrefix ---
            match=if(Sys.isWindows, path.toLower.startsWith(pathPrefix.toLower), path.startsWith(pathPrefix))
            if (match) {
                backupFile=BackupFile(backupFileName)
                
                File(backupFile.path+".salt").read.first => fileSalt

                a=targetDir.path
                b=path.sub(pathPrefix.length)
                
                if (a.endsWith(Sys.fileSeparator)) a=a.sub(0,a.length-1)
                if (b.startsWith(Sys.fileSeparator)) b=b.sub(1)
                targetPath=a+Sys.fileSeparator+b
                #
                println(targetPath)
                
                resultFile=File(targetPath)
                resultDir=resultFile.dir
                if (!resultDir.exists) resultDir.create
                
                backupFile.decrypt(password,fileSalt,resultFile)
                
                metadataFile=File(backupFile.path+".meta")
                if (metadataFile.exists) {
                    data=Sys.eval(metadataFile.read.first)
                    resultFile.setTimes(data.created, data.modified, data.accessed)
                }
                
            }
        }
/Restore


# Show content of backup
# --
    Restore(null,true)
/ShowContent
        

# Test encrypting file
# --
    Std.Util.randomBinary("1") => password
    salt="salt"
    
    File("x.txt") => f1
    f1.create("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            +"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    
    File("y.txt") => f2
    f2.delete
    File("z.txt") => f3
    f3.delete
        
    f1.encrypt(password,salt,f2)
    f2.decrypt(password,salt,f3)
    
    # result
    (f1.hash==f3.hash)
//test


# The .noBackup files block this program from
# visiting a list of directories under current dir
# --
Dir.allFiles(".nobackup")->f
    f.read->line
        reject(line.trim.length==0)
        report(f.path,line)
/NoBackupFiles
