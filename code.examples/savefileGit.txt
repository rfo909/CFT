# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Helper
# --
    P(1) => cmd
	P(2,Dir) => currentDir
    Util:Run(cmd,currentDir)
//Run



# Adding a submodule
# --
	P(1,Dir) as Dir => currentDir

	if (!currentDir.file(".gitmodules").exists) {
		println("Must run in project root directory, where the .gitmodules file will be created!")
		println
		println(currentDir.path)
		println
		Lib:Confirm("Is this correct?") => ok
		error(!ok,"Aborting")
		currentDir.file(".gitmodules").touch  # must exist
	}
	Input("Enter sub-directory for submodules").setCurrCond("submodules").get => subDir
	currentDir.sub(subDir) => targetDir
	if (!targetDir.exists) targetDir.create

	Input("Enter git clone URL for new submodule").get => moduleUrl
	
	Run("git submodule add " + moduleUrl, targetDir)
/AddSubmodule	


# Get all git submodule directories 
# --
	P(1,Dir) as Dir => currentDir

	dict=Dict
	f=currentDir.file(".gitmodules")
	if (f.exists) {
		f.read->line
			assert(line.contains("path ="))
			s=line.after("=").trim 
			if (Sys.isWindows) {
				s=s.replace("/","\")
			}
			out(s)
	} else {
		println("WARNING: no .gitmodules file")
		List
	}
/Submodules


# Git submodule directories
# --
	P(1,Dir) as Dir => currentDir

	Submodules(currentDir)->path
		dir=currentDir.sub(path)
		out(dir)
/SubmoduleDirs



# Create branch
# --
    P(1,Input("Branch FROM").setCurrCond("master").get.trim) => fromBranch
    P(2,readLine("New branch name").trim) => newBranch

	Run("git pull origin")
    Run("git checkout " + fromBranch)
    Run("git pull origin " + fromBranch)
    Run("git branch " + newBranch)
    Run("git checkout " + newBranch)
/CreateBranch


# Delete local branch
# --
    P(1,readLine("Local branch to delete").trim) => branch

    error(branch=="master","Can not delete master")
    Run("git checkout master")
    Run("git branch --delete " + branch)
/DeleteLocalBranch



# List branches
# --
    Run("git branch")
/ShowBranches



# Initialize submodules in current project
# --
	P(1,Dir) as Dir => currentDir

	command="git submodule update --init"
	println(command)
	currentDir.run(command.split)
/InitSubmodules

        
    
# Update submodules according to .gitmodules in current dir
# --
	P(1,Dir) as Dir => currentDir
	P(2,Input("Enter glob pattern to match submodule(s)").setCurrCond("*").get) => modulePattern

	Submodules(currentDir)->path
		if (Glob(modulePattern).regex.match(path)) {
			command="git submodule update --remote " +  path
			println(command)
			currentDir.run(command.split)
		}
/UpdateSubmodules


# Restore changes in submodules
# --
	P(1,Dir) as Dir => currentDir
    P(2,Input("Enter glob pattern to match submodule(s)").setCurrCond("*").get) => modulePattern

	Submodules(currentDir)->path
        if (Glob(modulePattern).regex.match(path)) {
			targetDir=currentDir.sub(path)
            command="git restore ."
			println("Running", "'" + command + "'", "inside", targetDir.path)
			targetDir.run(command.split)
        }
/RestoreSubmoduleChanges


# Fetch git log
# --
	P(1,Dir) as Dir => currentDir

	currentDir.run("git","log")
/GetLog


# Check out some earlier commit in new branch
# --
	P(1,Dir) as Dir => currentDir
	P(2,readLine("Enter branch name")) as String => branchName
	P(3,readLine("Enter commit hex code")) as String => commit

	command=List("git","checkout","-b",branchName,commit)
	println(command.concat(" "))
	currentDir.run(command)
/GetPreviousCommit



# Show list of modified files under current directory, newest last
# --
	P(1,Dir) => currentDir
	P(2,Input("Glob").setCurrCond("*").get) => glob
	currentDir.runCapture("git","status",".")->line
		assert(line.trim.startsWith("modified:"))
		fname=line.after(":").trim
		file=Dir.file(fname)
		if (Glob(glob).match(file)) out(Int(file.lastModified, file))
	| _.sort->x 
		out(x.data)
/Modified


# Create tag and push it
# --
	P(1,Dir)=>currDir
	P(2,readLine("Enter tag"))=>tag
	error(tag.contains(" "), "Invalid tag")

	currDir.cd

	#println("** Creating tag " + tag)
	Run("git tag " + tag)

	#println("** Pushing tag to origin")
	Run("git push origin " + tag)

	#println("** Displaying tags")
	ShowTags
/CreateTag
	

# Show tags
# --
	Run("git tag")
/ShowTags

# Are there uncommitted changes?
# --
	P(1,Dir) => currDir
	hasChanges=true
	currDir.runCapture("git","status")->line
		if (line.contains("nothing to commit, working tree clean")) hasChanges=false
	|
	hasChanges
/HasChanges

		
# Merge branch into master (or other branch)
# --
	P(1,Dir) => currDir
	P(2,readLine("Branch to merge")) => branch
	P(3,"master") => targetBranch

	currDir.cd

	Run("git checkout " + targetBranch)
	Run("git pull origin " + targetBranch)
	UpdateSubmodules(currDir,"*")
	error(HasChanges,"There are changes to be committed before merge")

	Lib:Header("Merging " + branch + " into " + targetBranch)
	ShowTags
	println
	println("Setting a tag on master")
	
	CreateTag(currDir)

	println
	Run("git merge origin/" + branch)
	

/Merge


# Locate all files with conflict markers
# --
	P(1,Input("File glob").setCurrCond("*.java").get) => glob
	grep=Grep.match("<<<<<",">>>>>")
	Dir.allFiles(glob)->f
		assert(grep.fileCount(f)>0)
		report(f,f.path)
/Conflicts


# Search through output from merge for CONFLICT lines
# --
	println("Paste merge output lines, terminate with '.' on separate line")
	fileTypes=Dict
	readLines(".")->line
		assert(line.contains("CONFLICT"))
		fileTypes.set(line.afterLast("."),1)
		println(line)
	|
	fileTypes.keys->type
		println("*." + type)
	|
	
/SC