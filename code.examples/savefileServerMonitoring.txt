# Check remote directory status (new, deleted and changed files)
# --
	P(1,SSH:ReadSSHTarget) => target
	P(2,"/usr/bin") => path
	P(3,false) => verbose
	
	newData=Dict
	SSH:run(target,"ls -la " + path).stdout->line
		line.replace("^t".unEsc," ").split.keep(8).concat(" ") => ident  # file name but also links on format x -> y
		newData.set(ident,line.split.concat(" "))  # eliminating formatting
	|
	# load previous data
	key=target+":"+path
	
	oldData = Db2:Get(Sys.scriptId,key,Dict)
	
	if (verbose) println("Got " + oldData.keys.length + " old entries and " + newData.keys.length + " new entries")
	
	# show diff
	Inner{
		newData.keys->key
			if (!oldData.has(key)) {
				out("ADD: " + newData.get(key))
			} else {
				a=oldData.get(key)
				b=newData.get(key)
				if (a != b) {
					#out("OLD: " + a)
					out("CHG: " + b)
				}
			}
	} _=>result1
	
	Inner{
		oldData.keys->key
			if (!newData.has(key)) {
				out("DEL: "+data.get(key))
			}
	} _=>result2
	
	# Update base
	Db2:Set(Sys.scriptId,key,newData)

	result1 + result2
/GetDirStatus



# Call GetDirStatus for a single or list of ssh targets (user@host) and a list of paths for each target
# Returns list of Sys.row with the changes, additions and deletions (target, path, info). 
# --
	P(1,SSH:ReadSSHTarget) => targets  # user@host
	P(2,"/usr/bin") => paths
	P(3,Lib:DirPrivate.sub("ServerMonitoring").create.file("DirList.txt")) => outputFile

	outputFile.create(List(Date.fmt,""))

	ok=true
	targets->target
		paths->path
			result = ServerMonitoring:GetDirStatus(target, path)
			if (!result.empty) {
				ok=false

				h=target+":"+path
				outputFile.append(List("",h,"-".times(h.length)))
				outputFile.append(result)

				Lib:Header(h)
				Inner{
					result->line println(line)
				}

				report(target,path,"CHANGED")
			} else {
				report(target,path,"OK")
			}
	| _=>rows
	println
	println(outputFile.path)

	Lib:ShowRows(rows)
	ok
/ProcessDirList	


# Fetch apt history file from remote servers and parse it, returns Dict with Date values for
# fields upgrade, unattendedUpgrade and distUpgrade
# --
	P(1) => targets  # user@host

	data=Dict
	
	targets->target
		localFile=Lib:TmpFile("apt-history","log")
		SSH:getFile(localFile,target,"/var/log/apt/history.log")
		time=null
		variant=null
		localFile.read->line
			if (line.startsWith("Start-Date:")) variant=null
			
			if (line.startsWith("Commandline:")) {
				if (line.contains("unattended-upgrade")) variant="unattendedUpgrade"
				else if (line.contains("dist-upgrade")) variant="distUpgrade"
				else if (line.contains("upgrade")) variant="upgrade"
			}
			if (line.startsWith("End-Date: ") && variant != null) {
				dateString=line.after(":").trim.split.concat(" ")  # avoid risk of tab
				Date.setFormat("yyyy-MM-dd HH:mm:ss").parse(dateString) => date
				data.set(variant,date)
				variant=null
			}
	|
	data
/GetAptHistory



# Call GetAptHistory and present a readable result
# --
	P(1,SSH:ReadSSHTarget) => targets
	
	data=GetAptHistory(targets)
	data.keys->key
		d=data.get(key)
		report(key, d.fmt, Date.diff(d)) # date and time
/ShowAptHistory
					
				
		
			
