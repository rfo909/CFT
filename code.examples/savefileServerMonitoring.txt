# Check remote directory status (new, deleted and changed files)
# --
	P(1,SSH:ReadSSHTarget) => target
	P(2,"/usr/bin") => path
	P(3,false) => verbose
	
	newData=Dict
	SSH:run(target,"ls -la " + path).stdout->line
		line.replace("^t".unEsc," ").split.keep(8).concat(" ") => ident  # file name but also links on format x -> y
		newData.set(ident,line.split.concat(" "))  # eliminating formatting
	|
	# load previous data
	key=target+":"+path
	
	oldData = Db2:Get(Sys.scriptId,key,Dict)
	
	if (verbose) println("Got " + oldData.keys.length + " old entries and " + newData.keys.length + " new entries")
	
	# show diff
	Inner{
		newData.keys->key
			if (!oldData.has(key)) {
				out("NEW: " + newData.get(key))
			} else {
				a=oldData.get(key)
				b=newData.get(key)
				if (a != b) {
					out("OLD: " + a)
					out("CHG: " + b)
				}
			}
	} _=>result1
	
	Inner{
		oldData.keys->key
			if (!newData.has(key)) {
				out("DEL: "+data.get(key))
			}
	} _=>result2
	
	# Update base
	Db2:Set(Sys.scriptId,key,newData)

	result1 + result2
/DirStatus


# Check DirStatus for a list of ssh targets (user@host) and a list of paths for each target
# --
	P(1) as List => targets  # user@host
	P(2) as List => paths

	ok=true
	targets->target
		paths->path
			result = ServerMonitoring:DirStatus(target, path)
			if (!result.empty) {
				ok=false
				report(target,path,"CHANGED")
				Lib:Header(target+":"+path)
				Inner{
					result->line println(line)
				}
			} else {
				report(target,path,"OK")
			}
	| _=>rows
	println
	println
	Lib:ShowRows(rows)
	ok
/ProcessDirList			
