# Converting a project to Tomcat10
# Run from project root directory
# --
	Lib:Header("Maven:CleanAll")
	Maven:CleanAll(Dir)

	Lib:Header("ProcessJavaFiles")
	ProcessJavaFiles

	Lib:Header("FixAxisPOMVersions")
	FixAxisPOMVersions

	Lib:Header("FixPOMGroupIds")
	FixPOMGroupIds

	Lib:Header("Maven:UseSNAPSHOT")
	Maven:UseSNAPSHOT(Dir)

	Lib:Header("Maven:VersionIncrement")
	Maven:VersionIncrement(Dir)

	Lib:Header("Automatic conversion done!")
	println
	Info->line println(line) |
	println

/Convert

# Info
# --
<<<< EOF
	Add dependencies to relevant POM's

		<!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.1.0</version>
			<scope>provided</scope>
		</dependency>

	Ready for Maven:DeployAll 
>>>> EOF
//Info


# Replace patterns for java
# --
	Dict
		.set("javax.servlet.", "jakarta.servlet.")
		.set("javax.el.", "jakarta.el.")
		.set("javax.websocket.", "jakarta.websocket.")
		.set("javax.annotation.", "jakarta.annotation.")

		.set(".httpclient3",".httpclient5")
		.set(".httpclient4",".httpclient5")

		# less likely
		.set("javax.persistence.", "jakarta.persistence.")
		.set("javax.ejb.", "jakarta.ejb.")
		.set("javax.jms.", "jakarta.jms.")
		.set("javax.ws.rs.", "jakarta.ws.rs.")
//ReplaceJavaCodePatterns


# Replace POM dependency group ids
# --
	Dict
		.set("javax.activation", "jakarta.activation")
		.set("javax.mail", "jakarta.mail")
		.set("javax.servlet", "jakarta.servet")
		.set("javax.validation", "jakarta.validation")
		.set("javax.xml", "jakarta.xml")
		.set("javax.xml.ws", "jakarta.xml.ws")
//ReplacePomGroupPatterns


# Submodule paths
# --
	fs=Sys.fileSeparator
	Git:Submodules(Dir)->path out(fs + path + fs)
//Submodules


# Java files not under submodules
# --
	list=Submodules

	Dir.allFiles("*.java")->f
		ok=true
		Inner{
			list->x
				if (f.path.contains(x)) ok=false
		}
		#if (!ok) println("EXCLUDING",f.path)
		assert(ok)
		out(f)
//JavaFiles


# Search project java files (not under submodules)
# --
	P(1,readLine("Enter search term")) => st
	JavaFiles->f
		Grep(st).file(f)->line
			report(f,line.file.name, line.lineNumber, line)
/S

# Trim path
# --
	P(1) as File => file
	path=file.path
	if (path.length > 60) path="..." + (path.last(60).from(Sys.fileSeparator))
	path
//TrimPath

# Process all java files not under submodules
# --
	JavaFiles->f
		lines=f.read(false)
		modifiedLines=JavaReplace(lines)
		if (modifiedLines != null) {
			report("CHANGED", TrimPath(f))
			if(Lib:UsesCRLF(f)) {
				f.setWriteCRLF
			} else {
				f.setWriteLF
			}
			f.create(modifiedLines)
		} else {
			report("-", TrimPath(f))
		}
	| _=>rows
	Lib:ShowRows(rows)

//ProcessJavaFiles


# Replace patterns in list of lines
# --
	P(1) as List => lines
	patterns=ReplaceJavaCodePatterns
	changed=false

	lines->line
		Inner{
			newline=line
			patterns.keys->p
				newline = newline.replace(p,patterns.get(p))
			}
			if (newline != line) changed=true
			out(newline)
	| _ => newLines

	if (changed, newLines, null)
//JavaReplace
		
		
# FixPOMGroupIds
# --
	Maven:ChangeDepGroupIdsAll(Dir, ReplacePomGroupPatterns)
/FixPOMGroupIds


# Update POM files with Axis2 version
# --
	Maven:VersionEditAllPom(Dir,"org.apache.axis2","","2.0.0")
//FixAxisPOMVersions



# ChatGPT on markdown format
# ------------------------------------------------------------------------------------
<<<< EOF
# Migrating `javax.*` to `jakarta.*` for Tomcat 10 – Full Chat

---

**User:**  
What are the packages in javax namespace that belong to the Java EE and are replaced by Jakarta?

**Assistant:**  
The `javax.*` packages were originally part of **Java EE (Enterprise Edition)**. When Java EE was transferred from Oracle to the Eclipse Foundation and renamed **Jakarta EE**, most of the packages previously under `javax.*` were **moved to `jakarta.*`**, starting with **Jakarta EE 9**.

## Key `javax.*` packages from Java EE (now replaced by `jakarta.*`):

| Old Java EE Package (`javax.*`)         | New Jakarta EE Package (`jakarta.*`)  | Description |
|-----------------------------------------|----------------------------------------|-------------|
| `javax.servlet`                         | `jakarta.servlet`                      | Servlet API for web applications. |
| `javax.faces`                           | `jakarta.faces`                        | JavaServer Faces (JSF) for UI components. |
| `javax.persistence`                     | `jakarta.persistence`                  | JPA – Java Persistence API (ORM). |
| `javax.ejb`                             | `jakarta.ejb`                          | Enterprise JavaBeans for business logic. |
| `javax.jms`                             | `jakarta.jms`                          | Java Message Service for messaging. |
| `javax.json`                            | `jakarta.json`                         | JSON processing (JSON-P). |
| `javax.json.bind`                       | `jakarta.json.bind`                    | JSON binding (JSON-B). |
| `javax.ws.rs`                           | `jakarta.ws.rs`                        | JAX-RS – RESTful web services. |
| `javax.jws`, `javax.xml.ws`             | `jakarta.jws`, `jakarta.xml.ws`       | JAX-WS – SOAP web services. |
| `javax.mail`                            | `jakarta.mail`                         | Mail API (now Jakarta Mail). |
| `javax.transaction`                     | `jakarta.transaction`                  | Transaction management API. |
| `javax.annotation`                      | `jakarta.annotation`                   | Common annotations (e.g., `@Resource`, `@PostConstruct`). |
| `javax.validation`                      | `jakarta.validation`                   | Bean Validation API. |
| `javax.security.auth.message`          | `jakarta.security.auth.message`       | Jakarta Authentication. |
| `javax.enterprise.context`, etc.        | `jakarta.enterprise.context`, etc.     | CDI – Contexts and Dependency Injection. |
| `javax.batch`                           | `jakarta.batch`                        | Batch processing. |
| `javax.interceptor`                     | `jakarta.interceptor`                  | Interceptors (AOP-like behavior). |
| `javax.resource`                        | `jakarta.resource`                     | Java Connector Architecture (JCA). |

> **Important Note:** Not *all* `javax.*` packages were moved. Packages that are part of **Java SE** (e.g., `javax.swing`, `javax.crypto`, `javax.net`) are **not renamed** and remain in `javax.*`.

---

**User:**  
Which uses of javax packages need to be migrated to jakarta for using Tomcat 10? Is it only javax.servlet?

**Assistant:**  
No, it's not just `javax.servlet`. Tomcat 10 is aligned with Jakarta EE 9+, which means **all EE APIs must use `jakarta.*` instead of `javax.*`**.

### You must migrate the following if used:

| Technology         | Old Package           | New Package            |
|--------------------|------------------------|------------------------|
| Servlet API        | `javax.servlet`        | `jakarta.servlet`      |
| JSP API            | `javax.servlet.jsp`    | `jakarta.servlet.jsp`  |
| Expression Language| `javax.el`             | `jakarta.el`           |
| WebSocket API      | `javax.websocket`      | `jakarta.websocket`    |
| Annotations (EE)   | `javax.annotation`     | `jakarta.annotation`   |

### You do **not** need to migrate:

- JPA, EJB, JMS, JAX-RS, etc. — these are used in **full Jakarta EE servers**, not Tomcat.
- Java SE packages like `javax.swing`, `javax.crypto`, etc.

---

**User:**  
About `javax.annotation.*` — is it ok to replace this with `jakarta.annotation.*`?

**Assistant:**  
Yes — if you're deploying to Tomcat 10 or any Jakarta EE 9+ runtime, **you must replace** `javax.annotation.*` with `jakarta.annotation.*` **for EE annotations**.

### ✅ Migrate these:

| `javax.annotation`       | `jakarta.annotation`     | Purpose                  |
|--------------------------|---------------------------|---------------------------|
| `@PostConstruct`         | `@PostConstruct`          | Lifecycle init            |
| `@PreDestroy`            | `@PreDestroy`             | Cleanup methods           |
| `@Resource`              | `@Resource`               | Dependency injection      |
| `@Generated` (from EE)   | `@Generated`              | Code generation metadata  |

### ❌ Do **not** migrate:

- `javax.annotation.processing.*` → Java SE annotation processors
- `@Nonnull`, `@Nullable` (e.g. from JSR-305 or other libs) → Not part of Jakarta

### ✅ In Tomcat 10:

Tomcat 10 uses:

- `jakarta.annotation.*` for EE features like `@WebServlet`, `@Resource`, `@PostConstruct`, etc.

So:  
**✔️ Replace EE-related annotations**  
**❌ Leave Java SE-related annotations alone**

### Example Maven dependency:

```xml
<dependency>
  <groupId>jakarta.annotation</groupId>
  <artifactId>jakarta.annotation-api</artifactId>
  <version>2.1.1</version>
</dependency>
```
>>>> EOF
	.print
/ChatGPT