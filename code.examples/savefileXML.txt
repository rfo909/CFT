# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<<< EOF
XML parser written in CFT.
--------------------------

2022-04-13 Somewhat stable, good enough for now. Parses and pretty-prints
XML nodes. Rewritten using a single class (XMLNode), after introducing classes
in v3.3.2


2023-08-14 
----------
Extended identifiers to allow both a:b:c and a.b.c, in order to process POM files etc.

Also made sure that we don't fail on partial terminators, like <!-- ... --> containing
strings "-" or "--", or <? ... ?> containing "?"

Added a few utility functions to the XMLNode class, for easier dissect of XML document
structures. See Maven:CreateSummary for example of traversing tree.

>>>> EOF
/Readme




# Build root lexer Node for tokens in XML
# --
	Std.Text.Lexer.Node => root

	# WS = 1
	root.sub(" ^n^r^t".unEsc).setIsToken(1) => ws # whitespace
	ws.sub(" ^n^r^t".unEsc,ws)  # loop back

	# Specials = 2
	List("<",">","</","/>","=",":")->t root.addToken(t).setIsToken(2) |

	# Numbers = 3
	digits = "0123456789"
	root.sub(digits+"-"+"+").setIsToken(3) => integer
	integer.sub(digits,integer) # loop back
	integer.sub(".").sub(digits).setIsToken(3) => float 
	float.sub(digits,float) # loop back


	# Identifiers = 4
	identFirstChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
	identInnerChars = identFirstChars + "0123456789:.-"

	root.sub(identFirstChars).setIsToken(4) => ident
	ident.sub(identInnerChars) => insideIdent 
	insideIdent.sub(identInnerChars, insideIdent) # loop back
	insideIdent.setIsToken(4)

	#insideIdent.sub(":") => colon
	#colon.sub(identFirstChars, ident)  # back to main ident parser

	#insideIdent.sub(".") => dot
	#dot.sub(identFirstChars, ident) # back to main ident parser

	# Strings = 5
	List('"',"'")->c 
		root.sub(c) => insideString
		insideString.setDefault(insideString)
		insideString.sub("\").setDefault(insideString)
		insideString.sub(c).setIsToken(5)
	|

	# Processing instructions <? ... ?> (-1 = don't include token in token stream)

	root.addToken("<?").setDefault => x
	x.setDefault(x)
	x.sub("?").setDefault(x)
	x.addToken("?>").setIsToken(-1)  # terminates processing instruction, 
    
	# Comments <!-- ... -->

	root.addToken("<!--").setDefault => x
	x.setDefault(x)

	# prevent error on partial end-marker
	x.addToken("-").setDefault(x)
	x.addToken("--").setDefault(x)  
	x.addToken("-->").setIsToken(-1)  # terminates comment

	# CDATA = 11

	root.addToken("<[CDATA[") => cdata
	cdata.setDefault(cdata)
	cdata.sub("]").setDefault(cdata)
	cdata.addToken("]]>").setIsToken(11)  # CDATA


	# Everything else = 99  
	root.setDefault.setIsToken(99)
	root.addToken(">").setIsToken(99)
	root.addToken("/").setIsToken(99)


	# return value is the root node
	root
//RootNode



# Example XML code
# ---
    Sequence(
	@    <!-- this is 
	@         a comment 
	@           2021/01/01 12:00:55 
	@    --><a:parent a="test" b=42 >
	@  
	@       <element "a"=5 b="test" c=ident d=23.5 e=+18 f=-9>2 + 3 &gt; 5</element>
	@   <? this is a test? right? ?>
	@   <!-- single line comment -->
	@       < content:item:details >first item line
	@        second item line
	@	         third item line
	@           a>b / c>d
	@       <title><[CDATA[
	@       Donald Duck &amp; Co
	@   ]]></title>
	@       <   	emptyTag a = 5 />
	@           <status>
	@             on-hold
	@           <count.x>2</count.x>
	@               <x a="1">xxx</x>
	@           </status>
	@       </content:item:details>
	@       <xx>
	@	<!-- Should not trigger on partial terminators:  -- -> -->
	@			<yy>
	@           </yy>
	@       </xx>
	@       <emptyTag a="a"/>
	@    </a:parent>
    )
/exampleXML


exampleXML
//ex


# Test tokenize only
# --
    P(1,exampleXML)=>xml
	P(2, null) => tokenType  # null for all
    
    if (xml==null) {
        println("Paste or enter XML, then terminate by '.' on single line")
        readLines(".") => xml
    }

    RootNode => root
    Std.Text.Lexer => lexer

    xml->line lexer.addLine(line) |
    lexer.getTokenStream(root) => ts
    loop
        break(ts.EOF)
		if (tokenType == null || ts.peekType==tokenType) {
			report(ts.peekType, ts.peek)
		}
        ts.next
    |
/GetTokens



# Tokenize XML, then parse.
# Returns list of top-level objects (XMLNode) skipping text at outer level
# --
    P(1, exampleXML)=>xml
    P(2,false)=>debug

    if (xml==null) {
        println("Paste or enter XML, then terminate by '.' on single line")
        readLines(".") => xml
    }
    
    start=currentTimeMillis

    RootNode => root
    Std.Text.Lexer => lexer
    
    xml->line 
        lexer.addLine(line) 
    |


    if (debug) Inner {
        lexer.getTokens(root)->t
            println("(" + t.tokenType + ") : " + t.str)
        |
    }

    lexer.getTokenStream(root) as LexerTokenStream => ts
    
    list=List
    loop
        break(ts.EOF)
        if (ts.peek=="<") {
            obj=XMLNode
            obj.parse(ts)
            list.add(obj)
        } else {
            ts.next
        }
    |
    list
/Parse


# Create synthetic root object with output from Parse as content. which 
# allows us to use .subNodes("xxx") to locate specifically named content
# --
    P(1)=>xml
    content=Parse(xml)

    obj=XMLNode
    obj.content=content
    obj
/ParseObject



# XML node class
# --
    P(1) as String? => tagName
    P(2,Dict) as Dict => attributes
    P(3,List) => content
    
    self.tagName=tagName
    self.attributes=attributes
    self.content=content
    
    # Create sub-node 
    # --
    self.sub=Lambda{
        P(1) as String => tagName
        x=XMLNode(tagName)
        self.content.add(x)
        x
    }
    
    # Add text or CDATA
    # --
    self.addText=Lambda{
        P(1) as String? => text
        if (text != null) {
            if (text.startsWith("<[CDATA[")) {
                text=text.sub(8, text.length-3) # ]]>
            }
            self.content.add(text)
        }
    }

    
    # Get attribute or null if undefined
    # --
    self.attrGet=Lambda{
        P(1) as String => attrName
        if (self.attributes.has(attrName), self.attributes.get(attrName), null)
    }
    
    # Get list of XMLNode from content
    # --
    self.subNodes=Lambda{
        P(1) as String? => tag
        self.content->x
            x as? &XMLNode => isNode
            assert(isNode)
            assert(tag==null || x.tagName==tag)
            out(x)
    }

	# Get first XMLNode from content
	# --
	self.subNode=Lambda{
        P(1) as String? => tag
		self.subNodes(tag).first
    }

    # Get list of String from content
    # --
    self.getText=Lambda{
        self.content->x
            x as? String => isString
            assert(isString)
            out(x)
    }

    # Get single (first) String value
    # --
    self.getString=Lambda{
        P(1,null) => default
        list=self.getText
        if (list.empty, default, list.first)
    }

	# Get all strings from content (trimmed)
	self.getContent=Lambda{
        P(1,null) => default
        list=self.getText
        if (list.empty, default, list.concat(" ").trim)
	}
    
        
    ## Parse from token stream
    ## -----------------------
    
    self.parse=Lambda{
        P(1) as LexerTokenStream => ts

	ws=Lambda{
		P(1) as LexerTokenStream => ts
		loop
			break(ts.EOF || ts.peekType != 1)
			ts.next
	} 

        # START TAG BEGIN + TAG NAME
        
		ws.call(ts)
        error(!ts.peek=="<",ts.sourceLocation + ": expected '<' starting a tag")
        ts.next

		ws.call(ts)
        error(ts.peekType != 4, ts.sourceLocation + ": expected identifier")
        name=ts.peek
        ts.next
        
        
        #println("STARTING tag " + name)
        self.tagName=name

        
        # TAG ATTRIBUTES
        
        Inner {
            loop
				ws.call(ts)
                break(ts.peek==">" || ts.peek=="/>")
                
                error (ts.peekType != 4 && ts.peekType != 5, 
                    ts.sourceLocation + ": Expected identifier or string attribute name - got " + ts.peek)
                
                attrName=ts.peek
                if (ts.peekType==5) {
                    # Strip quotes
                    attrName=attrName.sub(1,attrName.length-1)
                }
                ts.next

				ws.call(ts)
                error(ts.peek != "=", 
                    ts.sourceLocation + ": expected '=' for attribute " + attrName)

                ts.next

				ws.call(ts)
                error(ts.peekType != 4 && ts.peekType != 5 && ts.peekType() != 3, 
                    ts.sourceLocation + ": Expected identifier, string or number value for attribtute " + attrName + " - got "+ ts.peek)

                attrValue=ts.peek
                if (ts.peekType==5) {
                    # Strip quotes
                    attrValue=attrValue.sub(1,attrValue.length-1)
                } 

                ts.next
                
                self.attributes.attrName=attrValue  
        }
        
        # START TAG END

		ws.call(ts)
        
        hasContent=true
        if (ts.peek==">") {
            ts.next
        } else if (ts.peek=="/>") {
            hasContent=false
            ts.next
        } else {
            error(ts.sourceLocation + ": expected '>' or '/>' closing tag " + name)
        }
        
        
        # CONTENT

        if (hasContent) Inner {
            text=""
            loop
                break(ts.peek=="</")
                if(ts.peek=="<") {
                    self.addText(UnescapeXMLString(text)) 
                    text=""

                    # parse sub-node
                    node=XMLNode
                    node.parse(ts)

                    self.content.add(node)
                } else {
                    # Everything else (text)
                    text=text+ts.peek
                    ts.next
                }
            |
            self.addText(UnescapeXMLString(text))
        }    
        

        # CLOSING TAG
        if (hasContent) {
			ws.call(ts)

            error(ts.peek != "</", ts.sourceLocation + ": expected </ closing " + self.tagName)

            ts.next

			ws.call(ts)
            error(ts.peekType != 4, ts.sourceLocation + ": expected identifier")

            name=ts.peek
            ts.next
        
			ws.call(ts)
            error(self.tagName != name, ts.sourceLocation + ": Expected </" + self.tagName + "> - got </" + name + ">")
            ts.match(">","expected '>' following '</"+name)
            
        }
    

    } # self.parse
    
    
    
    ## Pretty-print XML
    ## ----------------
    self.PP=Lambda{
        P(1,"") as String => indent
        P(2,List) as List => result
        
        attributes=Inner{
            self.attributes.keys->attrName
                out(attrName + '="' + self.attributes.get(attrName) + '"')
            | _.concat(" ")
        }
        if (attributes.length>0) attributes=" "+attributes
        
        result.add(indent+"<"+self.tagName + attributes + if(self.content.length==0,"/>",">"))
        indent2=indent+"   "
        if (self.content.length>0) {
            Inner {
                self.content->x
                    x as? &XMLNode => isNode
                    if (isNode) {
                        x.PP(indent2,result)
                    } else {
                        s=x.trim
                        if (s.length>0) result.add(indent2 + Util:EscapeXMLString(s))
                    }
            }
            result.add(indent+"</"+self.tagName+">")
        }
        
        result
    }
    
    
    # Export XML structure as single line of text
    # --
    self.export=Lambda{
        self.PP->line
            out(line.trim)
        | _.concat(" ")
    }
    
/class XMLNode


# Show XMLNode content
# --
    Util:ShowDict(XMLNode("ROOT"))
/Show


# Pretty-print is implemented inside XMLNode
# Example: PP(Parse.first)
# --
	P(1) as &XMLNode => node
	node.PP
/PP
	




# Unescape special characters in string
# --
    P(1)=>s
    Util:UnescapeXMLString(s)
//UnescapeXMLString







# XMLNode.PP to show result from parse
# --
    node = Parse(exampleXML).first
    node.PP
/t1

# JSON:PP for all details after parse
# --
    node = Parse(exampleXML).first
    JSON:PP(node)
/t2


# Export test
# --
    Parse(exampleXML).first.export
/t3


# Construct XML structure with code
# --
    root = XMLNode("root")
    root.attributes.pi="3.14"
    root.addText("root test before A")
    a=root.sub("A")
    a.attributes.inner="a"
    a.addText("a-text")
    root.addText("root test after A")
    b=root.sub("B")
    root.addText("after B, special chars <>&")
    
    b.sub("C").addText("Inside C")
    b.sub("D")
    
    root
/constructedObject

# Show constructed object by calling its PP function
# --
    constructedObject.PP
/t4


# Parse constructedObject.PP and PP it
# --
    Parse(constructedObject.PP).first.PP
/t4b

# Lookup test, accessing data inside constructedObject - call t4 to see it prettyprinted
# --
    root=constructedObject
    println("root.attr.nonExist = " + root.attrGet("nonExist"))
    println("A.attr.inner = " + root.subNodes("A").first.attrGet("inner"))
    println("A.content.last = " + root.content.last) # special characters test
/t5   


# Parse example, then pretty-print it. Parse the output, and pretty-print that. Compare the two outputs, 
# should match
# --
    node = Parse(exampleXML).first
    result1=node.PP
    node = Parse(result1).first
    result2=node.PP
    #
    result1.concat(" ")==result2.concat(" ")
//test01


# Lookup test
# --
    node=Parse(exampleXML).first
    node.subNodes("item").first.subNodes("title").first.content.first => str
    str.trim=="Donald Duck & Co"
//test02


# Lookup test
# --
    node=Parse(exampleXML).first
    node.subNodes("element").first.content.first => str
    str.trim=="2 + 3 > 5"
//test03





    


Std.Text.Lexer help
//LexerHelp


Std.Text.Lexer.Node help
//NodeHelp


Std.Text.Lexer.getTokenStream(Std.Text.Lexer.Node) help
//TSHelp

