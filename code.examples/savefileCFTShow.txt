# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

<<<<< TEXT
.h <<Date.setFormat("yyyy-MM-dd").fmt>>










.h CFT <<Sys.version>>


    https://github.com/rfo909/CFT

    - Script language
    - Shell
	- GNU GPL 3.0 ("open source")

    git clone https://github.com/rfo909/CFT.git
    cd CFT
    mvn package
    .\cft


.h Shell

    - ls
    - cd
    - cat / more / edit / tail
    - mkdir
    - rm / cp / mv / touch

	_Shell

	!
	!//
	!!

.h Shortcuts

	@e
	@

	CFT.props



.h Coding

	Dir.allFiles("savefile*.txt")
	/ScriptFiles

	:save Test
	@e
		
	# Count number of lines of 
	# --
		ScriptFiles->f out(f.read.length) | _.sum
	/ScriptLines


.h Coding II

    Date help
    Date.Duration help

	# Filter data 
	# --
		limit=Date.sub(Date.Duration.days(7))
		ScriptFiles->f
			assert(f.lastModified > limit.get)
			out(f)
	/RecentlyModified

.h Search 

	# Projects script
    @P

    EditConfig
    ch
	curr

    S, S2, S3
    
    FL

    # Outside of "Projects"
    
    @S
    @FL



.h Help

    ?

    help
    _Expr
    _Stmt
    _Shell

    Dir help
	5 help

    :
    @



>>>>> TEXT
	.mergeExpr
//text

# Process line
# --
    P(1) => line
    P(2) => first
    
    if (line.startsWith(".h")) {
        if (!first) {
            readLine("Enter")
        }
        println(Curses:Clear)
        Inner {
            Letters7x5:T9x10(line.sub(2).trim)->line 
                str=line #.replace("#","O")
                println(Curses:TxtGreen + str + Curses:Reset)
            |
            println
        }
    } else {
        println(line)
        #Sys.sleep(10)
    }
//ProcessLine


# Show text
# --
    P(1,List) => lines
    first=true
    lines->line 
        ProcessLine(line, first)
        first=false
    |
    "Done"
//Show



# Show text
# --
    Show(text)
/t



