# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

<<<<< TEXT
.h CFT

    Dev since May 2018, on git since 2020
    GNU GPL 3.0 ("open source")

    https://github.com/rfo909/CFT

    - Script language
    - Shell

    git clone https://github.com/rfo909/CFT.git
    cd CFT
    mvn package
    .\cft


.h Shell

    - ls | lsf | lsd
    - cd
    - cat / more / edit / tail <file>?
    - mkdir
    - rm
    - cp
    - mv
    - touch ...
    - diff <file> <file>
    - hash <file>?
    - hex <file>?
    - showtree <dir>?
    - shell

    ls cft*
    edit :N

    lsd
    cd :N

    @cmd
    @fm
    @S
    @FL


.h Projects 

    # Projects = Script for searching
    # Multiple projects, each with multiple directories etc
    # Fast switch between projects
    # --

    @P

    EditConfig

    ?
    ch

    # Search
    
    S, S2, S3

    # Locate file(s) and optionally open one in editor
    
    FL


    # Shortcuts (single directory only)
    
    @S
    @FL



.h Help

    # List functions in current script
    ?

    # Show function code
    ?sum

    # Global functions
    help
    _Expr
    _Stmt
    _Shell

    # Object functions
    Dir help
    Std help

    # List colon commands and shortcuts
    :
    @

    # List scripts
    @scr

    # Show details of another script
    ?Lib:
    ?Lib:TmpDir

.h Functions

    1+1
    /two

    Dir.files.length
    /x

    cd ..
    x

    cd
    :save Test
    @e

    3.14
    /pi

    # Parameters (with default expr)
    # --
        a=P(1,readLine("Enter a").parseInt)
        b=P(2,readLine("Enter b").parseInt)
        a+b
    /sum

    ?

    sum(1,3)
    sum

.h Loops 

    # Iterate over content, filter or modify, 
    # use out() to generate result from loop.

    List(1,2,3)->x out(x+10)

    # Loops terminate at end of function or at PIPE character

    "123".chars->c println(c) | println("done")

    # All Java files under current dir
    # --
        Dir.allFiles("*.java")
    /JavaFiles
    
    # Count number of lines of java
    # --
        JavaFiles->f out(f.read.length) | _.sum
    /JavaLines

    # Filter data 
    # --
        JavaFiles->f
            assert(f.lastModified > currentTimeMillis-(86400*1000*7))
            out(f)
    /RecentlyModified
    
    # or ...
    Date.sub(Date.Duration.days(7))

    Date help
    Date.Duration help


>>>>> TEXT
//text

# Process line
# --
    P(1) => line
    P(2) => first
    
    if (line.startsWith(".h")) {
        if (!first) {
            readLine("Enter")
        }
        println(Curses:Clear)
        Inner {
            Letters7x5:GetText(line.sub(2).trim)->line 
                str=line #.replace("#","O")
                println(Curses:TxtGreen + str + Curses:Reset)
            |
            println
        }
    } else {
        println(line)
        #Sys.sleep(10)
    }
//ProcessLine


# Show text
# --
    P(1,List) => lines
    first=true
    lines->line 
        ProcessLine(line, first)
        first=false
    |
    "Done"
//Show



# Show text
# --
    Show(text)
/t



