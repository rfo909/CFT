# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Verify all hosts have copy of SSH key
# --
    data=Hosts:Parse
    data.LallHosts->host
        sshUser=data.Lget(host,"SSHUser")
        assert(sshUser != null)
        target=sshUser+"@"+host
        println("------ " + target)
        Dir.run("ssh-copy-id",target)
/CheckSSHKeys


# Marker in /etc/hosts for custom content
# --
        "# CFT"
//EtcHostsMarker

# Get lines from /etc/hosts that should be distributed
# --
        found=false
        
        File("/etc/hosts").read->line
                if (line.startsWith(EtcHostsMarker)) found=true
                assert(found)
                out(line)
//EtcHostsLines


# Update /etc/hosts on target (user@host) 
# --
    P(1, Input("Enter user@host").get) => target

    # Get /etc/hosts from target
    Lib:TmpFile("hosts") => localCopy 
    SSH:getFile(localCopy, target, "/etc/hosts")
    
    # Isolate the lines up to the "marker"
    keepLines=Inner{
        found=false
        localCopy.read->line
            if (line.startsWith(EtcHostsMarker)) found=true
            reject(found)
            out(line)
    }
    if (keepLines.last.trim.length > 0) {
        keepLines.add("")
    }
    
    # Create updated version 
    localCopy.create(keepLines + EtcHostsLines)
    
    # Send it to the home directory of the target
    SSH:copy(localCopy, target, "./hosts.txt")

    # Update the target using sudo command
    SSH:sudo(target,"cp ./hosts.txt /etc/hosts")
    
    # Remove temp file
    localCopy.delete
/UpdateEtcHosts


# Update /etc/hosts in all linux targets  
# --
    data=Hosts:Parse
    data.LallHosts->host
        sshUser=data.Lget(host,"SSHUser")
        assert(sshUser != null)
        target=sshUser+"@"+host
        println("------ " + target)
        if (SSH:HostOkSSH(target)) {        
            UpdateEtcHosts(target)
        } else {
            println("    Not responding to SSH")
        }
/UpdateEtcHostsAll





# Test SSH (and dns)
# ---
    HostData=Hosts:Parse
    HostData.LallHosts.sort->host
        assert(HostData.Lget(host, "OS")=="linux")
               
            HostData.Lget (host, "SSHUser") =>sshUser
             assert(sshUser != null)

            target=sshUser+"@"+host
        
            ctx=SymDict(target)
            proc=SpawnProcess(ctx,{
            ok = SSH:HostOkSSH(target)
                status = if (ok,"OK","-")
                println(target + ": " + status)
                status
            })
        out(proc)
    | _->proc
        status = proc.wait.exitValue
        report(proc.data.target, status)
/HostsStatus
        


# Run APT Update + upgrade + dist upgrade on one host
# Returns true/false for ok/nok
# --
    P(1,Input("target").get)=>target
    println("Calling APTUpdate:run for target="+target)
    distUpgrade=false
    APTUpdate:run(target,3,distUpgrade)
        # Danger: doing dist-upgrade on ELK and KUB may cause problems!
/AptUpdate



# Newline
# --
    if (Sys.isWindows,"^r^n","^n").unEsc
//Newline

# Run APT Update / upgrade on hosts
# --
    data=Hosts:Parse
    
    mon=Util:ProcessMonitor
    
    data.LallHosts->host

        #println("* " + host)

        pm=data.Lget(host,"PackageManager")
        assert(pm=="apt")
        #println("*   pm==apt ok")

        sshUser=data.Lget(host,"SSHUser")
        assert(sshUser != null)
        #println("*   sshUser != null ok")

        target=sshUser+"@"+host
        processData = SymDict(target)

        # Block until less than given number of active processes
        mon.Lwait(10, true)
        
        #println("*   starting process for " + target)
        process = SpawnProcess(processData, {
            start=currentTimeMillis
            result = AptUpdate(target)
            end=currentTimeMillis
            println("### time=" + (end-start) + " ms")
            # return value
            result
        })
        mon.Ladd(process,host)
        
        out(process)
    | => processList

    mon.Lwait(0,true)  # true=verbose


    processList -> process
        
        target=process.data.target
        exitValue=process.exitValue
        output=process.output.split(Newline)
        date=Date
        
        obj=SymDict(date,target,exitValue,output)
        Db2:Set("Ansible.APTUpdateUpgrade", target, obj)
        report(target, exitValue)
    
/AptUpdateAll


# Show details from APT Update
# --
    Lib:Header("Last run output")
    keys=Db2:Keys("Ansible.APTUpdateUpgrade")
    Inner {
        keys->key
            obj=Db2:Get("Ansible.APTUpdateUpgrade",key)
            date=obj.date.fmt
            exitValue=obj.exitValue
            report(key,date,exitValue)
    } ->line 
        println(line)
    |
    readLine("Enter host name or part of host name") => host
    key = Inner {
        keys->key
            assert(key.contains(host)) 
            out(key)
        | _.first
    }
    Db2:Get("Ansible.APTUpdateUpgrade",key) => data
    Lib:Header(data.date.fmt + " " + key)
    println("exitValue=" + data.exitValue)
    data.output->line println(line)
/UpdateDetails
    
    

# Decide if debian host should be booted
# --
    P(1)=>target
    SSH:run(target,"ls /var/run/reboot-required",true).exitCode == 0
//DebianHostNeedsReboot



# Reboot hosts that need reboot and allow reboot. 
# Display reboot info for all hosts
# --
    P(1,false)=>forceReboot  
        # Reboot all that can be rebooted
        # Note: will reboot the first in each RebootGroup
        # When run later, with value true, it reboots those first in each RebootGroup again
        # For TESTING of the RebootGroup mechanism only!
    
    HostData = Hosts:Parse
    Util:ProcessMonitor =>mon

    # only one host from each reboot group can boot at a time
    rebootGroups=List

    HostData.LallHosts.sort->host
        assert(HostData.Lhas (host,"OSFamily","debian"))
        HostData.Lget (host, "SSHUser") =>sshUser

        sshUser+"@"+host =>target
        HostData.Lget (host, "RebootGroup", null) => rebootGroup

        HostData.Lhas (host, "Auto.reboot", "yes") => allowReboot
        
        Inner {
            SSH:HostOkSSH (target) =>hostOk
            if (!hostOk) {
                println(host + ": -offline-")
            } else {
                DebianHostNeedsReboot(target) =>needsReboot
            
                if (needsReboot || forceReboot) {
                    if (!allowReboot) {
                        if (rebootGroup != null) {
                            if (!rebootGroups.contains(rebootGroup)) {
                                allowReboot=true
                                rebootGroups.add(rebootGroup)
                            }
                        }
                    }
                    if (allowReboot) {
                        println(host + ": rebooting now" + if(rebootGroup != null, " RebootGroup="+rebootGroup,""))
                        SSH:sudo(target,"reboot",true)
                    } else {
                        println(host + ": " + if(needsReboot,"NEEDS REBOOT","ok"))
                    }
                 
                } else {
                    println(host + ": ok")
                }
            }
          }

            
/Reboot


# Update or install CFT
# --
    P(1)=>host
    P(2)=>sshUser

    println("host=" + host)
    println("sshUser=" + sshUser)

    println("# host " + host)

    if (!SSH:HostOk (host)) {
        println("Host unreachable")
    } else {        
        sshUser+"@"+host =>target
        println("Updating " + target)
        
        assert(SSH:HostOkSSH (target))

        Java:VerifyCFT (target)
    }
/UpdateCFT


# Update CFT all
# --
    mon=Util:ProcessMonitor
    
    HostData=Hosts:Parse
    HostData.LallHosts.sort->host
        assert(HostData.Lhas(host,"Install.CFT","1"))
        sshUser=HostData.Lget (host,"SSHUser")
        assert(sshUser != null)

        mon.Lwait(8,true)
        println("Spawning process for host="+host)
        
        ctx=SymDict(host,sshUser)
        process=SpawnProcess(ctx, UpdateCFT(host, sshUser))

        mon.Ladd(process,host)
        
        out(process)
    | => processes

    mon.Lwait(0,true)

    
    

    processes _->process
        Lib:Header(""+process.data.host)
        process.wait
        Inner {process.output.split(Newline)->line println(line)}
        readLine("ENTER to continue")
/UpdateCFTAll



P(1)=>host
P(2)=>target
P(3,"mpstat") => command
P(4)=>lineFilter
    if (SSH:HostOk (host)) Inner {

        println("---- " + host + " ----")
        SSH:run (target, "which mpstat", true).get("exitCode") != 0 =>install
        if(install) {
            println("    (installing sysstat)")
            SSH:sudo (target, "apt-get -y install sysstat")
        }
        SSH:run (target, command).get("stdout")->line
            assert(lineFilter == null || line.contains(lineFilter))
            report(List(host,line))
    } 
//SysStat


# View host status
# --
    P(1,"mpstat") => command
    P(2)  => lineFilter

    HostData=Hosts:Parse
    
    mon=Util:ProcessMonitor

    HostData.LallHosts->host

        HostData.Lget(host, "OS") => os
        assert(os=="linux")
        
            HostData.Lget(host, "SSHUser") =>sshUser
            assert(sshUser != null)
        
        sshUser+"@"+host =>target

            ctx=SymDict(host,target,command,lineFilter)
            proc=SpawnProcess(ctx,
                SysStat(host,target,command,lineFilter)
            )
        mon.Ladd(proc,host)
        out(proc)
    | _=>procList

    mon.Lwait(0,true)

    procList -> proc
        proc.wait
        Inner {
            #proc.output.split(Newline)->line println(line) |
            proc.exitValue->line println(line)
        }   
/SysStatAll


SysStatAll("mpstat")
/MPStat

SysStatAll("iostat")
/IOStat






# Configure /etc/systemd/resolved.conf
#### Does it do any good on Ubuntu Server 20+ ??
# ---
    HostData=Hosts:Parse
    file=Lib:TmpFile("resolved_conf")
    file.create(resolved_conf)
    
    HostData.LallHosts->host
        assert(HostData.Lget(host, "OSFamily")=="debian")
               
        HostData.Lget (host, "SSHUser") =>sshUser
        assert(sshUser != null)

        Lib:Header(host)

        target=sshUser+"@"+host
        if (!SSH:HostOkSSH(target)) {
            println("- Host unreachable - skipping target " + target)
            continue
        }

        SSH:copy(file, target, "./resolved_conf")
        SSH:sudo(target,"cp ./resolved_conf /etc/systemd/resolved.conf")
        println("- Updated file /etc/systemd/resolv.conf")
    |
    file.delete
    
//FixResolve


# /etc/systemd/resolved.conf
# --
<<<<< EOF
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
# Entries in this file show the compile time defaults.
# You can change settings by editing this file.
# Defaults can be restored by simply deleting this file.
#
# See resolved.conf(5) for details

[Resolve]
DNS=10.0.0.3 10.0.0.4
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
#DNSSEC=no
#Cache=yes
#DNSStubListener=yes
>>>>> EOF
//resolved_conf




# Dump content from Hosts file, optionally with
# filter string, to isolate hosts, property names or values
# -- 
    P(1,null)=>filter
    Hosts:Parse.Ldump->line  
        # each line is a list with three elements: host, setting name and setting value
        assert(filter==null || line.concat("|").contains(filter))
        reportList(line)
/Dump



# Run all periodic jobs
# --
    UpdateCFTAll
    AptUpdateAll
    Reboot
/runAll


# Assign name and correct IP for newly created VM from Ubuntu Server template on Proxmox.
# This assumes fixed IP and that the management host has password-less access via ssh.
#
# After cloning a number of VM's, start each, one at a time, followed by running this
# function, which 
# - modifies the /etc/hostname
# - modified /etc/netplan/WHATEVER.yaml
# - fixes machine-id
# - generates unique SSH keys
# - reboots
#
# It is now safe to start the next newly cloned VM, and avoid IP clash.
# --
    "10.0.99.56" => defaultTemplateIp

    P(1,Input("Template IP").setCurrCond(defaultTemplateIp).get) => templateIp
    P(2,Input("Clone new IP").get) => newIp
    P(3,Input("Clone host name").get) => hostname
    P(4,Input("Management username").get) => username

    readLine("Press ENTER to continue")

    target=username + "@" + templateIp

    # Creating CFT script to run on new VM
    Java:VerifyCFT(target)


    Lib:TmpFile("cftTest")=>scriptFile
    scriptFile.create(RemoteScript(hostname, templateIp, newIp))


    println("Creating CFT Test script")
    SSH:copy(scriptFile, target, "./CFT/savefileInitClone.txt")

    SSH:sudo(target, './RunCFT -noterm InitClone run ":quit"', false, true)

    SSH:sudo(target, "reboot", true, false)
    
/InitUbsClone



# CFT script to run on new VM
# --
    P(1)=>hostname
    P(2)=>origIp
    P(3)=>newIp
<<<<<< EOF
# Autogenerated script <<Date.fmt>>
# --
    # Check that running as root
    error(Dir.runCapture("whoami").first.trim != "root", "This scipt must run as root")
    
    # Fix hostname
    File("/etc/hostname").create("<<hostname>>")
    println("Fixed /etc/hostname: <<hostname>>")
    
    # Read current netplan config
    Dir("/etc/netplan").files("*.yaml")=>files
    files.first => netplanFile
    netplanFile.read => netplanLines

    # Modify netplan config with new IP address
    netplanLines = Inner{
        netplanLines->line 
            out(line.replace("<<origIp>>","<<newIp>>"))
    }
    # Delete netplan file(s)    
    Inner{files->f f.delete}
    
    # Create new netplan file
    netplanFile.create(netplanLines)

    println("Updated /etc/netplan/" + netplanFile.path)

    # Set machine-id
    File("/etc/machine-id") => idFile
    oldId=idFile.read.first

    # Truncate machine-id file to zero bytes
    Dir.run(List("truncate","-s","0", idFile.path))

    # Generate new machine-id content
    Dir.run(List("systemd-machine-id-setup"))
    newId=idFile.read.first

    println("Changed /etc/machine-id")
    println("- oldId: " + oldId)
    println("- newId: " + newId)

    # Generate new host ssh keys
    # https://www.cyberciti.biz/faq/howto-regenerate-openssh-host-keys/

    println("Deleting /etc/ssh_host_* key files")
    Inner {
        Dir("/etc/ssh").files("ssh_host_*")->f f.delete
    }
    println("Generating new ssh_host_* keys")
    Dir.run(List("dpkg-reconfigure","openssh-server"))
    
    println("Restarting ssh service")
    Dir.run(List("systemctl","restart","ssh"))
    
    println("** REMEMBER: must update or delete ./ssh/known-hosts") 
/run


>>>>>> EOF
    .mergeExpr
//RemoteScript
