# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License




# Readme with example projects.txt file
# --
<<< EOF

Projects script
---------------
To use this script, we define projects in a text file, projects.txt under "private"
dir, as defined by Lib:DirPrivate.

The ### marker is followed by a project name, and then follows settings.

Single "#" at start of lines are comments.

Example:
---

### CFTJava

Dir: /home/xyz/CFT
Type: java
IgnoreDir: .git


### OtherProject

Dir: /home/xyz/OtherProject
Type: html
Type: css
Type: js




Configuration
-------------
The following settings are allowed, each can be repeated:

Dir: /home/xyz/CFT      ### string
Type: txt               ### converted to glob-expression *.(type)
Files: *.java           ### glob-expression
Ignore: *test*          ### glob-expression to ignore certain files
IgnoreDir: /.git        ### substring matching against path


There can be multiples of every line, so if we want to scan different directories in one go,
just add a second "Dir:" line.

Note that directories can also be local relative to current directory. 

./xxx

Missing directories are logged to screen following 

>>> EOF
//ReadmeLines


# Readme
# --
    ReadmeLines->line println("| " + line)
/Readme

# The projects.txt file 
# --
    (Lib:DirPrivate).file("projects.txt") => f
    if (!f.exists || DataFile(f,"###").keys.length==0) {
        readme=Lambda{ReadmeLines->line out("# "+line)}
        Inner{
            Sequence(
                @
                @ << readme.call >>
                @
                @ # Example project (auto-generated << Date.fmt >>)
                @
                @ ### CFTJava
                @ 
                @ Dir: << Sys.homeDir.path >>
                @ Type: java
            )->line
                line.mergeExpr->s out(s)
        } => lines
        f.append(lines)
    }
    f
/ConfigFile   




# Projects config as DataFile
# --
    ConfigFile =>f
    DataFile(f,"###").comment("#")
//ProjectsFile


# Edit config file (see Readme)
# --
    Lib:e(ConfigFile)
/EditConfig


# Update sessionProject
# --
    P(1)=>name

    # Load sessions dictionary from base
    Db2:Get("Projects","Sessions",Dict) => sessions

    uuid=Sys.sessionUUID
    time=currentTimeMillis

    sessions.set(uuid,SymDict(name,time))
    
    # clean up old sessions, to avoid data entry growing indefinitely
    {sessions.keys->key
        if(sessions.get(key).time < currentTimeMillis - 86400*1000*14) {
            sessions.remove(key)
        }
    }

    # Save
    Db2:Set("Projects","Sessions",sessions)
//UpdateSessionProject


# Get session project or null if undefined
# --
    Db2:Get("Projects","Sessions",Dict) => sessions
    uuid=Sys.sessionUUID

    if (sessions.has(uuid)) {
        sessions.get(uuid).name
    } else {
        null
    }
//GetSessionProject


# List projects and select 
# --
    Db2:Get("Projects","Project") => result
    
    ProjectsFile.keys => names

    Lambda { P(1) } =>showName
    loop
        println
        Lib:Header ("Select project (" + result + ")")
        Lib:ShowOptions (names, showName)
        Lib:SelectOptions (names, showName, true) =>resultList
        if(resultList.length>1, Inner{println("** not unique **") null =>result} )
        if(resultList.length==1, Inner{resultList.nth =>result} )
        break(result != null)
    |
    Db2:Set("Projects","Project", result)
    UpdateSessionProject(result)
    result
//SelectProjectName


# Current project name
# --
    pName=GetSessionProject
    if (pName==null) {
        # use last selected
        pName=Db2:Get("Projects","Project")
    }
    if (pName==null) pName=SelectProjectName
    UpdateSessionProject(pName)
    pName
//CurrProjectName


# Get current project as Dict
# --        
    pName=CurrProjectName
    
    ProjectsFile.get(pName) =>dataLines
    if(dataLines.length==0) {
        SelectProjectName
        pName=CurrProjectName
        ProjectsFile.get(pName) =>dataLines
    }

    dict=Dict
    dataLines->line
        line.before(":").trim =>field
        line.after(":").trim =>val
        dict.get(field,List).add(val)
    |
    dict
//CurrProject


# State string, reported as part of the prompt - see CFT.props prompt setting
# --
    s=""
    x=FSGet
    if (x.length>0) s=" FSet=" + x.length
    CurrProjectName+s
//StateString




# Create file set by searching through TextFiles for pattern
# --
    P(1,Grep) => grep

    TextFiles -> tf
        if (grep.fileCount(tf) > 0) out(tf)
    | => files
    Db2:Set("Projects","FileSet",files)
//CreateFileSet



# Get file set
# --
    Db2:Get("Projects","FileSet",List)
/FSGet


# Show file set
# --
    FSGet->f
        out(f.path)
/FS

# Clear file set
# --
    Db2:Set("Projects","FileSet",List)
/FSClear


# Show file set info
# --
    fs=FSGet
    if (fs.length>0) {
        println("FileSet=" + fs.length + " files (FS to see, FSClear to remove)") 
    }
//ShowFSetInfo


# Produce list of all possible files to search (from project config)
# --
    CurrProject =>pr
    
    # Directories
    # --
    dirs = pr.get("Dir",List)
        
    
    # File matching by type
    # --
    pr.get("Type",List)->t 
        out(Glob("*."+t) )
    | => fileGlobs
    
    pr.get("Files",List)->f  ## glob strings
        fileGlobs.add(Glob(f))
    |
    
    # File ignores
    # --
    pr.get("Ignore",List)->i  ## Glob
        out(Glob(i))
    | => fileIgnores
    
    # Dir ignores
    # --
    dirIgnores = pr.get("IgnoreDir",List) ## substrings


    fileOk = Lambda {
        P(1)=>file
        P(2)=>ignoreGlobList
        
        ok=true
        ignoreGlobList->glob
            if (glob.match(file)) ok=false
        |
        ok
    }

    pathOk = Lambda{
        P(1)=>s 
        P(2)=>ignoreDirList
        
        ok=true
        ignoreDirList->pattern
            if (s.contains(pattern)) ok=false
        |
        ok
    }
    
    # 
    dirs->dirName
        fileGlobs->glob
            dir = if (dirName.startsWith("."+Sys.fileSeparator)) {
                Dir.sub(dirName.sub(2))
            } else {
                Dir(dirName)
            }
            if (!dir.exists) {
                Sys.log("Dir not found: " + dir.path)
            }
            assert(dir.exists)
            dir.allFiles(glob)->f 
                assert(pathOk.call(f.path, dirIgnores))
                assert(fileOk.call(f,fileIgnores))
                out(f)
    | _.unique 
//TextFiles


# Searchable files: if FSGet non empty, return it, otherwise return TextFiles
# --
    FSGet => list
    if (list.empty) {
        TextFiles
    } else {
        list
    }
/SearchableFiles


SearchableFiles
/SF




# Search through SearchableFiles for pattern - delivers lines
# --
    P(1,Grep) =>grep
    
    SearchableFiles => textFiles
    
    # Count matches first
    textFiles->tf 
        out(grep.fileCount(tf)) 
    | _.sum =>count
    
    # If too many hits, just cancel
    error(count>10000, "Search matches " + count + " lines - not shown")

    textFiles->tf
        grep.file(tf)->line 
            out(line)
//DoSearch



# Search through SearchableFiles for pattern
# Returns formatted report
# -- 
    P(1,Grep) =>grep
    DoSearch(grep)->line
            report(line.file, line.file.name, line.lineNumber, line)
//Search



# Search with one parameter
# --
    ShowFSetInfo
    Input("Search1").get =>a
    Search(Grep(a))
/S


# Search with one parameter, to create file set of files containing match
# --
    Input("Search1 to create file set").get =>a
    CreateFileSet(Grep(a))
    FSGet->f out(f.path)
/SFS

# Search with two parameters
# --
    ShowFSetInfo
    Input("Search2a ... ").get =>a
    Input("... AND Search2b").get =>b
    Search(Grep.match(a).match(b))
/S2


# Search with three parameters
# --
    ShowFSetInfo
    Input("Search3a ... ").get =>a
    Input("... AND Search3b").get =>b
    Input("... AND Search3c").get =>c
    Search(Grep.match(a).match(b).match(c))
/S3

# Search with one positive and one negative parameter
# --
    ShowFSetInfo
    Input("Search1").get =>a
    Input("Search1n (reject)").get =>b
    Search(Grep(a).reject(b))
/SN

# Locate file by partial name
# --
    P(1,"java")=>fn

    # if linux, conv does nothing, but on windows it converts to lower case
    conv=if(Sys.isWindows, Lambda{P(1).toLower}, Lambda{P(1)})

    fn=conv.call(fn)

    TextFiles->tf
        assert(conv.call(tf.name).contains(fn))
        out(tf)
//FileLocator


# Get file content around a given line number as List of lines
# --
    P(1,Input("File name or glob pattern").get) => globPattern
    P(2,Input("File line number").get.parseInt) => lineNo
    P(3,Input("Number of lines").get.parseInt) => numLines

    glob=Glob(globPattern)

    TextFiles->tf
        assert(glob.match(tf))
        out(tf)
    | => files

    error(files.length==0, "No matching files found")
    if (files.length == 1) {
        file=files.first
    } else {
        Lib:MenuSelect(files,Lambda{P(1).path},"Select file", true) => file
        error(file==null,"Aborting: no file selected")
    }
    file.read => lines

    delta=(numLines/2).i  # division always returns float!!
    lines.keep(lineNo-delta, lineNo+delta)
    
/gfc


# Show file content around a given line number, report style
# --
    Inner {
        gfc->line
            report(line.lineNumber, line)
    }->line 
        println(line)
    |
    true
/sfc

# FileLocator, sorted presentation, newest last
# --
    P(1,Input("Enter part of file name").get) => fn

    FileLocator(fn)->file
        out(Int(file.lastModified, file))
    | _.sort->x 
        out(x.data)
/FL


# Show text files (that are being searched)
# --
    SearchableFiles
/TF


# Display current project
# --
    CurrProject =>pr
    println
    Lib:Header("Current project")
    println(CurrProjectName)
    println
    pr.keys->key
        Inner{
            pr.get(key,List)->str
                println(key+": " + str)
        }
    |
    println
    fSet=FSGet
    if (!fSet.empty) {
        println("FileSet = " + fSet.length + " files  (FS to show, FSClear to clear)")
    }
    true
/curr


# Change project
# --
    SelectProjectName
    curr
/ch


# Search interactively
# --
    terms=Db2:Get(Sys.scriptId,"SI",List)


    loop
        println
        println(">>> " + if(terms.empty,"(none)", terms.concat(" ")))
        readLine("Enter [+]term or -term, '.' to refresh, '..' to undo, 'Enter' to end") => term
        break(term.trim=="")

        if (term=='..') Inner {
            if (!terms.empty) {
                terms=terms.keep(0,terms.length-2)
                Db2:Set(Sys.scriptId,"SI",terms)
            }
        } else if (term.length > 0 && term != '.') {
            # Add to terms list
            if (term.startsWith("-") || term.startsWith("+")) terms.add(term)
            else terms.add("+" + term)
            Db2:Set(Sys.scriptId,"SI",terms)
        }

        plus=List
        minus=List
        Inner{
            terms->term
                if (term.startsWith("-")) minus.add(term.sub(1))
                else if (term.startsWith("+")) plus.add(term.sub(1))
        }
        if (plus.empty && minus.empty) continue
    
        g=Grep
        g.match(plus)
        g.reject(minus)
        tryCatch(Search(g)) => result

        if (result.ok) {
            Inner{result.result->line println(line)}
            println("[" + result.result.length + " hits]")
        } else { 
            println
            println(result.msg)
        }
        

/SI


