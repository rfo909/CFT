# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Readme
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF

Java install or upgrade
-----------------------
This script detects existing version of 
OpenJDK Java, and if obsolete version,
older than

    ${min}

then java is uninstalled, before the
current target version gets installed:

    ${target}

Script has been verified for versions
from 11 up.
>>>>>>>>>>>>>>>>>>>>>>>>> EOF
 =>lines
Dict
    .set("${target}",targetPackage) 
    .set("${min}",minVersionPackage)
    =>data
lines->line out(line.merge(data))
/Readme


17
/MinimumVersion

17
/InstallVersion




"openjdk-"+MinimumVersion+"-jdk-headless"
/minVersionPackage


"openjdk-"+InstallVersion+"-jdk-headless"
/targetPackage


Input("Enter ssh target on format user@host").get
/GetSSHTarget


# Install or upgrade Java
P(1,GetSSHTarget) =>target
P(2,"") =>prefix
P(3,false) =>showDebug

    println(prefix+"Checking if java installed")
    
    SSH:run (target,"java -version",true) =>result
    result.get("stdout") + result.get("stderr") =>lines
    
    (result.get("exitCode")==0) =>hasJava

    println(prefix+"hasJava =>" + hasJava)
    
    if (showDebug) Inner{
        lines->line println(prefix+" ## " + line) 
    }
    
    Lib:LinesContain (lines,"OpenJDK") =>isOpenJdk
    
    
    error(hasJava && !isOpenJdk, 
        "Java on " + target + " is not an OpenJDK install, can not continue")


    if (hasJava) {

        println(prefix+"Checking version")

        # There probably are better ways of determining which
        # version package is installed, but this works.
        Dict
            .set('version "11.', 11)
            .set('version "13.', 13)
            .set('version "14.', 14)
            .set('version "14.', 14)
            .set('version "15.', 15)
            .set('version "16.', 16)
            .set('version "17.', 17)
            .set('version "18.', 18)
            .set('version "19.', 19)
            .set('version "20.', 20)
            .set('version "21.', 21)
            =>codes
            
        Lib:LinesContain (lines, codes) =>result
        error(result.length != 1,
            "Unknown java version: '" + result.concat(",")+"'")

        result.nth =>version

        
        println(prefix+"Checking for jdk vs jre")
        null =>jdkJre
        if (SSH:run (target,"which javac",true).get("exitCode")==0) {
            "jdk" =>jdkJre
        } else {
              "jre" =>jdkJre
        }
       
        
        "openjdk-"+version+"-"+jdkJre+"-headless" =>package
        
        if(version<MinimumVersion || jdkJre != "jdk") {
            println(prefix+"Requiring " + targetPackage + " - removing obsolete package " + package)
            SSH:sudo(target,"apt-get -y remove " + package)
            
            false =>hasJava
        } else {
            println(prefix+"Java version ok: " + package)
        }

    }  # if hasJava
    
    if(!hasJava) {
        println(prefix+"Running Update")
        SSH:sudo (target,"apt-get -y update")
        
        println(prefix+"Installing " + targetPackage)
        SSH:sudo(target,"apt-get -y install " + targetPackage)  
    }
    
    println(prefix+"Java ok")
    
/VerifyJava   


# Install ANT if missing - calls VerifyJava
# --
P(1,GetSSHTarget) =>target
P(2,"") =>prefix
    println(prefix+"Preparing to install ANT")
    VerifyJava(target,prefix+"   ")

    SSH:run (target,"which ant",true) =>result
    if(result.get("exitCode") != 0) {
        println(prefix+"Installing ANT")
        SSH:sudo (target,"apt-get -y install ant")
    }
    println(prefix+"ANT ok")
/VerifyAnt


# Install GIT if missing 
# 2022-04: missing for a clean Ubuntu Desktop install
# --
    P(1,GetSSHTarget) =>target
    P(2,"") =>prefix
    println(prefix+"Verify GIT installed")
    SSH:run (target,"which git",true) =>result
    if(result.get("exitCode") != 0) {
        println(prefix+"Installing GIT")
        SSH:sudo (target,"apt-get -y install git")
    }
    println(prefix+"GIT ok")
/VerifyGIT



# Install Maven if missing - calls VerifyJava
# --
P(1,GetSSHTarget) => target
P(2,"") => prefix
    println(prefix+"Preparing to install Maven")
    VerifyJava(target,prefix+"   ")

    SSH:run(target,"which mvn",true) => result
    if (result.get("exitCode") != 0) {
        println(prefix+"Installing Maven")
        SSH:sudo(target,"apt-get -y install maven")
    }
    println(prefix+"Maven ok")
/VerifyMaven



# Install or upgrade CFT - calls VerifyMaven
# --
    P(1,GetSSHTarget) =>target
    P(2,"") =>prefix

    # Short timeout to avoid being run multiple times
    # as part of same script for same host
    # --
    mark=Sys.scriptName+"_VerifyCFT_"+target
    if (Util:HasTimedOut(mark,20)) Inner {
        
        println(prefix+"Verifying Maven (and Java) ok")
        VerifyMaven(target, prefix+"   ")

        # Check if CFT already installed
        {
            SSH:run (target,"cd CFT",true).get("exitCode")==0 
        } =>hasCFT
        
        if (!hasCFT) {
            println(prefix+"Installing and compiling CFT")
            VerifyGIT(target,prefix+"   ")
            List(
                "git clone https://github.com/rfo909/CFT.git",
                "cd CFT",
                "mvn package"
            ) 
        } else {
            println(prefix+"Pull latest CFT then compile")
            List(
                "cd CFT",
                "git pull origin master",
                "mvn package"
            )
        }
        =>cmd
        SSH:run (target, cmd)
        
        CreateRunCFT(target,prefix+"   ")

        Util:SetTimeMark(mark)
    } else {
        println(prefix+"Skipping CFT check, last run at " + Util:GetTimeMark(mark))
    }
/VerifyCFT



# Create home directory shell script RunCFT to run CFT 
# Called from VerifyCFT
# --
    P(1,GetSSHTarget) =>target
    P(2,"") =>prefix
    
    SSH:run(target,"which bash", false, false).stdout->line
        assert(line.contains("/bash")) 
        out(line)
    | _.first => path
    
    Lib:TmpFile("script") => f
    f.create(Sequence(
        @@#!<<path>>
        @ cd CFT
        @ ./cft $*
    ).mergeExpr)
    SSH:copy(f,target,"./RunCFT")
    SSH:run(target,"chmod +x ./RunCFT")
//CreateRunCFT



# Collect information about content in jar-file, returns Dict with .classes and .files
# where .files contain non *.java files, with path, while .classes contains the
# files ending with .java, and replacing path separators with dots
# --
	P(1) as File => jarFile
	P(2, true) => includeInnerClasses

	dict=Dict
	dict.files=List
	dict.classes=List
	dict.jarFile=jarFile

	Dir.runCapture("jar","tf",jarFile.path)->line
		reject(line.endsWith("/"))
		if (line.endsWith(".class")) {
			if (includeInnerClasses || !line.contains("$")) {
				class=line.beforeLast(".").replace("/",".")
				dict.classes.add(class)
			}
		} else {
			dict.files.add(line)
		}
	|

	dict
		
/JarContent



# Create search structure for all jar files under current dir, to search for classes or other files (properties-files etc)
# --
	P(1,Dir) as Dir => currentDir
	P(2,false) as boolean => includeInnerClasses

	println("Processing jar files")
	data=List

	currentDir.allFiles("*.jar") -> f
		println(f.path)
		data.add(JarContent(f, includeInnerClasses))
	|

	loop
		println
		readLine("Search for class, or type '/...' to search for other file, blank to abort") => str
		break(str=="")

		if (str.startsWith("/")) Inner {
			# Search for other files
			str=str.sub(1)
			data->jc
				jc.files->file
					if (file.contains(str)) report(file)
		} else Inner{
			# search for jar
			data->jc  # JarContent Dict
					jc.classes->class
						if (class.contains(str)) {
							report(jc.jarFile, jc.jarFile.name, class)
						}
		} _=>rows
		Lib:ShowRows(rows)

/SearchJarFiles





# Fix single java file containing log4j refererence(s) on the form, replacing log4j with Simple Logging Facade (SLF4J) to enable logback
#
#  package something;
#  ...
#  import org.apache.log4j.Logger;
#  ... 
#  public class Something {
#     ...
#     private Logger logger=null;
#     ...
#     public Something (...) {
#        logger=Logger.getLogger(this.getClass());
#        ...
#     }
#  }
#
# Returns true or false indicating if the file has been modified
#
# --
	P(1) as File => javaFile

	buf=AutoEdit:EditBuffer(javaFile.read(false))

	# replace import statement
	buf.progMatchFirst(
		Lambda{
			P(1).trim => s
			s.startsWith("import") && s.contains("apache.log4j")
		},
		Lambda{
			<<<< EOF
import org.slf4j.Logger;
			>>>> EOF
		}
	)

	# Create a helper object to capture the name of the class
	obj=Dict
	obj.matcher=Lambda{
		P(1).trim =>s
		if (s.startsWith("public") || s.startsWith("private")) {
			s=s.after(" ").trim
			error(!s.startsWith("class"), "expected 'class' keyword")
			s=s.after(" ").trim
			self.className=s.before(" ")
			true
		} else {
			false
		}
	}

	buf.progMatchFirst(obj.get("matcher"))
	className=obj.get("className",null)

	error(className==null, "No classname found")

	# Remove old 'logger' variable
	buf.reset
	buf.match("{")
	buf.progMatchFirst(
		Lambda{
			P(1).trim=>s
			s.startsWith("private") && s.contains("Logger logger") && s.contains("=")
		}, Lambda{
			null
		}
	)

	# remove old call to initiate 'logger' in constructor
	buf.reset
	buf.progMatchFirst(
		Lambda{
			P(1)=>s
			s.contains("logger") && s.contains("=") && s.contains("Logger.getLogger") 
		},Lambda{
			null
		}
	)

	# insert static variable 'logger' into class def
	buf.reset

	buf.match("{") # enter body of class

	buf.next
	Sequence(
		"    private static Logger logger = org.slf4j.LoggerFactory.getLogger(<<className>>.class);".mergeExpr.first
		buf.line  # preserve the original next line
	)->line
		buf.write(line)

	|	

	# update file?
	if (buf.isModified) {
		Lib:PreserveFileLineSeparator(javaFile).create(buf.out)
		true
	} else {
		false
	}
/FixFileLog4j		
	
	