# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
# --
<<<<<< EOF
Demonstration of DDD library. Generates a 3D wooden wheel.

CFT 2.10.0
>>>>>> EOF
->line
    println("| " + line)
/Readme

        
# Target dir
# --
    Sys.homeDir.sub("anim").sub("3d").create
/TargetDir



# Wooden wheel example
# --
    P(1)=>world
    P(2)=>ref
    P(3,TargetDir.file("wheel.png"))=>file
        # ref is at the center of the wheel, with wheel extending in forward/backward and up/down plane

    hubWidth=100
    hubThickness=50

    rimWidth=60
    rimThickness=30

    spokeRadius=15
    axleHoleRadius=15

    rimCenterRadius=500

    ref=ref.setScaleFactor(1)  ## millimeters
    world.Brush.box(hubWidth, hubThickness, Std.Color(120,80,40)) => hub
    world.Brush.box(rimWidth, rimThickness, Std.Color(120,80,40)) => rim
    world.Brush.circle(spokeRadius, Std.Color(120,80,50)) => spoke

    # going to 361 to ensure 360 is included, so the circles (hub and rim)
    # get closed on themselves.

    Std.Data.for(0,361,3)->angle
        rotated=ref.turnDown(angle)
        hubPos=rotated.up(axleHoleRadius + hubThickness/2)
        rimPos=rotated.up(rimCenterRadius)

        hub.penDown(hubPos)
        rim.penDown(rimPos)
        
        # spokes
        if (angle % 30 == 0) {
            spokeStart = ref.turnDown(angle).up(axleHoleRadius + hubThickness/2).turnUp(90)
            spokeEnd=ref.turnDown(angle).up(rimCenterRadius).turnUp(90)

            spoke.penDown(spokeStart)
            spoke.penDown(spokeEnd)
            spoke.penUp
        }
    |
    hub.penUp
    rim.penUp
    
    world.render(file)

    Util:ShowDict(world.getStats,true)
    println("Wrote file " + file.path)
/RenderWheel


# Main function
# --
    world = Std.DDD.World
        # by default the world scale is in millimeters

    ref = Std.DDD.Ref.setScaleFactor(1000)  # going up to meter scale
    ref=ref.fwd(2).turnRight(30).rollLeft(30)  # create viewable position for center of wheel
    
    RenderWheel(world,ref)
/run



