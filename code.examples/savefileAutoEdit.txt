# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# EditBuffer class for programmatic editing
# See Maven:VersionEditPom for example, or test function below.
# Also see Java:FixFileLog4j function
#
# Note that the search always relates to the original file content, not
# to generated content. Search starts with the current line, so for instance
# if we want to enter a java method 'render' and don't know that it is always
# defined with the '{' at the same line as "public render ...", then this is
# easy:
#
# buf=AutoEdit:EditBuffer(...)
# buf.match("public render")
# buf.match("{")
# buf.next
# buf.write("   // custom code to be inserted at start")
# buf.write(buf.line) # preserve the first line after opening brace
#
# This code is still very much a work in progress
# --
	P(1)=>linesOrFile
	
	if (Sys.getType(linesOrFile)=="File") {
		self.lines=linesOrFile.read(false)
	} else {
		self.lines=linesOrFile
	}
	
	self.pos=0

	self.reset=Lambda{
		self.pos=0
	}

	self.atEOF=Lambda{
		self.pos >= self.lines.length
	}

	self.line=Lambda{
		self.lines.nth(self.pos)
	}

	self.next=Lambda{
		self.pos=self.pos+1
	}


	self.matchOptional=Lambda{
		P(1) as String => str
		P(2,true) as boolean => matchCase

		# after rewrite of self.match these do basically the same
		self.match(str) != null
	}

	# Search for string. If there is a match, return the line (which is now current line). If no match,
	# leave the current position unchanged, and return null. After done with processing the match,
	# remember to call .next, to start matching from next original line.
	# --
	self.match=Lambda{
		P(1) as String => str
		P(2,9999) as int => maxIncr
		P(3,true) as boolean => matchCase

		startPos=self.pos
		
		found=false
		loop
			break(self.atEOF)
			found=(matchCase && self.line.contains(str)) || (!matchCase && self.line.toLower.contains(str.toLower))
			break(found)
			self.next
		|
		if(found) {
			self.line
		} else {
			self.pos=startPos # restore current pos
			null
		}

	}

	# Do a programmed replace/delete for the first match, with both 
	# expressed as lambda's. Remember to call .next after each match, to
	# continue working from the next line
	# --
	self.progMatchFirst=Lambda{
		P(1) as Callable => trigger  # takes line as input, returns true if a match
		P(2) as Callable? => modifier # takes line as input, returns null to delete, or string or list of strings to replace
										# (empty list also means delete)

		startPos=self.pos
		found=false
		loop
			break(self.atEOF)
			if (trigger.call(self.line)) {
				found=true
				if (modifier != null) {
					result = modifier.call(self.line)
					if (result==null) self.delete
					else Inner {
						self.delete
						result->s self.write(s)
					}
				}
				break
			}

			self.next
	
		|
		if (!found) {
			self.pos=startPos  # reset to start pos
			false
		} else {
			true
		}
	}


	self.modifications=Dict

	# Delete current line and any modifications made for it, with self.write below
	self.delete=Lambda{
		self.modifications.set(""+self.pos, List)  # empty list if not defined already through self.write
	}

	self.write=Lambda{
		P(1)=>line
		self.modifications.get(""+self.pos, List).add(line)
	}

	self.isModified = Lambda{
		self.modifications.keys.length > 0
	}

	self.out = Lambda{
		Std.Data.each(0,self.lines.length-1)->i
			s=self.modifications.get(""+i, null) => list
			if (list == null) {
				out(self.lines.nth(i))  # original 
			} else {
				list->s out(s)  # mods
			}
	}

/class EditBuffer		
	

# Testdata for EditBuffer class
# --
	<<<< EOF
package some.thing;

import java.util.regex.*;
import java.util.Vector;
import org.apache.log4j.Logger;

/**
 * @author xyz
 */

public class CheckPattern extends MyPatternStuff {
	private Pattern pattern=null;
	private String[] placeholder = null;

	public CheckPattern (String s) throws Exception {
		this.pattern=s;
	}
}
	>>>> EOF
/TestData


# Test
# --
	buf=EditBuffer(TestData)
	buf.progMatchFirst(
		Lambda{
			P(1).trim => s
			s.startsWith("import") && s.contains("apache.log4j")
		},
		Lambda{
			<<<< EOF
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
			>>>> EOF
		}
	)


	# Create a helper object to capture the name of the class
	obj=Dict
	obj.matcher=Lambda{
		P(1).trim =>s
		if (s.startsWith("public") || s.startsWith("private")) {
			s=s.after(" ").trim
			error(!s.startsWith("class"), "expected 'class' keyword")
			s=s.after(" ").trim
			self.className=s.before(" ")
			true
		} else {
			false
		}
	}

	buf.progMatchFirst(obj.get("matcher"))
	className=obj.get("className",null)

	error(className==null, "No classname found")
	println("# Class name = " + className)

	buf.reset
	buf.match("{")
	println("# " + buf.line)

	buf.next
	Sequence(
		"	private static Logger logger = LoggerFactory.getLogger(<<className>>.class);".mergeExpr.first
		buf.line  # preserve the original next line
		""
	)->line
		buf.write(line)

	|	

	buf.out
//test




# Buffered string with lookahead similar to Std.Text.Lexer -> TokenStream
# --
	P(1) => string
	
	self.string=string
	self.pos=0
	
	# Rest of string after what has been matched or skipped so far
	self.rest = Lambda{
		self.string.sub(self.pos)
	}
	
	# True if rest starts with pattern, does not advance pointer
	self.peek = Lambda{
		P(1) as String => pattern
		self.rest.startsWith(pattern)
	}
	
	# Advance pointer if match, return boolean
	self.match = Lambda{
		P(1) as String => pattern
		if (self.peek(pattern)) {
			self.pos=self.pos + pattern.length
			true
		} else {
			false
		}
	}
	
	self.advance = Lambda{
		P(1) as int => count
		self.pos=self.pos+count
	}
	
	self.atEOL = Lambda {
		self.pos >= self.string.length
	}
	
	# Advance to start of pattern, if found return consumed text, otherwise null
	self.advanceTo = Lambda {
		P(1) as String => pattern
		foundPos=self.rest.indexOf(pattern)
		if (foundPos >= 0) {
			s=self.rest.sub(0,foundPos)
			self.advance(foundPos) # relative to self.pos
			s
		} else {
			null
		} 
	}
	
	# Search for pattern, then advance past it, return text consumed or null if no match
	self.advancePast = Lambda{
		P(1) as String => pattern
		s=self.advanceTo(pattern)
		if (s==null) {
			null
		} else {
			self.advance(pattern.length)
			s+pattern
		}
	}
	
	# Consume whitespace, return consumed text or null if no match
	self.ws = Lambda{
		P(1,true) => multiple
		start=self.pos
		
		loop
			if (self.rest.startsWith(" ") || self.string.startsWith("^t".unEsc)) {
				self.advance(1)
				break(!multiple)
			} else break
		|
		if (self.pos > start) 
			self.string.sub(start, self.pos)
		else
			null
	}
	
	# Consume date, return Date object or null if no date found
	self.date = Lambda{
		P(1,"yyyy-MM-dd") as String => fmt
		date = Date.setFormat(fmt).parse(self.rest)
		if (date != null) {
			self.advance(fmt.length)
		}
		date
	}
			
		
/class BufferedString





# BufferedString example and test
# --
	data = "[2025-03-02]        the value is: 42 # but what is the question?"
	
	bs=BufferedString(data)
	Sequence(
		bs.advancePast("[")
		"DATE = " + bs.date("yyyy-MM-dd")
		bs.advancePast("]")
		"SINGLE SPACE = '" + bs.ws(false) + "'"
		"MULTI SPACE = '" + bs.ws + "'"
		bs.advancePast(":")
		"VALUE = " + bs.advanceTo("#")
		"REST=" + bs.rest
		bs.atEOL
		bs.peek("#")
	).print
/t


# Show special characters in lines of text
# --
	P(1) as List? => lines
	P(2, true) => onlyShowLinesWithSpecials

	if (lines==null) {
		println("Paste lines, terminate with '.' on separate line")
		readLines(".") => lines
	}
	lines->line
		s = line
			.replace("^t".unEsc,"<TAB>")
			.replace("^n".unEsc,"<NEWLINE>")
			.replace("^r".unEsc,"<CR>")
		if (!onlyShowLinesWithSpecials  
			|| s.contains("<TAB>") 
			|| s.contains("<NEWLINE>")
			|| s.contains("<CR>")) println(s)
/ShowSpecials



# Unescape string using backslashes to pass control characters
# --
	P(1) as String => s
	esc=false
	Dict
		.set("s"," ")
		.set("t","^t".unEsc)
		.set("r","^r".unEsc)
		.set("n","^n".unEsc) => map
	s.chars->c
		if (esc) {
			out(if(map.has(c), map.get(c), c))
			esc=false
		} else if (c=="\") {
			esc=true
		} else {
			out(c)
		}
	| _.concat
//UnescapeBackslash



# Compact notation for dissect of string
# " =name " Types. =type ,
# 
# means
# - Search for double quote 
# - create dictionary element name up to next delimiter which is another double quote
# - then search for the Types. string, create another dict element =type up to the comma
#
# Delimeters can also have alternatives, for example ,|) matching either a comma or a right
# paranthesis. If both occur in the data string, the leftmost is used.
# 
# Use backslash to escape first characters in token to avoid confusion with commands, plus
# \s = space
# \t = tab
# \n = newline
# \r = carriage return
# \\ = \
# 
# All other \x = x
#
#
# --
	P(1,Input("Example data string").get) as String => data
	P(2,Input("Commands").get) as String => commands

	pos=0	
	dict=Dict
	name=null

	allKeys=List

	commands.split->part
		
		if (part.startsWith("=")) {
			name=part.sub(1)
			allKeys.add(name)
			continue
		}
		

		# search for delimiter
		searchList=UnescapeBackslash(part).split("|") # list of options

		matchPos=0
		matchLength=0
		Inner{
			# use first match (lowest pos) from the list of patterns
			searchList->pattern
				x=data.sub(pos).indexOf(pattern)
				if (x>=0) out(Int(x,pattern))
			| _.sort => matches
			if (!matches.empty) {
				matchPos=matches.first
				matchLength=matches.first.data.length
			}
		}
			
		if (name != null) {
			if (matchPos >= 0) {
				dict.get(name,"") + data.sub(pos,pos+matchPos) => val
				dict.set(name,val)
			}
		}

		# terminate symbol
		name=null
		pos=pos+matchPos+matchLength
	|
	if (pos < data.length && name != null) {
		dict.get(name,"") + data.sub(pos) => val
		dict.set(name,val)
	}

	if (dict.keys.length > 0) {
		# populate missing keys with blank strings
		Inner{allKeys->key dict.get(key,"")}
	}
	dict

//DissectLine


# Apply Dissect on list of lines, shows result and stores data in Db2 for DisGen to work with
# --
	P(1) as List? => lines
	if (lines==null) {
		println("Paste lines, terminate with '.' on separate line")
		readLines(".") => lines
	}

	ShowSpecials(lines)

	P(2,Input("Commands").get) => commands
	
	lines->line
		reject(line.trim=="")
		dict=DissectLine(line,commands)
		if (dict.keys.length>0) out(dict)
	| _=> dissectOut

	Db2:Set(Sys.scriptId,"DissectCommands", commands)
	Db2:Set(Sys.scriptId,"DissectLast", dissectOut)

	dissectOut->dict
		values=List
		Inner{dict.keys->key values.add(key + "=" + dict.get(key))}
		reportList(values)
	| _=>rows
	Lib:ShowRows(rows)

	true

/Dissect


# Dissect last result (list of dictionaries)
# --
	Db2:Get(Sys.scriptId,"DissectLast",List)
/DissectLastResult



# Show dissect last result
# --
	P(1,DissectLastResult)->dict
		Inner{
			dict.keys->key out(key + "=" + dict.get(key))
		} reportList(_)
	| _=>list
	Lib:ShowRows(list)
/DissectShow
			

# Edit Dis list
# --
		
		P(1)=>code
		if (code==null) {
			println("Enter code that picks up the list as P(1) and")
			println("applies modifications to it. Note that return")
			println("value from the code is not used!!")
			println
			println("To create completely new values, just to P(1).clear then")
			println("add dictionaries.")
			println("---")
			Input("Enter code").get => code
		}
		lambda="Lambda{"+ code + "}"
		Lib:Header(lambda)
		
		lastResult=DissectLastResult
		Sys.eval(lambda).call(lastResult) # may modify the result list
		DissectShow(lastResult)
		Lib:Confirm("ok?") => ok
		if (ok) {
			Db2:Set(Sys.scriptId,"DissectLast", lastResult)
		}
/DissectEdit


# Generate output using last result from BSD command (stored in Db)
# --

	data=DissectLastResult
	error(data.length==0, "No matched lines found")

	DissectShow
	println

	Input("Enter generation string, using ${x} for named values").get => generationString

	println
	println("----")
	Db2:Get(Sys.scriptId,"DissectLast",List)->dict
		println(generationString.merge(dict.mergeCodes))
	|
	println("----")
	true
/DissectGen

	



# Perform replacement of text in a set of files
# --
	P(1,Dir) => currentDir
	P(2,readLine("File glob")) => glob
	P(3,readLine("Search for")) => pattern
	P(4,readLine("Replace with")) => replacement

	currentDir.allFiles(glob)->file
		changes=false
		Inner{
			file.read(false)->line 
				s=line.replace(pattern,replacement)
				if (line != s) changes=true
				out(s)
		} _=> newLines
		if (changes) {
			println(file.path)
			Lib:PreserveFileLineSeparator(file).create(newLines)
		}
/ReplaceInFiles

		
