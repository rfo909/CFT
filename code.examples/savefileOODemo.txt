# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
# --
<<<<<< EOF
As of version 3.3.2, CFT has simple support for object oriented programming.

Class hiearchies represent a computational overhead, but also can lead to
reuse of code, via selective inheritance. 

Note that a class has one or two "names", on the following format

/class A as B

The A part is the name of the class constructor function. It is the one we call
to create the class object. The second, B, is optional, and defaults to
A if not present. It defines the type of the Dict object, which is recognized
when doing

    P(1) as &B => obj


>>>>>> EOF
/Readme



# Val class - instantiated with a type string
# --
# The type parameter means the class is generic. When instantiated with type "String", it becomes a working object.
#
# In order to operate independently of actual data type, two lambdas toPresentationFormat and fromPresentationFormat are defined,
# which should be overridden in subclass, as illustrated in the ValInt class.
#
# This example deals with rendering HTML, which is all about strings, and which needs to convert int-values to and from string,
# for the internal representation to be of the actual type. 
# --
    P(1) as String => type
    P(2) as (type)? => value
    P(3,Std.Db.UUID) as String => name

    self.copyFrom(SymDict(type,value,name))

    self.isEditable=true
    self.isDisabled=false

    self.set=Lambda{
        P(1) as (self.type)? => value
        self.value=value
        # make chainable
        self
    }
    self.setEditable=Lambda{
        self.isEditable = {P(1) as boolean}
        self
    }
    self.setDisabled=Lambda{
        self.isDisabled = {P(1) as boolean}
        self
    }
    self.toPresentationFormat=Lambda{
        self.value
    }
    self.fromPresentationFormat=Lambda{
        P(1) as String? => s
        self.set(s)
    }

    self.render=Lambda{
        P(1,self.isEditable) as boolean => isEditable
        P(2,self.isDisabled) as boolean => isEnabled

        if (isEditable) {
            @ <input type="text" <<if(isEnabled,"","disable=disable")>> name="<<self.name>>" value="<<self.toPresentationFormat>>"/>
            .mergeExpr
        } else {
            @ <<self.value>>
            .mergeExpr
        }
    }
    
/class Val


# ValInt - identifies itself as "Val" 
#
# Inherits most from the Val function class, but add mods in the form
# of custom mapping to and from external string format.
# --
    P(1) as int? => value
    P(2) as String? => name

    self.copyFrom(Val("int", value, name))
    
    self.toPresentationFormat=Lambda{
        "" + self.value
    }
    self.fromPresentationFormat=Lambda{
        P(1) as String? => s
        if (s==null) {
            self.set(null)
        } else {
            self.set(s.parseInt)
        }
    }
    
/class ValInt as Val



# Page class
# --
    P(1,"Title") => title

    self.title=title
    self.rows=List
    self.addRow=Lambda{
        P(1) as String => title
        P(2) as &Val => val
        self.rows.add(SymDict(title,val))
    }
    self.render=Lambda{
        rows = Inner {
            self.rows->row
                @ <tr><td><< row.title >></td><td><< row.val.render >></td></tr>
                .mergeExpr->line
                    out(line)
        }

        pre = Sequence(
            @ <div>
            @ <h1><<self.title>></h1>
            @ <table>
        ).mergeExpr

        post=Sequence(
            @ </table>
            @ </div>
        ).mergeExpr

        # return 
        pre + rows + post
    }

/class Page



# Test
# --
    p=Page("My page")
    p.addRow("Name", Val("String","Roar"))
    p.addRow("Title", Val("String", "Boss man"))
    p.addRow("Age", ValInt(55).setEditable(false))
    p.render
/demo
