# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

<<<<<<<<<<<<<<<<<<<<<<<<< EOF
CFT v1.5.4
CFT v1.8.1
CFT v1.9.12

Install mongodb in High Availability configuration 

Requirements: 
    - servers must have access to shared directory with DEB packages 
    - servers must allow ssh without passwords
    - servers must allow sudo without passwords

    For more info
    $ :load SSH
    $ Readme


Installation
------------

- SetHostPrefix
- SetDbPath

- Hosts:CheckSSHKeys
- InstallMongodAll
- InstallMongoShellAll
- HowToInitRS for all RS names (function displays defined replica set names)
- InstallMongosAll
- RebootMongosServers
- HowToAddShard - run for each of the data shards

- ClearHostPrefix
>>>>>>>>>>>>>>>>>>>>>>>>> EOF
/Readme




# Config
"/mnt/storage/ISO/mongodb_ent/mongodb-enterprise-server_4.4.1_amd64.deb"
/CfgMongod

# Config
"/mnt/storage/ISO/mongodb_ent/mongodb-enterprise-shell_4.4.1_amd64.deb"
/CfgMongoShell

# Config
"/mnt/storage/ISO/mongodb_ent/mongodb-enterprise-mongos_4.4.1_amd64.deb"
/CfgMongos

# Config
"/mnt/storage/ISO/mongodb_ent/mongodb-mms_4.4.4.103.20201006T2226Z-1_x86_64.deb"
/CfgOPSManager


P(1,"temp") =>name
    Lib:TmpFile(name)
/TmpFile


# To enable installing multiple full HA configs, we use a prefix
# --
    Lib:Header("Host prefix")
    prefix = readLine("Enter host prefix, blank for none")
    Db2:Set("MongoHA.install","hostPrefix",prefix)
    println("Set to '" + prefix + "'")
/SetHostPrefix



# Get host prefix
# --
    prefix = Db2:Get("MongoHA.install","hostPrefix")
    if (prefix==null) SetHostPrefix
    
    Db2:Get("MongoHA.install","hostPrefix")
/HostPrefix




# After install, the prefix should be cleared
# --
    Db2:Set("MongoHA.install","hostPrefix",null)
/ClearHostPrefix




# Where to store data (inserted into mongod.conf)
# --
    Lib:Header("dbPath")
    currVal=Db2:Get("MongoHA.install", "dbPath")
    println("- previous value: '" + currVal + "'")
    println
    println("Default value is /var/lib/mongodb")
    println

    dbPath=readLine("Enter dbPath on VM's (enter for default)")
    if (dbPath.trim=="") dbPath="/var/lib/mongodb"

    Db2:Set("MongoHA.install","dbPath",dbPath)
    println("Set to '" + dbPath + "'")
/SetDbPath


# Get dbPath value 
    dbPath=Db2:Get("MongoHA.install","dbPath")
    if (dbPath==null) SetDbPath

    Db2:Get("MongoHA.install","dbPath")
/DbPath




# Config data
    # Get host prefix
    prefix = HostPrefix
    error(prefix==null,"No host prefix set - should at least be empty string")
    
    # Note: the config replica set name 'conf' must not be changed, unless
    # also modifying the MongosStartScript function, which depends on it
    create = Lambda { 
        P(1).split=>hosts 
        P(2,"")=>prefix
        P(3,"conf")=>replSetName
        P(4,"configsvr")=>clusterRole
        hosts->host
            prefixedHost=prefix+host
            out(Dict.set("host",prefixedHost)
                .set("replSetName",replSetName)
                .set("clusterRole",clusterRole)
            )
    }

    # Result list
    create.call("mcfg1.v mcfg2.v mcfg3.v",prefix,"conf","configsvr")
    +
    create.call("md11.v md12.v md13.v",prefix,"s1","shardsvr")
    +
    create.call("md21.v md22.v md23.v",prefix,"s2","shardsvr")
/MongodData



# Show MongodData on readable format
#
MongodData->d
    Inner {d.keys->key out(""+key+"="+d.get(key))} _.concat(" ")=>x out(x)
/MongodDataShow
    

# Config
"roar"
/SSHUser






Input("Target: user@host").get
/GetTarget




# Install mongo shell on one server: called from InstallMongoShellAll
#
P(1,GetTarget) =>target
    println("* Checking install")
    SSH:run (target, "which mongo",true) =>result
    found = (result.exitCode==0)

    if (found) {
        println("* mongodb shell already installed")
    } else {
        println("* Installing mongodb shell")

        SSH:sudo (target, List("apt update","apt -y install " + CfgMongoShell))

        println("* Verifying install")
        SSH:run (target, "which mongo") =>result
        ok = (result.exitCode==0)
        
        if(ok) {println("* ok")}
    } 
/InstallMongoShell


# Install MongoShell all servers
#
    MongodData->d out(d.host) | _ =>hosts
    
    hosts + MongosHosts =>hosts
    
    hosts->host
        println("----------------------")
        println("mongo shell: host = " + host)
        println("----------------------")
        InstallMongoShell(SSHUser+"@"+host)
/InstallMongoShellAll



# Check if mongod runs on SSH target
#
P(1,GetTarget) =>target

    SSH:sudo (target, "systemctl status mongod",true) =>result

    # return value
    if (result.exitCode==0) {
        "running"
    } else if (result.exitCode==3) {
        "stopped"
    } else {
        "undefined"
    }
/CheckMongodService


# InstallMongod on single SSH target
#
    loop
        P(1,GetTarget) =>target
        P(2,Input("replSetName").get) =>replSetName
        P(3,Input("clusterRole").get) =>clusterRole
        P(4,true) =>interactive
        
        break(!interactive)

        Lib:ReadValueBoolean ("Confirm by typing 'yes'", false) =>confirmed
        break(confirmed)
    |

    println("* Checking that dbPath " + DbPath + " exists")
    SSH:sudo (target, "ls " + DbPath)
    
    println("* Removing /etc/mongod.conf if exists as apt install doesn't like it")
    SSH:sudo (target, "rm /etc/mongod.conf", true)

    println("* Installing mongodb server")
    SSH:sudo (target, "apt install -y " + CfgMongod)

    println("* Enabling mongo service")
    SSH:sudo (target, "systemctl enable mongod")

    println("* Setting permissions on dbPath " + DbPath)
    SSH:sudo (target, "chown -R mongodb:mongodb " + DbPath)
    
    target.after("@") =>host

    println("* Creating mondod.cfg file")
    TmpFile("configfile") =>f
    f.create(CreateMongoConfig(replSetName, clusterRole))

    println("* Copying file to server in home dir")
    SSH:copy (f, target, "./mongod.conf") 

    println("* Moving file at server to /etc")
    SSH:sudo (target,"cp ./mongod.conf /etc")

    println("* Stopping mongod - if already running")
    SSH:sudo (target,"systemctl stop mongod", true)

    println("* Starting mongod")
    SSH:sudo (target,"systemctl start mongod")
  
/InstallMongod



# Install mongod on all MongodData servers
#
    MongodData->d
        d.host =>host
        d.replSetName =>replSetName
        d.clusterRole =>clusterRole
        println
        println("----------------------")
        println("mongod: host=" + host + " replSetName=" + replSetName + " clusterRole=" + clusterRole)
        println("----------------------")
        InstallMongod(SSHUser+"@"+host, replSetName, clusterRole, false)
/InstallMongodAll


# Install mongod on single server - does lookup
# in the MongodData set for replSetName and clusterRole
#
Input("ssh user").get =>user
Input("host").get =>host
    MongodData->d
        assert(d.host==host)
        d.replSetName =>replSetName
        d.clusterRole =>clusterRole
        InstallMongod(user+"@"+host, replSetName, clusterRole, false)
/InstallMongodOne


## Info on how to initialize any replica set
#
    MongodData->d out(d.replSetName) | _.unique.concat(" ") =>availableRS
    println("** Available RS names: " + availableRS)

    Input("Replica set name").get =>rsName

    0 =>count
    MongodData->d
        assert(d.replSetName==rsName) 
        out("{ _id: " + count + ", host: " + '"' + d.host+":27017" + '" }') 
        count+1 =>count
    | _.concat(",") =>members
    TmpFile("init") =>f
    "rs.initiate({ _id: '" + rsName + "', members: [" + members + "] })" =>js
    
    println("Connect with mongo shell to one of the " + rsName + " servers")
    println("Enter the following command")
    println
    println(js)
    println

    true
/HowToInitRS


# Identify conf servers
    MongodData->d
        assert(d.clusterRole=="configsvr")
        out(d.host)   
/MongosHosts


# Install mongos on single target
#
P(1,GetTarget) =>target
    println("* Installing mongos")
    SSH:sudo (target, "apt install -y " + CfgMongos)

    println("* Creating Mongos start script")
    TmpFile("mongos") =>f
    f.create(MongosStartScript(27018))

    println("* Copying file to server in home dir as start_mongos.sh")
    SSH:copy (f, target, "./start_mongos.sh")
 
    println("* Setting executable flag on start_mongos.sh")
    SSH:run (target,"chmod 755 ./start_mongos.sh")

    println("* Collecting path to remote home dir")
    "./start_mongos.sh" =>fullPath

    Systemd:CreateService (target, "mongos", "Mongos for HA cluster", fullPath, false)

/InstallMongos


# Install mongos on all conf hosts
#
Input("ssh user").get =>user
    MongosHosts->host
        println("----------------------")
        println("mongos: host =>" + host)
        println("----------------------")
        InstallMongos(user+"@"+host)
/InstallMongosAll
        


# Reboot the Mongos servers after installing Mongos
Input("ssh user").get => user
    MongosHosts->host
    println("* Rebooting host " + host)
    SSH:sudo (user+"@"+host, "reboot", true)  # allow failure because reboot causes the connection to close
/RebootMongosServers





## Info on how to add shard to config
    println("To add a shard, create the VM's then extend")
    println("the MongodHosts with the new hosts and their")
    println("replSetName and clusterRole. Then run this")
    println("function.")
    println
    
    MongodData->d assert(d.clusterRole=="shardsvr") out(d.replSetName) | _.unique.concat(" ") =>availableRS
    println("** Available RS names with clusterRole 'shardsvr': " + availableRS)

    Input("Replica set name").get =>rsName
    #count=0
    MongodData->d
        assert(d.replSetName==rsName) 
        out(d.host+":27017") 
        #count=count+1
    | _.concat(",") =>members
    #TmpFile("init") =>f
    "sh.addShard('"+rsName+"/"+members+"')" =>js
    
    println("Connect with mongo shell to one of these mongos servers (port 27018):")
    println("      " + (MongosHosts.concat(", ")) )
    println("Enter the following command")
    println
    println(js)
    println

    true
/HowToAddShard









## Create Mongos start script
## --
    P(1,27018) => port
    MongodData->d 
        assert(d.replSetName=="conf") 
        out(d.host+":27017") 
    | _.concat(",")  =>confServers
    Dict.set("port",port).set("confServers",confServers).mergeCodes =>data
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF
#!/bin/bash

mongos \
    --configdb conf/${confServers} \
    --bind_ip_all \
    --port ${port}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF
->line
    out(line.merge(data))
/MongosStartScript





# Create mongod.conf
# --
PDict("replSetName","clusterRole")
    .set("dbPath", DbPath)
    .mergeCodes => data 

error(data.hasNullValue,"Expected parameters replSetName, clusterRole")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF
# mongod.conf

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# Where and how to store data.
storage:
  dbPath: ${dbPath}
  journal:
    enabled: true
#  engine:
#  mmapv1:
#  wiredTiger:

# where to write logging data.
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

# network interfaces
net:
  port: 27017
  bindIpAll: true


# how the process runs
processManagement:
  timeZoneInfo: /usr/share/zoneinfo

#security:

#operationProfiling:

replication:
  replSetName: '${replSetName}'

sharding:
  clusterRole: '${clusterRole}'

## Enterprise-Only Options:

#auditLog:

#snmp:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF
->line
    out(line.merge(data))
/CreateMongoConfig




# OPS Manager
# --

    CfgOPSManager
/t
