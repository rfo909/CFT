# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

<<<<<<<<<<<<<<<<<<<<<< EOF
Code to set up systemd service on remote server,
as identified by target string on format user@host.

Main function is CreateService

It runs both interactive and with parameters.
>>>>>>>>>>>>>>>>>>>>>> EOF
/Readme



P(1) =>target P(2) =>cmd P(3) =>acceptErrors P(4) =>showDebug
    SSH:run (target, cmd, acceptErrors, showDebug) =>dict
/run

P(1) =>target P(2) =>cmd P(3) =>acceptErrors P(4) =>showDebug
    SSH:sudo (target, cmd, acceptErrors, showDebug) =>dict
/sudo



P(1,"temp") =>name
    Dir("/tmp").file(name + "." + currentTimeMillis)
/TmpFile





Input("Target: user@host").get
/GetTarget




# Set up systemd service
    println("* Creating systemd service")
    loop
        P(1,GetTarget) => target
        P(2,Input("service name").get) => serviceName
        P(3,Input("service description").get) => desc
        P(4,Input("remote path to script (will be copied)").get) => script
        P(5,true) => interactive

        break(!interactive)
        Lib:ReadValueBoolean ("Confirm by typing 'yes'", false) =>confirmed
        break(confirmed)
    |

    println("* Adding user " + serviceName)
    sudo(target,"adduser "+serviceName)

    "/home/"+serviceName =>homeDir
    script.afterLast("/") =>scriptName
    homeDir + "/" + scriptName =>scriptPath

    println("* Copying " + script + " to " + scriptPath)
    sudo(target,"cp " + script + " " + scriptPath)

    println("* chown " + serviceName + ":" + serviceName + " on " + scriptPath)
    sudo(target,"chown " + serviceName + ":" + serviceName + " " + scriptPath)

    TmpFile("systemd") =>f
    f.create(SystemdServiceFile(serviceName, desc, scriptPath))

    serviceName + ".service" =>serviceFile

    println("* Copying systemd service file as ./" + serviceFile)
    SSH:copy (f,target,"./"+serviceFile)

    println("* Copying ./" + serviceFile + " to /etc/systemd/system")
    sudo(target,"cp ./" + serviceFile + " /etc/systemd/system")
    
    println("* Starting service")
    sudo(target,"systemctl start " + serviceName)
 
    println("* Enabling service")
    sudo(target,"systemctl enable " + serviceName)
 

    f.delete
/CreateService




# Create systemd service file
# --
    PDict("user","desc","path").mergeCodes =>data
    error(data.hasNullValue,"Takes three parameters: user, desc, path")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EOF
[Unit]
Description=${desc}
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=${user}
ExecStart=${path}

[Install]
WantedBy=multi-user.target
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EOF
    ->line
        out(line.merge(data))
/SystemdServiceFile
