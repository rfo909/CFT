# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Extending prompt
# --
    Date.fmt
/StateString


# Count down seconds
# --
    P(1,10) => minutes
    prefix=""

    seconds=minutes*60

    start=currentTimeMillis
    i=0
    loop
        targetTime=start+(i*1000)
        waitTime=targetTime-currentTimeMillis
        if (waitTime > 0) Sys.sleep(waitTime)

        # present current value
        println(Curses:Clear)

        remainingTime=seconds-i
        
        println(prefix+"Total time: " + minutes + " minutes")

        # progress bar
        (50*i/seconds).i => done
        Std.Data.yes(done,Sys.uchar("2588")).concat => bar
        Std.Data.yes(50-done,".").concat => remaining
        
        percent=(100*i/seconds).i
        println(prefix + bar+remaining+" " + percent + " %")

        break(i>=seconds)
        if (seconds-i > 300) {
            i=i+10
        } else {
            i=i+3
        }
    |
    println
    Alarm
/CountDown


# Pomodoro, countdown 45 minutes
# --
    P(1,45) => minutes
    CountDown(minutes)
/Pomodoro



# Alarm
# --
    Std.Data.each(1,4)->x
        println("ALARM!!" + Sys.uchar(7))
        Sys.sleep(1000)
/Alarm


# Pomodoro countdown timer
# --
    Input("Minutes").get.parseInt=>minutes
    CountDown(minutes)
/run


# Show clock (forever) 
# --
    curr=""
    loop
        Date.setFormat("HH:mm:ss").fmt => s
        if (s != curr) {
            curr=s
            println(Curses:Clear)
            Inner {Letters7x5:GetText(curr)->line println(line)}
        }
        Sys.sleep(50)
/Clock


# Show time 
# --
    Date.setFormat("HH:mm:ss").fmt => s
    Inner {Letters7x5:GetText(s)->line println(line)}
    s
/Time



# Minutes since midnight
# --
    P(1,Date)=>date
    date.timeSinceMidnight.asMinutes
/MinutesSinceMidnight


# Show minutes since midnight
# --
    loop
        println(Curses:Clear)
        lines=Letters7x5:T18(""+MinutesSinceMidnight)
        Inner {
            lines->line println(line)
        }
        Sys.sleep(13000)
/ShowMSM


# Reset minutes counter
# --
    Db2:Set(Sys.scriptId,"mStart",currentTimeMillis)
/ResetMC



# Minutes counter since reset
# --
    if (Db2:Get(Sys.scriptId,"mStart",0)==0) {
        ResetMC
    }
    ms=currentTimeMillis-Db2:Get(Sys.scriptId,"mStart")
    ms div 60000
/GetMC
    


# Count minutes since last reset
# --
    lastVal=-99
    loop
        val=GetMC
        if (val != lastVal) {
            println(Curses:Clear)
            lines=Letters7x5:T18(""+GetMC)
            Inner {
                lines->line println(line)
            }
            lastVal=val
        }
        Sys.sleep(3000)
/ShowMC


    
