# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Graph colors
# --
    DDDGraphs:Colors
//Colors


# Target dir for testing
# --
    Sys.homeDir.sub("anim").sub("2d").create
/TargetDir


# 720 degrees helix
# --
    P(1,List(10,11,2,1,8,5,40,30,12))=>values
    P(2,List("Alice","Bob","Carol","Dante","Edward","Fiona","Gabriel","Santa Claus","Others"))=>labels
    P(3,TargetDir.file("helix.png"))=>targetFile
    
    error(values.length != labels.length, "values and labels must match")
    error(values.length > Colors.length, "max " + Colors.length + " values supported (dictated by number of colors)")
    
    
        
    Std.Data.for(0,values.length,1)->i
        out(Float(values.nth(i).f,labels.nth(i)))
    | _.sort.reverse => values
    
    values->x out(x.data)
    | => labels
    
    
    Std.DD.World => world
    Std.DD.Ref => ref
    
    angles=DDDGraphs:Fractions(values,720)
    colors=Colors
    torusRadius=100
    torusWidth=33
    
    # Draw torus
    b = world.Brush(torusRadius,torusRadius-torusWidth)
    
    torusRef=ref
    Std.Data.for(0,721,1)->angle
        pos=DDDGraphs:GetPosInFractionsSequence(angle,angles)
        b.setColor(colors.nth(pos))
        b.penDown(torusRef.turnRight(angle).setScaleFactor(900-angle))
    |
    
    # Legends
    pixelHeight=1.5
    
    lineSpace=4
    
    numLines=values.length
    linesHeight=numLines*7
    linesDist=(numLines-1)*lineSpace
    totalHeight=linesHeight+linesDist
    
    textRef=ref.scaleUp(900).fwd(torusRadius*1).scaleUp(pixelHeight).left(totalHeight*0.5)

    Std.Data.for(0,labels.length,1)->i
        label=labels.nth(i)
        color=colors.nth(i)
        
        DDLetters:DDText(world,textRef,label,color)
        textRef = textRef.right(7).right(lineSpace)
    |
    
    world.render(targetFile)
/Helix







# Torus diagram
# --
    P(1,List(10,11,2,1,8,5,40,30,12))=>values
    P(2,List("Alice","Bob","Carol","Dante","Edward","Fiona","Gabriel","Santa Claus","Others"))=>labels
    P(3,TargetDir.file("torus.png"))=>targetFile
    P(4,0)=>torusRotateLeft
    
    error(values.length != labels.length, "values and labels must match")
    error(values.length > Colors.length, "max " + Colors.length + " values supported (dictated by number of colors)")

        
    Std.DD.World => world
    Std.DD.Ref => ref
    
    angles=DDDGraphs:Fractions(values,360)
    colors=Colors
    torusRadius=100
    torusWidth=33
    
    # Draw torus
    b = world.Brush(torusRadius,torusRadius-torusWidth)
    
    torusRef=ref.turnLeft(torusRotateLeft)
    Std.Data.for(0,361,1)->angle
        pos=DDDGraphs:GetPosInFractionsSequence(angle,angles)
        b.setColor(colors.nth(pos))
        b.penDown(torusRef.turnRight(angle))
    |
    
    # Legends
    pixelHeight=1.5
    
    lineSpace=4
    
    numLines=values.length
    linesHeight=numLines*7
    linesDist=(numLines-1)*lineSpace
    totalHeight=linesHeight+linesDist
    
    textRef=ref.fwd(torusRadius*1.2).scaleUp(pixelHeight).left(totalHeight*0.5)

    Std.Data.for(0,labels.length,1)->i
        label=labels.nth(i)
        color=colors.nth(i)
        
        DDLetters:DDText(world,textRef,label,color)
        textRef = textRef.right(7).right(lineSpace)
    |
    
    world.render(targetFile)
/Torus



# Bars diagram
# --
    P(1,List(10,11,2,1,8,5,40,30,12,5,6,7))=>values
    P(2,List("Alice","Bob","Carol","Dante","Edward","Fiona","Gabriel","Harry","Ignoramus","Jorge","Santa Claus","Others"))=>labels
    P(3,TargetDir.file("bars.png"))=>targetFile
    
    error(values.length != labels.length, "values and labels must match")
    error(values.length > Colors.length, "max " + Colors.length + " values supported (dictated by number of colors)")

    Std.DD.World => world
    Std.DD.Ref => ref

    diagramWidth=200
    diagramHeight=200
    
    colors=Colors
    
    colWidth=diagramWidth/values.length
    max=0
    Inner{values->v 
        if (v>max) max=v
    }
    vfactor=diagramHeight/max
    
    # Render bars
    base=ref
    xx=(colWidth/2)*0.9
    b=world.Brush(-xx,xx)
    Inner {
        Std.Data.for(0,values.length,1)->i
            colors.nth(i) => color
            b.setColor(color)
            base.turnLeft(90) => p1
            base.turnLeft(90).fwd(values.nth(i)*vfactor) => p2
            b.penDown(p1)
            b.penDown(p2)
            b.penUp
            base=base.fwd(colWidth)
    }

    # Legends
    pixelHeight=1.5
    
    lineSpace=4
    
    numLines=values.length
    linesHeight=numLines*7
    linesDist=(numLines-1)*lineSpace
    totalHeight=linesHeight+linesDist
    
    textRef=ref.fwd(diagramWidth*1.05).left(diagramHeight/2).scaleUp(pixelHeight).left(totalHeight*0.5)

    Std.Data.for(0,labels.length,1)->i
        label=labels.nth(i)
        color=colors.nth(i)
        
        DDLetters:DDText(world,textRef,label,color)
        textRef = textRef.right(7).right(lineSpace)
    |
    
    world.render(targetFile)
/Bars



