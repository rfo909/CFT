# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
# --
<<<<<<< EOF
Using Db2 to store data encrypted with Sys.secureSessionId, for storing 
passwords and other secrets for the duration of the session.
>>>>>>> EOF
/Readme


# Get or ask for session secret. It is stored in database, encrypted with Sys.secureSessionId.
# --
    P(1,"Label") => label
    P(2,false) => echo
    
    label.toHexString => key
    "v"+key => verifyKey
    
    Db2:Get("Vault",verifyKey) => value
    ok=(value != null && Std.Util.Decrypt(Sys.secureSessionId,"verify").processString(value)=="verified")
    
    if (ok) {
        Db2:Get("Vault",key) => value
        Std.Util.Decrypt(Sys.secureSessionId,"value").processString(value)
    } else {
        if (echo) {
            readLine(label) => value
        } else {
            Sys.readPassword(label) => value
            Sys.readPassword(label+" (again)") => value2
            error(value != value2, "Passwords don't match")
        }

        SessionSecretSet(label, value)

        value
    }
/SessionSecretGet


# Set session secret, non-interactively
# --
    P(1,"Label") => label
    P(2,"") => value
    
    label.toHexString => key
    "v"+key =>  verifyKey
    
    Std.Util.Encrypt(Sys.secureSessionId,"value").processString(value) => eValue
    Db2:Set("Vault", key, eValue)
    Std.Util.Encrypt(Sys.secureSessionId,"verify").processString("verified") => eVerified
    Db2:Set("Vault", verifyKey, eVerified)
/SessionSecretSet



# Clear session secret, as identified by label
# Removing verification value for a session secret, forcing SessionSecretGet to ask for it
# --
    P(1,"Label") => label
    label.toHexString => key
    "v"+key => verifyKey
    Db2:Set("Vault",verifyKey,"")
/SessionSecretClear




# Get or ask for session property (non encrypted)
# --
    P(1,"Label") as String => label
    
    dbField = Sys.scriptId + ":" + label.toHexString
    
    Db2:Get(Sys.sessionUUID,dbField) => s
    if (s==null) {
        readLine(label) => s
        Db2:Set(Sys.sessionUUID,dbField,s)
    }
    s
/SessionPropertyGet



# Set session property non-interactivel (not encrypted)
# --
    P(1,"Label") as String => label
    P(2, "") => value
    
    dbField = Sys.scriptId + ":" + label.toHexString
    
    Db2:Set(Sys.sessionUUID,dbField,value)
/SessionPropertySet




# Clear session property
# --
    P(1,"Label") as String => label
    dbField=Sys.scriptId + ":" + label.toHexString
    Db2:Set(Sys.sessionUUID,dbField,null)
/SessionPropertyClear



# Create persistent secret, protected by password (remembered as session secret in each session)
# Overwrites old value
# --
    P(1, readLine("Persistent secret name")) as String => name
    P(2, readLine("Persistent secret value")) as String => value

    name.toHexString => key

    Vault:SessionSecretGet("Persistent secret password for '" + name + "'?") => password

    enc=Std.Util.Encrypt(password.getBytes("UTF-8"))

    Db2:Set(Sys.scriptId, key, enc.processString(value))

    enc=Std.Util.Encrypt(password.getBytes("UTF-8"))
    Db2:Set(Sys.scriptId, key + ".check", enc.processString("knownstring"))
/CreatePersistentSecret


# Get or create persistent secret, password protected (remembered as session secret within each session)
# --
    P(1, readLine("Persistent secret name")) as String => name

    name.toHexString => key

    encodedCheck = Db2:Get(Sys.scriptId, key + ".check")
    if (encodedCheck==null) {
        println("No such secret: '" + name + "'")
        CreatePersistentSecret(name)
        encodedCheck = Db2:Get(Sys.scriptId, key + ".check")
    }

    Vault:SessionSecretGet("Persistent secret password for '" + name + "'?") => password

    dec=Std.Util.Decrypt(password.getBytes("UTF-8"))
    knownstring = dec.processString(encodedCheck)
    error(knownstring != "knownstring", "Invalid password")

    dec=Std.Util.Decrypt(password.getBytes("UTF-8"))
    dec.processString(Db2:Get(Sys.scriptId, key))
/GetPersistentSecret

    



    
    
