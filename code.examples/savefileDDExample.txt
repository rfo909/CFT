# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Example of 2D graphics, rendering the same wheel as the DDDExample (3D) version
# --


# Circle
# --
    P(1)=>ref
    P(2)=>brush
    P(3)=>radius
    

    Std.Data.for(0,361,3)->angle
        brush.penDown(ref.turnLeft(angle).fwd(radius))
    |
    brush.penUp
/Circle



# Target dir for testing
# --
    Sys.homeDir.sub("anim").sub("2d").create
/TargetDir



# Wooden wheel example
# --
    P(1,Std.DD.World)=>world
    P(2,Std.DD.Ref)=>ref
    P(3,TargetDir.file("wheel.png"))=>file
    
        # ref is at the center of the wheel, with wheel extending in forward/backward and up/down plane

    hubThickness=50
    rimThickness=30

    spokeRadius=15
    axleHoleRadius=15
    
    rimCenterRadius=500
    
    println(getType(world))


    Circle(ref, world.LineBrush.setColor(Std.Color(200,100,0)), axleHoleRadius)
    Circle(ref, world.LineBrush.setColor(Std.Color(200,100,0)), axleHoleRadius+hubThickness)
    Circle(ref, world.LineBrush.setColor(Std.Color(0,0,255)), rimCenterRadius-rimThickness/2)
    Circle(ref, world.LineBrush.setColor(Std.Color(0,0,255)), rimCenterRadius+rimThickness/2)
    
    # spokes
    Std.Data.for(0,361,30) -> angle
        # spokes
        x=ref.turnLeft(angle).fwd(axleHoleRadius+hubThickness)
        y=ref.turnLeft(angle).fwd(rimCenterRadius-rimThickness/2)
        world.LineBrush.setColor(Std.Color(255,0,0)) => b
        List(-spokeRadius, spokeRadius) -> offset
            b.penDown(x.right(offset))
            b.penDown(y.right(offset))
            b.penUp
    |

    world.render(file)

    println("Wrote file " + file.path)
/Wheel


