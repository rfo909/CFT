# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License



Input("Enter ssh target on format user@host").get
/GetSSHTarget


# Run Update and Upgrade on target, unless it has been updated within 20 hours
# Returns boolean true if ok, false if error
# --
P(1,GetSSHTarget) =>target
P(2,36) => hoursSinceLast
P(3,false) => includeDistUpgrade

    println("APT update and upgrade")

    error(!target.contains("@"), "Invalid target: " + target)

    error(!SSH:HostOkSSH(target),"Target " + target + " not responding")

    target.afterLast("@") =>host
    tMark=Sys.scriptName+".lastrun."+host


    println("Performing update")
    result = SSH:sudo(target,"apt-get -y update", true)

    FAIL = result.get("exitCode") != 0 
    if (FAIL) Inner {
        Lib:Header("Update failed")
        result.stdout->line println(line) |
        result.stdout->line println("##ERR## " + line)
    } 

      if (!FAIL) {
        println("Performing upgrade")
        SSH:sudo(target,"apt-get -y upgrade", true) =>result
        FAIL = result.get("exitCode") != 0 
        if (FAIL) Inner {
            Lib:Header("Upgrade failed")
            result.stdout->line println(line) |
            result.stdout->line println("##ERR## " + line)
        } 
      }

      if (includeDistUpgrade && !FAIL) {
        println("Performing dist-upgrade")
        SSH:sudo(target,"apt-get -y dist-upgrade", true) =>result
        FAIL = result.get("exitCode") != 0 
        if (FAIL) Inner {
            Lib:HEader("Dist-upgrade failed")
            result.stdout->line println(line) |
            result.stdout->line println("##ERR## " + line)
        } 
      }

      if (!FAIL) {
        Util:SetTimeMark(tMark)
      }
      
      # return value
      !FAIL
    }
/run

