# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2025 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License

# Readme
<<< EOF
------------------------------------------------
Collection of functions for managing 
servers remotely via SSH. For scripts
to work, the remote server must

- allow ssh without password
- allow sudo without password

To do this, see the SSH script and its Readme
function.
------------------------------------------------
>>> EOF
/Readme


P(1,"x") =>name
Lib:TmpFile(name)
/TmpFile


Input("SSH target on format username@server").get
/ReadSSHTarget


# Helper, calls SSH:run
# --
	P(1,ReadSSHTarget) =>target
	P(2,readLine("Command")) =>command
	P(3,Dict) =>codes
	P(4,false) =>showDebug
    SSH:run (target,command,codes,showDebug)
//run


# Wait until a VM responds to ping
# --
	P(1,Input("IP address to wait for").get) =>ip 
	100 => retries
	loop
		error(retries<=0,"No Ping response from " + ip)
		retries = retries-1
		ok = true
		Lib:run(List("ping","-c","1",ip),List,true) => x

		println("Retries left: " + retries)
		#Inner {
		# println("--- Waiting for PING")
		# Util:ShowDict(x)->line println(line)
		#}
		break(x.exitCode==0)
		Sys.sleep(3000)
	|
	true
/WaitForPing



# Fix hostname of a VM
# --
	P(1,Input("SSH target user@host").get) =>target
	P(2,Input("Host name").get) =>hostname

    TmpFile("hn") =>f 
    f.create(hostname)
    
    println("* Copying hostname file to target")
    SSH:copy (f, target, "./hostname")
    
    println("* Moving hostname file to /etc")
    sudo(target,List("cp ./hostname /etc"))
    
    println("* Deleting hostname from home dir")
    run(target,"rm ./hostname")
    
    f.delete
/VMSetHostname



# Fix netplan configuration for a VM
# --
	P(1,Input("SSH target user@host").get) =>target
	P(2,Input("IP address xx.xx.xx.xx/MM").get) =>ip
	P(3) => nic
	P(4,Input("Gateway IP address").get) => gateway

    error(!ip.contains("/"), "IP address missing mask? xx.xx.xx.xx/MM")

    if (nic==null) Inner{
        println("* Running remote command 'ip addr' to list network device names")
        println("---------------------------------------------------------------")
        run(target,"ip addr").get("stdout")->line
            println("    " + line)
        |
        
        println
        Input("Enter network device name").get =>nic
    }
    
    TmpFile("np") =>f
    f.create(VMNetplan(ip,nic,gateway))
    
    println("* Copying netplan to target")
    SSH:copy (f, target, "./netplan.txt")
    
    println("* Deleting all files under /etc/netplan")
    sudo(target, List("rm -f /etc/netplan/*"))
    
    println("* Moving netplan file into /etc")
    sudo(target, List("mv ./netplan.txt /etc/netplan/50-cloud-init.yaml"))
/VMConfigureNetplan


# Netplan template merge
# --		
	PDict("ip","nic","gateway").mergeCodes =>data
	error(data.hasNullValue,"Expected parameter for IP address and mask on format xx.xx.xx.xx/MM")
	<<< EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    ${nic}:
      dhcp4: no
      gateway4: ${gateway}
      addresses: [${ip}]
      nameservers:
        addresses: [${gateway}]
>>> EOF
	->line
		out(line.merge(data))
//VMNetplan







