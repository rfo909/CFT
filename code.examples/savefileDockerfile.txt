# License
<<< EOF
#
# CFT - an interactive programmable shell for automation 
# Copyright (C) 2020-2024 Roar Foshaug
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
>>> EOF
/License


# Database key
# --
    Sys.scriptId
//DbKey

# Get copy statements
# --
    Db2:Get(DbKey,"CopyList",List)
/CopyList

# Save copy statements
# --
    P(1) as List => data
    Db2:Set(DbKey,"CopyList", data)
//Save

# Add copy statement
# --
    P(1,Dir) => src
    P(2,readLine("Enter glob pattern, * for all")) => glob
    P(3,readLine("Enter target dir")) => target
    
    
    if (glob.trim=="") glob="*"

    Save(CopyList.add(SymDict(src,glob,target)))
/Add


# Simulate running copy of directory
# --
    P(1) => virtDisk
    P(2) => dir
    P(3) => target

    virtDisk.get(target,List) => list

    Inner {
        dir.files->f list.add(f)
    }

    dir.dirs->d
        SimulateCopyDir(virtDisk, d, target + "/" + d.name)

//SimulateCopyDir



# Simulate running copy statements
# --
    P(1,CopyList)=>statementList

    virtDisk=Dict
    statementList->stmt

        if (!stmt.src.exists) {
            error("NOT FOUND: " + stmt.src)
        }

        virtDisk.get(stmt.target,List) => list

        stmt.src.files(stmt.glob) => files

        Inner{files->f list.add(f)}

        Inner{
            stmt.src.dirs(stmt.glob)->dir
                SimulateCopyDir(virtDisk,dir,stmt.target + "/" + dir.name)
        }
            
    |
    virtDisk
/SimulateCopy


# Show result from executing a sequence of copy statements
# --
    P(1,CopyList) => statementList
    data=SimulateCopy(statementList)

    data.keys.sort->key
        files=data.get(key)
        reject(files.length==0)
        Lib:Header(key)
            
        showFiles=files
        if(files.length > 10) {
            showFiles=files.first(5)
        }
        Inner{
            showFiles->file
                println("   " + file.name)  
        }
        if (files.length > showFiles.length) {
            println("   (+ " + (files.length - showFiles.length) + " files)")
        }
/Show


# Select copy statement
# --
    P(1,"Select statement") => label
    count=0
    table=Util:Cols

    Lib:Header("Statements")
    println

    CopyList->stmt
        table.add(""+count+" -","COPY", stmt.src.path + Sys.fileSeparator + stmt.glob, stmt.target)
        count=count+1
    |
    table.getLines->line 
        println(line) 
        println
    |

    println(label)
    readLine("Select number, or blank to abort") => x
    error(x.trim=="","Aborting")
    x.trim.parseInt
//SelectStmt




# Examine what is copied for individual copy statements
# --
    SelectStmt => i
    List(CopyList.nth(i)) => statementList
    Show(statementList)
/Examine



Examine
/Ex





# Show copy statements
# --
    SelectStmt("Select statement to delete?") => i
    CopyList.remove(i) => newList
    Save(newList)
    println("Delete ok")
/Script


# Clear saved data
# --
    Save(List)
/ClearData
