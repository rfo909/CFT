# codeDirs
#
# Semicolon-separated list of directories to locate code, in sequence
# from work-directories towards library directories. 
#
# The first directory is the default save directory. This means that working
# on a script file from one of the other directories, when you save it, you
# don't overwrite the original, but instead store it in the first directory,
# and may later manually move it to the target directory, when it's ok.
# ----

codeDirs = . ; code.examples ; code.lib


# Favourite shell, for the shell() global function
# ----

shell = bash
winShell = powershell




# Macros invoked for various "shell" commands, 
# ----

mCat = Lambda { P(1)=>file if(file==null, Lib:GetLastResultFile, file) => file file.read->line println(line) }

mEdit = Lambda { P(1)=>file if(file==null, Lib:GetLastResultFile, file) => file Lib:e(file) }

mMore = Lambda { P(1)=>file if(file==null, Lib:GetLastResultFile, file) => file Lib:m(file) }

mTail = Lambda { P(1)=>file file.tail(500) }

mRm = Lambda { P(1) as List => x Lib:RmFilesAndDirs(x) }

mDiff = Lambda { Lib:DiffFiles(P(1),P(2)) }

mShowtree = Lambda { P(1)=>dir Lib:ShowTree(dir) }

mHash = Lambda { P(1) as List=>files if(files.empty, List(Lib:GetLastResultFile), files)=>files Lib:HashFiles(files) }

mHex = Lambda { P(1)=>file if(file==null, Lib:GetLastResultFile, file)=>file file.hex }

mGrep = Lambda { P(1)=>str P(2)=>fileList Lib:GrepFiles(str,fileList) }

mWhich = Lambda { P(1)=>str Lib:Which(str) }


# Lambdas for symbol set and get
# ----

mSymGet = Lambda { P(1)=>sym Lib:SymbolGet(sym) }

mSymSet = Lambda { P(1)=>sym Lib:SymbolSet(sym) }


# Shortcuts
#
# The shortcuts are lines of code. The return value from a shortcut becomes 
# the "last value", available via Sys.lastResult, as well as used by :syn etc
#
# Note that shortcuts only work when the prefix is at the start of the interactive
# input line. 
# ---
shortcutPrefix = @

shortcut:e    = "---- open script in editor ----"         if(Sys.savefile != null, Lib:e(Sys.savefile),"No savefile")
shortcut:ee   = "---- clear editor selection ----"        Lib:ClearEditor "Editor cleared"
shortcut:n    = "---- list newest files last ----"        Lib:ListNewestFiles(Dir)
shortcut:nr   = "---- new files recursively ----"         Lib:ListNewFilesRecursively(Dir)
shortcut:lint = "---- check curr script ----"             Sys.lint
shortcut:fm   = "---- open file manager (curr dir) ---"   Lib:fileManager(Dir)
shortcut:cmd  = "---- open cmd in curr dir ----"          Lib:OpenCMD(Dir)
shortcut:H    = "---- directory history ----"             Lib:GetDirHistory
shortcut:CH   = "---- commands history ----"              Lib:GetCommandHistory 
shortcut:term = "---- Update terminal size ----"          Lib:GetTerminalSize
shortcut:rsh  = "---- Remote shell via ssh ----"          SSH:remoteShell
shortcut:scr  = "---- Show all scripts ----"              Lib:Scripts

shortcut:home = "---- move to script dir ----"            Sys.savefile.dir.cd
shortcut:fsel = "---- select file from current dir ----"  Util:SelectFile(Dir)

shortcut:fp   = "---- lastResult file/dir object paths ----" Lib:Paths
shortcut:%    = "---- show current symbols ----"          Lib:Symbols


# copy / paste files

shortcut:c    = "---- copy files/dirs to clipboard ----"        Lib:ClipboardCopy(Dir)
shortcut:v    = "---- paste from clipboard ----"                Lib:ClipboardPaste(Dir)
shortcut:clip = "---- list content of clipboard ----"           Lib:ClipboardList()
shortcut:cliprm  = "---- delete files/dirs in clipboard ----"   Lib:ClipboardDelete()

# Search files under current dir
shortcut:S    = "---- search files under curr dir ----"   Lib:SearchTextFiles(Dir)
shortcut:SR   = "---- search recent files curr dir ----"  Util:SearchRecentFiles(Dir)
shortcut:DD   = "---- drilldown from curr dir ----"       DD:DD(Dir)
shortcut:DF   = "---- drilldown file list ----"           DD:F
shortcut:FL   = "---- File Locate under curr Dir ----"    Lib:LocateFiles(Dir)
shortcut:DL   = "---- Dir Locate under curr Dir ----"     Lib:LocateDirs(Dir)
shortcut:tree = "---- Show directory tree curr dir ----"  Lib:ShowTree(Dir)

# Projects script 
shortcut:P    = "---- Projects ----"                      Sys.stdin(":load Projects","curr")

# Investigate script
shortcut:i    = "---- Investigate log text ----"          Investigate:LogText
shortcut:id   = "---- Investigate log with data ----"     Investigate:LogData
shortcut:ii   = "---- Investigate log input loop ----"    Investigate:InputMode

# Job control
shortcut:J    = "---- List background jobs  ----"         Jobs:AllJobs
shortcut:JJ   = "---- Get first completed job ----"       Jobs:Get
shortcut:JCL  = "---- Clear completed jobs ----"          Jobs:Clear
shortcut:JFG  = "---- Interact with job ----"             Jobs:ToForeground


# Release script
shortcut:rel  = "---- Release ----"                       Sys.stdin(":load Release","?")


# List available shortcuts when typing '@' only
# ---
shortcut:     = "---- Show all shortcuts ----"            File("CFT.props").read->line assert(line.startsWith("shortcut:")) out(line)




#
# The prompt setting is a line of code, just as with the shortcuts
# ---

prompt = Prompt:PromptString(Dir,Sys.scriptName,if(Sys.functions.contains("StateString"),StateString,null))

bangCommand = BangParser:Run(Dir,P(1))

#
# The historyCommand is executed to maintain history of commands and directories (in Db2)
#

historyCommand = Lib:HistoryAppend(P(1),P(2))

#
# Std.Db.Db2 data directory
#

db2Dir = private/Db2

#
# Global onLoad - when CFT is started
# 

globalOnLoad = Lib:GetTerminalSize Lib:EncryptSanityCheck Util:CheckForUpdates

